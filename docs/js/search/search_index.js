var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/BoundingRectangle.html",[0,0.343,1,0.688]],["body/interfaces/BoundingRectangle.html",[0,0.477,1,1.142,2,1.269,3,0.956,4,0.821,5,0.821,6,0.833,7,0.452,8,4.589,9,3.841,10,1.667,11,2.585,12,1.104,13,1.104,14,0.697,15,0.697,16,1.142,17,1.461,18,2.678,19,1.679,20,1.461,21,1.461,22,2.206,23,2.206,24,1.461,25,1.679,26,3.084,27,3.088,28,1.142,29,1.392,30,0.054,31,1.516,32,1.915,33,3.841,34,1.148,35,0.697,36,0.045,37,0.045]],["title/interfaces/Coordinate.html",[0,0.343,38,1.2]],["body/interfaces/Coordinate.html",[0,0.365,1,1.18,2,0.493,3,0.371,4,0.319,5,0.319,6,0.271,7,0.233,12,0.961,13,0.68,14,0.703,15,0.271,16,0.588,17,0.844,19,1.104,20,1.114,21,0.961,22,1.026,23,1.026,24,1.047,25,1.104,28,1.128,29,1.226,30,0.055,31,1.104,34,0.505,35,0.533,36,0.023,37,0.023,38,1.828,39,0.565,40,1.932,41,1.932,42,1.079,43,0.505,44,1.45,45,1.266,46,1.026,47,1.45,48,1.596,49,1.666,50,1.026,51,1.45,52,0.744,53,0.744,54,0.429,55,0.744,56,0.744,57,1.38,58,1.929,59,2.025,60,1.112,61,0.565,62,1.666,63,0.744,64,0.647,65,0.744,66,0.744,67,0.744,68,1.179,69,1.179,70,0.647,71,1.098,72,0.647,73,0.744,74,0.647,75,1.281,76,0.744,77,0.744,78,1.763,79,0.647,80,0.565,81,0.647,82,0.744,83,0.744,84,0.647,85,0.647,86,1.851,87,1.851,88,1.094,89,1.266,90,1.581,91,2.025,92,1.026,93,1.538,94,2.552,95,2.025,96,0.744,97,0.744,98,0.744,99,0.744,100,1.666,101,1.179,102,1.666,103,1.179,104,1.666,105,1.179,106,1.666,107,1.179,108,1.464,109,1.464,110,2.26,111,1.026,112,1.112,113,1.932,114,2.102,115,1.932,116,0.744,117,0.744,118,1.179,119,1.932,120,1.179,121,0.744,122,0.744,123,0.744,124,0.744,125,0.744,126,0.493,127,0.744,128,1.179,129,1.179,130,1.666,131,1.275,132,0.647,133,1.275,134,1.179,135,1.179,136,1.179,137,1.179,138,0.744,139,0.744,140,0.744,141,0.744,142,0.744,143,0.744,144,0.744,145,0.744,146,0.744,147,0.744,148,1.247,149,1.026,150,1.026,151,1.026,152,1.026,153,1.026,154,1.026,155,1.275,156,0.647,157,0.647,158,0.87,159,0.647,160,0.647,161,0.647,162,0.565,163,0.565,164,0.647,165,0.895,166,0.744,167,0.744,168,0.744,169,0.744,170,0.744,171,0.744,172,1.581,173,1.682,174,1.682,175,1.179,176,0.744,177,0.744,178,0.744,179,0.744,180,1.275,181,0.565,182,1.026,183,0.895,184,1.026,185,1.026,186,0.744,187,0.647,188,0.565,189,1.026,190,0.565,191,0.647,192,0.895,193,0.493,194,0.781,195,0.744,196,0.505,197,0.429,198,0.647,199,1.666,200,0.647,201,0.647,202,1.581,203,1.275,204,0.744,205,1.464,206,0.647,207,0.744,208,1.45,209,1.275,210,0.647,211,0.647,212,1.026,213,0.744,214,0.744,215,1.026,216,1.026,217,0.895,218,0.565,219,0.647,220,0.647,221,0.744,222,0.744,223,0.744,224,1.026,225,0.647,226,1.581,227,0.744,228,0.647,229,1.464,230,0.647,231,0.744,232,0.744,233,0.647,234,0.647,235,0.744,236,0.493,237,0.647,238,0.744,239,0.744,240,0.97,241,1.718,242,0.565,243,0.744,244,0.744,245,1.763,246,2.1,247,1.275,248,1.682,249,1.112,250,1.763,251,1.682,252,0.647,253,0.647,254,0.744,255,0.744,256,1.45,257,0.744,258,1.38,259,0.744,260,0.744,261,0.647,262,1.683,263,0.744,264,0.744,265,0.744,266,0.744,267,2.163,268,2.216,269,1.179,270,0.647,271,1.179,272,0.744,273,0.744,274,0.647,275,1.026,276,1.179,277,0.744,278,0.647,279,0.744,280,0.744,281,1.179,282,0.744,283,0.744,284,0.744,285,0.744,286,0.744,287,1.179,288,0.744,289,0.744,290,1.179,291,1.464,292,2.415,293,0.744,294,1.179,295,1.179,296,0.744,297,1.179,298,0.744,299,1.026,300,0.744,301,0.744,302,0.744,303,0.744,304,0.744,305,0.744,306,1.464,307,2.025,308,1.179,309,0.744,310,1.816,311,1.179,312,0.744,313,1.179,314,0.744,315,1.816,316,1.179,317,0.744,318,1.179,319,1.179,320,0.744,321,0.744,322,0.744,323,0.744,324,0.744,325,1.464,326,1.666,327,0.744,328,0.744,329,0.744,330,0.744,331,0.744,332,0.744,333,0.744,334,0.744,335,0.744,336,0.744,337,0.744,338,0.744,339,0.744,340,0.744,341,1.666,342,1.666,343,1.179,344,0.744,345,1.179,346,1.026,347,0.744,348,2.261,349,0.744,350,0.744,351,0.744,352,0.744,353,0.744,354,1.464,355,0.744,356,1.464,357,0.744,358,0.744,359,0.744,360,0.744,361,1.179,362,1.538,363,1.179,364,1.464,365,0.744,366,0.744,367,0.744,368,0.744,369,0.744,370,0.565,371,0.744,372,0.744,373,0.744,374,0.744,375,0.744,376,0.744,377,1.179,378,0.744,379,0.744,380,0.744,381,0.647,382,0.744,383,0.744,384,0.744,385,0.744,386,0.647,387,0.744,388,0.493,389,0.647,390,0.744,391,0.744,392,2.1,393,0.744,394,0.744,395,0.744,396,0.744,397,0.647,398,0.744,399,1.112,400,1.026,401,0.744,402,0.744,403,0.744,404,0.744,405,0.744,406,1.179,407,0.744,408,0.744,409,1.464,410,0.647,411,0.744,412,1.464,413,1.464,414,1.464,415,2.025,416,2.025,417,1.275,418,1.275,419,0.744,420,0.647,421,0.647,422,1.464,423,0.744,424,1.464,425,1.464,426,0.647,427,0.744,428,0.744,429,0.744,430,1.464,431,1.464,432,1.464,433,0.744,434,1.026,435,1.026,436,0.744]],["title/interfaces/Edges.html",[0,0.343,71,0.591]],["body/interfaces/Edges.html",[0,0.482,2,1.282,3,0.965,4,0.829,5,0.829,6,0.838,7,0.454,10,1.684,15,0.704,16,1.148,17,1.466,18,2.683,20,1.466,21,1.466,24,1.466,26,3.115,27,3.107,28,1.148,29,1.372,30,0.055,31,1.525,32,1.934,34,1.09,35,0.704,36,0.045,37,0.045,71,1.053,88,0.829,158,0.704,208,2.393,437,3.88,438,3.88,439,3.88]],["title/interfaces/PointerEventCoordinate.html",[0,0.343,85,1.2]],["body/interfaces/PointerEventCoordinate.html",[0,0.364,1,1.179,2,0.491,3,0.37,4,0.317,5,0.317,6,0.27,7,0.232,12,0.958,13,0.677,14,0.702,15,0.27,16,0.586,17,0.842,19,1.102,20,1.112,21,0.958,22,1.023,23,1.023,24,1.045,25,1.102,28,1.127,29,1.225,30,0.055,31,1.102,34,0.626,35,0.532,36,0.023,37,0.023,38,1.76,39,0.563,40,1.46,41,1.46,42,1.078,43,0.504,44,1.447,45,1.263,46,1.023,47,1.447,48,1.593,49,1.662,50,1.023,51,1.447,52,0.74,53,0.74,54,0.427,55,0.74,56,0.74,57,1.377,58,1.926,59,2.021,60,1.109,61,0.563,62,1.662,63,0.74,64,0.645,65,0.74,66,0.74,67,0.74,68,1.175,69,1.175,70,0.645,71,1.098,72,0.645,73,0.74,74,0.645,75,1.278,76,0.74,77,0.74,78,1.76,79,0.645,80,0.563,81,0.645,82,0.74,83,0.74,84,0.645,85,1.023,86,1.89,87,1.89,88,1.105,89,1.465,90,1.76,91,2.021,92,1.023,93,1.536,94,2.551,95,2.021,96,0.74,97,0.74,98,0.74,99,0.74,100,1.662,101,1.175,102,1.662,103,1.175,104,1.662,105,1.175,106,1.662,107,1.175,108,1.46,109,1.46,110,2.259,111,1.023,112,1.109,113,1.929,114,2.1,115,1.929,116,0.74,117,0.74,118,1.175,119,1.929,120,1.175,121,0.74,122,0.74,123,0.74,124,0.74,125,0.74,126,0.491,127,0.74,128,1.175,129,1.175,130,1.662,131,1.271,132,0.645,133,1.271,134,1.175,135,1.175,136,1.175,137,1.175,138,0.74,139,0.74,140,0.74,141,0.74,142,0.74,143,0.74,144,0.74,145,0.74,146,0.74,147,0.74,148,1.245,149,1.023,150,1.023,151,1.023,152,1.023,153,1.023,154,1.023,155,1.271,156,0.645,157,0.645,158,0.87,159,0.645,160,0.645,161,0.645,162,0.563,163,0.563,164,0.645,165,0.892,166,0.74,167,0.74,168,0.74,169,0.74,170,0.74,171,0.74,172,1.578,173,1.679,174,1.679,175,1.175,176,0.74,177,0.74,178,0.74,179,0.74,180,1.271,181,0.563,182,1.023,183,0.892,184,1.023,185,1.023,186,0.74,187,0.645,188,0.563,189,1.023,190,0.563,191,0.645,192,0.892,193,0.491,194,0.779,195,0.74,196,0.504,197,0.427,198,0.645,199,1.662,200,0.645,201,0.645,202,1.578,203,1.271,204,0.74,205,1.46,206,0.645,207,0.74,208,1.447,209,1.271,210,0.645,211,0.645,212,1.023,213,0.74,214,0.74,215,1.023,216,1.023,217,0.892,218,0.563,219,0.645,220,0.645,221,0.74,222,0.74,223,0.74,224,1.023,225,0.645,226,1.578,227,0.74,228,0.645,229,1.46,230,0.645,231,0.74,232,0.74,233,0.645,234,0.645,235,0.74,236,0.491,237,0.645,238,0.74,239,0.74,240,0.968,241,1.716,242,0.563,243,0.74,244,0.74,245,1.76,246,2.097,247,1.271,248,1.679,249,1.109,250,1.76,251,1.679,252,0.645,253,0.645,254,0.74,255,0.74,256,1.447,257,0.74,258,1.377,259,0.74,260,0.74,261,0.645,262,1.681,263,0.74,264,0.74,265,0.74,266,0.74,267,2.16,268,2.213,269,1.175,270,0.645,271,1.175,272,0.74,273,0.74,274,0.645,275,1.023,276,1.175,277,0.74,278,0.645,279,0.74,280,0.74,281,1.175,282,0.74,283,0.74,284,0.74,285,0.74,286,0.74,287,1.175,288,0.74,289,0.74,290,1.175,291,1.46,292,2.413,293,0.74,294,1.175,295,1.175,296,0.74,297,1.175,298,0.74,299,1.023,300,0.74,301,0.74,302,0.74,303,0.74,304,0.74,305,0.74,306,1.46,307,2.021,308,1.175,309,0.74,310,1.812,311,1.175,312,0.74,313,1.175,314,0.74,315,1.812,316,1.175,317,0.74,318,1.175,319,1.175,320,0.74,321,0.74,322,0.74,323,0.74,324,0.74,325,1.46,326,1.662,327,0.74,328,0.74,329,0.74,330,0.74,331,0.74,332,0.74,333,0.74,334,0.74,335,0.74,336,0.74,337,0.74,338,0.74,339,0.74,340,0.74,341,1.662,342,1.662,343,1.175,344,0.74,345,1.175,346,1.023,347,0.74,348,2.258,349,0.74,350,0.74,351,0.74,352,0.74,353,0.74,354,1.46,355,0.74,356,1.46,357,0.74,358,0.74,359,0.74,360,0.74,361,1.175,362,1.536,363,1.175,364,1.46,365,0.74,366,0.74,367,0.74,368,0.74,369,0.74,370,0.563,371,0.74,372,0.74,373,0.74,374,0.74,375,0.74,376,0.74,377,1.175,378,0.74,379,0.74,380,0.74,381,0.645,382,0.74,383,0.74,384,0.74,385,0.74,386,0.645,387,0.74,388,0.491,389,0.645,390,0.74,391,0.74,392,2.097,393,0.74,394,0.74,395,0.74,396,0.74,397,0.645,398,0.74,399,1.109,400,1.023,401,0.74,402,0.74,403,0.74,404,0.74,405,0.74,406,1.175,407,0.74,408,0.74,409,1.46,410,0.645,411,0.74,412,1.46,413,1.46,414,1.46,415,2.021,416,2.021,417,1.271,418,1.271,419,0.74,420,0.645,421,0.645,422,1.46,423,0.74,424,1.46,425,1.46,426,0.645,427,0.74,428,0.74,429,0.74,430,1.46,431,1.46,432,1.46,433,0.74,434,1.023,435,1.023,436,0.74]],["title/classes/PointerEventListeners.html",[196,0.591,251,1.2]],["body/classes/PointerEventListeners.html",[0,0.359,1,1.173,3,0.362,4,0.311,5,0.311,6,0.696,7,0.396,12,0.948,13,0.667,14,0.696,15,0.264,16,0.577,17,0.831,18,1.156,19,1.089,20,1.103,21,0.948,22,1.007,23,1.007,24,1.035,25,1.089,28,1.121,29,1.173,30,0.055,31,1.089,32,1.795,34,0.769,35,0.525,36,0.023,37,0.023,38,1.746,39,0.552,40,1.441,41,1.441,42,1.071,43,0.496,44,1.813,45,1.249,46,1.007,47,1.431,48,1.582,49,1.643,50,1.007,51,1.813,52,0.726,53,0.726,54,0.419,55,0.726,56,0.726,57,1.364,58,2.02,59,2.006,60,1.095,61,0.552,62,1.643,63,0.726,64,0.632,65,0.726,66,0.726,67,0.726,68,1.156,69,1.156,70,0.632,71,1.095,72,0.632,73,0.726,74,0.632,75,1.267,76,0.726,77,0.726,78,1.746,79,0.632,80,0.552,81,0.632,82,0.726,83,0.726,84,0.632,85,0.632,86,1.842,87,1.842,88,1.09,89,1.249,90,1.562,91,2.006,92,1.007,93,1.524,94,2.544,95,2.006,96,0.726,97,0.726,98,0.726,99,0.726,100,1.643,101,1.156,102,1.643,103,1.156,104,1.643,105,1.156,106,1.643,107,1.156,108,1.441,109,1.441,110,2.254,111,1.007,112,1.095,113,1.912,114,2.092,115,1.912,116,0.726,117,0.726,118,1.156,119,1.912,120,1.156,121,0.726,122,0.726,123,0.726,124,0.726,125,0.726,126,0.481,127,0.726,128,1.156,129,1.156,130,1.643,131,1.255,132,0.632,133,1.255,134,1.156,135,1.156,136,1.156,137,1.156,138,0.726,139,0.726,140,0.726,141,0.726,142,0.726,143,0.726,144,0.726,145,0.726,146,0.726,147,0.726,148,1.237,149,1.007,150,1.007,151,1.007,152,1.007,153,1.007,154,1.007,155,1.255,156,0.632,157,0.632,158,0.866,159,0.632,160,0.632,161,0.632,162,0.552,163,0.552,164,0.632,165,0.878,166,0.726,167,0.726,168,0.726,169,0.726,170,0.726,171,0.726,172,1.562,173,1.665,174,1.665,175,1.156,176,0.726,177,0.726,178,0.726,179,0.726,180,1.255,181,0.552,182,1.007,183,0.878,184,1.007,185,1.007,186,0.726,187,0.632,188,0.552,189,1.007,190,0.552,191,0.632,192,0.878,193,0.481,194,0.766,195,0.726,196,0.496,197,0.419,198,0.632,199,1.643,200,0.632,201,0.632,202,1.562,203,1.255,204,0.726,205,1.441,206,0.632,207,0.726,208,1.431,209,1.255,210,0.632,211,0.632,212,1.007,213,0.726,214,0.726,215,1.007,216,1.007,217,0.878,218,0.552,219,0.632,220,0.632,221,0.726,222,0.726,223,0.726,224,1.007,225,0.632,226,1.562,227,0.726,228,0.632,229,1.441,230,0.632,231,0.726,232,0.726,233,0.632,234,0.632,235,0.726,236,0.481,237,0.632,238,0.726,239,0.726,240,0.955,241,1.706,242,0.552,243,0.726,244,0.726,245,1.746,246,2.351,247,1.255,248,1.665,249,1.095,250,1.746,251,1.813,252,0.632,253,1.007,254,0.726,255,0.726,256,1.665,257,0.726,258,1.63,259,0.726,260,0.726,261,0.632,262,1.671,263,0.726,264,0.726,265,0.726,266,0.726,267,2.146,268,2.2,269,1.156,270,0.632,271,1.156,272,0.726,273,0.726,274,0.632,275,1.007,276,1.156,277,0.726,278,0.632,279,0.726,280,0.726,281,1.156,282,0.726,283,0.726,284,0.726,285,0.726,286,0.726,287,1.156,288,0.726,289,0.726,290,1.156,291,1.441,292,2.403,293,0.726,294,1.156,295,1.156,296,0.726,297,1.156,298,0.726,299,1.007,300,0.726,301,0.726,302,0.726,303,0.726,304,0.726,305,0.726,306,1.441,307,2.006,308,1.156,309,0.726,310,1.795,311,1.156,312,0.726,313,1.156,314,0.726,315,1.795,316,1.156,317,0.726,318,1.156,319,1.156,320,0.726,321,0.726,322,0.726,323,0.726,324,0.726,325,1.441,326,1.643,327,0.726,328,0.726,329,0.726,330,0.726,331,0.726,332,0.726,333,0.726,334,0.726,335,0.726,336,0.726,337,0.726,338,0.726,339,0.726,340,0.726,341,1.643,342,1.643,343,1.156,344,0.726,345,1.156,346,1.007,347,0.726,348,2.246,349,0.726,350,0.726,351,0.726,352,0.726,353,0.726,354,1.441,355,0.726,356,1.441,357,0.726,358,0.726,359,0.726,360,0.726,361,1.156,362,1.524,363,1.156,364,1.441,365,0.726,366,0.726,367,0.726,368,0.726,369,0.726,370,0.552,371,0.726,372,0.726,373,0.726,374,0.726,375,0.726,376,0.726,377,1.156,378,0.726,379,0.726,380,0.726,381,0.632,382,0.726,383,0.726,384,0.726,385,0.726,386,0.632,387,0.726,388,0.481,389,0.632,390,0.726,391,0.726,392,2.082,393,0.726,394,0.726,395,0.726,396,0.726,397,0.632,398,0.726,399,1.364,400,1.007,401,0.726,402,0.726,403,1.441,404,1.441,405,1.441,406,1.643,407,0.726,408,1.441,409,1.441,410,1.007,411,0.726,412,1.441,413,1.441,414,1.441,415,2.006,416,2.006,417,1.255,418,1.255,419,0.726,420,0.632,421,0.632,422,1.441,423,0.726,424,1.441,425,1.441,426,0.632,427,0.726,428,0.726,429,0.726,430,1.441,431,1.441,432,1.441,433,0.726,434,1.007,435,1.007,436,0.726,440,1.169,441,2.32,442,1.456,443,1.561,444,1.456,445,1.456,446,1.456,447,1.456,448,1.456,449,1.169]],["title/directives/ResizableDirective.html",[43,0.591,197,0.795]],["body/directives/ResizableDirective.html",[0,0.346,1,1.159,3,0.343,4,0.295,5,0.295,6,0.805,7,0.452,10,0.599,12,0.919,13,0.919,14,0.788,15,0.251,17,0.802,19,1.057,20,1.132,21,1.008,22,0.965,23,0.965,24,1.008,25,1.057,28,1.104,29,1.173,30,0.055,31,1.057,32,2.164,34,0.927,35,0.506,36,0.022,37,0.022,38,1.709,39,0.523,40,1.391,41,1.391,42,1.052,43,0.475,44,1.388,45,1.211,46,1.211,47,1.388,48,1.551,49,1.963,50,1.211,51,1.388,52,0.688,53,0.688,54,0.397,55,0.688,56,0.688,57,1.328,58,1.884,59,1.963,60,1.057,61,0.523,62,1.594,63,0.688,64,0.599,65,0.688,66,0.688,67,0.688,68,1.108,69,1.108,70,0.599,71,1.095,72,0.599,73,0.688,74,0.599,75,1.397,76,0.688,77,0.688,78,1.709,79,0.599,80,0.523,81,0.599,82,0.688,83,0.688,84,0.599,85,0.599,86,1.823,87,1.823,88,1.112,89,1.211,90,1.521,91,2.108,92,0.965,93,1.492,94,2.524,95,1.963,96,0.688,97,0.688,98,0.688,99,0.688,100,1.594,101,1.108,102,1.594,103,1.108,104,1.594,105,1.108,106,1.594,107,1.108,108,1.391,109,1.391,110,2.246,111,0.965,112,1.328,113,1.867,114,2.068,115,1.867,116,0.688,117,0.688,118,1.108,119,1.867,120,1.391,121,0.688,122,0.688,123,0.688,124,0.688,125,0.688,126,1.301,127,0.688,128,1.108,129,1.108,130,1.594,131,1.211,132,0.599,133,1.521,134,1.108,135,1.108,136,1.108,137,1.108,138,0.688,139,0.688,140,0.688,141,0.688,142,0.688,143,0.688,144,0.688,145,0.688,146,0.688,147,0.688,148,1.299,149,0.965,150,0.965,151,0.965,152,0.965,153,0.965,154,0.965,155,1.388,156,0.599,157,0.599,158,0.905,159,0.599,160,0.599,161,0.599,162,0.523,163,0.523,164,0.599,165,1.057,166,0.688,167,0.688,168,0.688,169,0.688,170,0.688,171,0.688,172,1.521,173,1.625,174,1.625,175,1.108,176,0.688,177,0.688,178,0.688,179,0.688,180,1.211,181,0.523,182,0.965,183,1.057,184,1.211,185,1.211,186,1.108,187,0.965,188,0.842,189,0.965,190,0.842,191,0.965,192,1.211,193,0.734,194,0.922,195,0.688,196,0.475,197,0.639,198,0.965,199,2.042,200,0.965,201,0.965,202,1.709,203,1.625,204,1.108,205,1.867,206,0.965,207,1.391,208,1.625,209,1.625,210,0.965,211,0.965,212,1.521,213,1.108,214,1.108,215,1.521,216,1.521,217,1.211,218,1.057,219,0.965,220,0.965,221,1.108,222,1.108,223,1.108,224,1.388,225,1.211,226,1.884,227,1.108,228,0.965,229,1.867,230,0.965,231,1.108,232,1.391,233,0.965,234,0.965,235,1.108,236,1.353,237,1.211,238,1.108,239,1.108,240,1.238,241,1.68,242,0.842,243,1.108,244,1.108,245,1.709,246,2.042,247,1.211,248,1.625,249,1.057,250,1.709,251,1.625,252,0.599,253,0.599,254,0.688,255,0.688,256,1.388,257,0.688,258,1.328,259,0.688,260,0.688,261,0.599,262,1.644,263,0.688,264,0.688,265,0.688,266,0.688,267,2.108,268,2.164,269,1.108,270,0.599,271,1.108,272,0.688,273,0.688,274,0.599,275,0.965,276,1.108,277,0.688,278,0.599,279,0.688,280,0.688,281,1.108,282,0.688,283,0.688,284,0.688,285,0.688,286,0.688,287,1.108,288,0.688,289,0.688,290,1.108,291,1.391,292,2.376,293,0.688,294,1.108,295,1.108,296,0.688,297,1.108,298,0.688,299,0.965,300,0.688,301,0.688,302,0.688,303,0.688,304,0.688,305,0.688,306,1.391,307,1.963,308,1.108,309,0.688,310,1.747,311,1.108,312,0.688,313,1.108,314,0.688,315,1.747,316,1.108,317,0.688,318,1.108,319,1.108,320,0.688,321,0.688,322,0.688,323,0.688,324,0.688,325,1.391,326,1.594,327,0.688,328,0.688,329,0.688,330,0.688,331,0.688,332,0.688,333,0.688,334,0.688,335,0.688,336,0.688,337,0.688,338,0.688,339,0.688,340,0.688,341,1.594,342,1.594,343,1.108,344,0.688,345,1.108,346,0.965,347,0.688,348,2.211,349,0.688,350,0.688,351,0.688,352,0.688,353,0.688,354,1.391,355,0.688,356,1.391,357,0.688,358,0.688,359,0.688,360,0.688,361,1.108,362,1.492,363,1.108,364,1.391,365,0.688,366,0.688,367,0.688,368,0.688,369,0.688,370,0.523,371,0.688,372,0.688,373,0.688,374,0.688,375,0.688,376,0.688,377,1.108,378,0.688,379,0.688,380,0.688,381,0.599,382,0.688,383,0.688,384,0.688,385,0.688,386,0.599,387,0.688,388,0.456,389,0.599,390,0.688,391,0.688,392,2.042,393,0.688,394,0.688,395,0.688,396,0.688,397,0.599,398,0.688,399,1.057,400,0.965,401,0.688,402,0.688,403,0.688,404,0.688,405,0.688,406,1.108,407,0.688,408,0.688,409,1.391,410,0.599,411,0.688,412,1.391,413,1.391,414,1.391,415,1.963,416,1.963,417,1.211,418,1.211,419,0.688,420,0.599,421,0.599,422,1.391,423,0.688,424,1.391,425,1.391,426,0.599,427,0.688,428,0.688,429,0.688,430,1.391,431,1.391,432,1.391,433,0.688,434,0.965,435,0.965,436,0.688,450,0.795,451,1.108,452,1.496,453,1.785,454,1.381,455,1.381,456,1.381,457,1.381,458,1.381,459,1.381,460,1.381,461,1.381,462,1.381,463,1.381]],["title/modules/ResizableModule.html",[464,1.861,465,1.379]],["body/modules/ResizableModule.html",[3,1.034,4,0.888,5,0.888,6,0.754,7,0.409,30,0.054,35,0.754,36,0.047,37,0.047,42,1.262,54,1.195,158,0.754,196,0.888,197,1.525,465,2.396,466,2.797,467,4.156,468,3.859,469,3.055,470,4.807,471,3.859,472,3.337,473,4.156]],["title/interfaces/ResizeCursors.html",[0,0.343,148,0.795]],["body/interfaces/ResizeCursors.html",[0,0.362,1,1.177,2,0.488,3,0.367,4,0.315,5,0.315,6,0.268,7,0.231,12,0.955,13,0.674,14,0.7,15,0.268,16,0.583,17,0.838,19,1.098,20,1.109,21,0.955,22,1.017,23,1.017,24,1.042,25,1.098,28,1.261,29,1.177,30,0.055,31,1.098,34,0.824,35,0.529,36,0.023,37,0.023,38,1.755,39,0.559,40,1.454,41,1.454,42,1.076,43,0.501,44,1.442,45,1.258,46,1.017,47,1.442,48,1.589,49,1.656,50,1.017,51,1.442,52,0.736,53,0.736,54,0.424,55,0.736,56,0.736,57,1.373,58,1.923,59,2.016,60,1.105,61,0.559,62,1.656,63,0.736,64,0.64,65,0.736,66,0.736,67,0.736,68,1.169,69,1.169,70,0.64,71,1.097,72,0.64,73,0.736,74,0.64,75,1.275,76,0.736,77,0.736,78,1.755,79,0.64,80,0.559,81,0.64,82,0.736,83,0.736,84,0.64,85,0.64,86,1.847,87,1.847,88,1.092,89,1.258,90,1.573,91,2.016,92,1.017,93,1.532,94,2.549,95,2.016,96,0.736,97,0.736,98,0.736,99,0.736,100,1.656,101,1.169,102,1.656,103,1.169,104,1.656,105,1.169,106,1.656,107,1.169,108,1.454,109,1.454,110,2.257,111,1.017,112,1.105,113,1.923,114,2.098,115,1.923,116,0.736,117,0.736,118,1.169,119,1.923,120,1.169,121,0.736,122,0.736,123,0.736,124,0.736,125,0.736,126,0.488,127,0.736,128,1.169,129,1.169,130,1.656,131,1.266,132,0.64,133,1.266,134,1.169,135,1.169,136,1.169,137,1.169,138,0.736,139,0.736,140,0.736,141,0.736,142,0.736,143,0.736,144,0.736,145,0.736,146,0.736,147,0.736,148,1.273,149,1.573,150,1.573,151,1.573,152,1.573,153,1.573,154,1.573,155,1.266,156,0.64,157,0.64,158,0.868,159,0.64,160,0.64,161,0.64,162,0.559,163,0.559,164,0.64,165,0.888,166,0.736,167,0.736,168,0.736,169,0.736,170,0.736,171,0.736,172,1.573,173,1.674,174,1.674,175,1.169,176,0.736,177,0.736,178,0.736,179,0.736,180,1.266,181,0.559,182,1.017,183,0.888,184,1.017,185,1.017,186,0.736,187,0.64,188,0.559,189,1.017,190,0.559,191,0.64,192,0.888,193,0.488,194,0.775,195,0.736,196,0.501,197,0.424,198,0.64,199,1.656,200,0.64,201,0.64,202,1.573,203,1.266,204,0.736,205,1.454,206,0.64,207,0.736,208,1.442,209,1.266,210,0.64,211,0.64,212,1.017,213,0.736,214,0.736,215,1.017,216,1.017,217,0.888,218,0.559,219,0.64,220,0.64,221,0.736,222,0.736,223,0.736,224,1.017,225,0.64,226,1.573,227,0.736,228,0.64,229,1.454,230,0.64,231,0.736,232,0.736,233,0.64,234,0.64,235,0.736,236,0.488,237,0.64,238,0.736,239,0.736,240,0.964,241,1.712,242,0.559,243,0.736,244,0.736,245,1.755,246,2.092,247,1.266,248,1.674,249,1.105,250,1.755,251,1.674,252,0.64,253,0.64,254,0.736,255,0.736,256,1.442,257,0.736,258,1.373,259,0.736,260,0.736,261,0.64,262,1.678,263,0.736,264,0.736,265,0.736,266,0.736,267,2.155,268,2.208,269,1.169,270,0.64,271,1.169,272,0.736,273,0.736,274,0.64,275,1.017,276,1.169,277,0.736,278,0.64,279,0.736,280,0.736,281,1.169,282,0.736,283,0.736,284,0.736,285,0.736,286,0.736,287,1.169,288,0.736,289,0.736,290,1.169,291,1.454,292,2.409,293,0.736,294,1.169,295,1.169,296,0.736,297,1.169,298,0.736,299,1.017,300,0.736,301,0.736,302,0.736,303,0.736,304,0.736,305,0.736,306,1.454,307,2.016,308,1.169,309,0.736,310,1.807,311,1.169,312,0.736,313,1.169,314,0.736,315,1.807,316,1.169,317,0.736,318,1.169,319,1.169,320,0.736,321,0.736,322,0.736,323,0.736,324,0.736,325,1.454,326,1.656,327,0.736,328,0.736,329,0.736,330,0.736,331,0.736,332,0.736,333,0.736,334,0.736,335,0.736,336,0.736,337,0.736,338,0.736,339,0.736,340,0.736,341,1.656,342,1.656,343,1.169,344,0.736,345,1.169,346,1.017,347,0.736,348,2.254,349,0.736,350,0.736,351,0.736,352,0.736,353,0.736,354,1.454,355,0.736,356,1.454,357,0.736,358,0.736,359,0.736,360,0.736,361,1.169,362,1.532,363,1.169,364,1.454,365,0.736,366,0.736,367,0.736,368,0.736,369,0.736,370,0.559,371,0.736,372,0.736,373,0.736,374,0.736,375,0.736,376,0.736,377,1.169,378,0.736,379,0.736,380,0.736,381,0.64,382,0.736,383,0.736,384,0.736,385,0.736,386,0.64,387,0.736,388,0.488,389,0.64,390,0.736,391,0.736,392,2.092,393,0.736,394,0.736,395,0.736,396,0.736,397,0.64,398,0.736,399,1.105,400,1.017,401,0.736,402,0.736,403,0.736,404,0.736,405,0.736,406,1.169,407,0.736,408,0.736,409,1.454,410,0.64,411,0.736,412,1.454,413,1.454,414,1.454,415,2.016,416,2.016,417,1.266,418,1.266,419,0.736,420,0.64,421,0.64,422,1.454,423,0.736,424,1.454,425,1.454,426,0.64,427,0.736,428,0.736,429,0.736,430,1.454,431,1.454,432,1.454,433,0.736,434,1.017,435,1.017,436,0.736]],["title/interfaces/ResizeEvent.html",[0,0.343,75,0.914]],["body/interfaces/ResizeEvent.html",[0,0.506,1,1.289,2,1.347,3,1.014,4,0.871,5,0.871,6,0.74,7,0.401,10,1.769,11,2.744,12,1.49,15,0.74,16,1.182,30,0.054,34,1.016,35,0.74,36,0.046,37,0.046,42,1.182,71,1.16,74,1.769,75,1.57,88,1.016,158,0.863,217,1.8,240,1.57,474,4.077,475,4.077,476,3.816,477,4.077]],["title/directives/ResizeHandleDirective.html",[43,0.591,469,1.593]],["body/directives/ResizeHandleDirective.html",[3,0.719,4,0.617,5,0.617,6,0.832,7,0.47,10,1.254,14,0.933,15,0.524,18,2.145,27,1.945,28,0.954,29,1.22,30,0.055,31,0.955,32,2.145,34,0.92,35,0.524,36,0.037,37,0.037,42,1.22,43,1.019,44,1.989,45,1.736,46,1.868,48,1.736,50,1.868,51,1.989,54,0.831,57,1.452,60,1.452,61,1.094,64,1.254,70,1.254,71,1.11,72,1.254,78,1.664,79,1.254,80,1.094,81,1.254,86,1.807,87,1.857,88,0.98,89,1.63,90,1.868,110,1.664,126,0.955,158,0.832,188,1.452,189,1.664,190,1.736,191,1.664,192,1.452,193,1.267,194,1.267,196,0.617,197,1.531,198,1.664,236,0.955,240,1.267,241,1.094,245,1.664,249,1.452,250,2.254,252,1.254,253,1.664,256,1.664,258,1.63,261,1.254,262,1.948,270,1.254,346,1.254,386,1.254,397,1.254,399,1.094,410,1.254,417,1.254,418,1.664,420,1.254,421,1.254,426,1.664,434,1.254,435,1.254,443,1.945,450,1.664,451,2.32,452,2.581,469,2.209,472,2.32,476,2.32,478,4.585,479,2.89,480,3.835,481,3.681,482,3.835,483,3.079,484,3.3,485,3.079,486,3.456,487,3.456,488,2.89,489,2.89,490,3.079,491,3.835,492,2.89,493,3.835,494,3.835,495,3.079,496,3.079,497,2.89,498,2.89,499,2.89,500,2.89,501,2.89,502,2.89,503,2.89,504,2.89,505,2.89,506,2.89,507,2.89,508,2.89,509,2.89,510,3.835,511,2.89,512,3.835,513,3.835,514,3.835,515,3.835,516,3.835,517,2.89,518,2.89,519,3.835,520,3.835,521,2.89,522,2.89,523,2.89,524,4.304,525,2.89,526,2.89,527,2.89,528,2.89,529,2.89,530,2.89,531,2.89,532,2.89,533,2.89,534,2.89,535,2.89,536,2.89,537,2.89,538,2.89,539,2.89]],["title/changelog.html",[540,1.572,541,1.572,542,1.875]],["body/changelog.html",[1,0.671,2,0.584,5,0.377,7,0.509,11,1.815,12,0.94,13,0.775,14,0.926,16,0.439,17,0.508,19,0.891,20,0.508,21,0.508,24,0.508,25,0.891,30,0.039,35,0.594,36,0.026,37,0.026,42,0.814,43,0.888,47,1.711,48,0.669,58,1.17,61,1.688,71,0.699,80,1.386,84,1.17,88,0.924,89,0.669,93,0.669,112,0.669,126,0.584,148,0.508,158,0.926,165,1.021,181,0.669,183,1.386,187,1.17,188,1.021,190,1.021,192,1.493,193,0.584,194,1.209,196,0.377,197,0.508,200,1.17,201,0.766,202,1.589,203,2.153,206,1.17,209,1.17,210,0.766,211,0.766,212,2.111,215,0.766,216,0.766,217,1.795,218,1.021,219,0.766,220,0.766,224,1.934,225,0.766,226,1.804,228,0.766,230,1.17,233,1.419,234,0.766,236,1.303,237,0.766,240,0.584,241,0.669,247,0.766,248,1.17,249,1.021,258,1.021,274,1.419,275,0.766,278,1.17,299,1.419,362,1.765,370,0.669,388,1.734,389,1.17,400,1.876,440,1.418,450,1.884,452,1.815,453,2.626,465,0.88,469,1.017,481,1.418,483,2.939,484,2.464,485,2.626,486,1.418,487,3.165,490,2.165,495,2.626,496,1.418,542,1.418,543,1.766,544,4.807,545,1.766,546,1.766,547,1.766,548,2.165,549,1.766,550,1.766,551,1.418,552,1.766,553,4.458,554,4.569,555,4.739,556,3.271,557,4.324,558,4.045,559,3.579,560,3.339,561,3,562,3.661,563,4.156,564,1.766,565,1.766,566,3.661,567,4.569,568,4.661,569,5.128,570,1.418,571,1.766,572,1.766,573,2.697,574,1.766,575,1.766,576,1.766,577,2.697,578,2.697,579,1.766,580,2.697,581,1.766,582,4.156,583,2.697,584,1.766,585,3.271,586,1.766,587,1.766,588,5.358,589,5.358,590,1.418,591,1.766,592,2.697,593,1.766,594,1.766,595,1.766,596,1.766,597,5.338,598,1.766,599,1.766,600,4.569,601,1.766,602,1.766,603,4.156,604,4.156,605,1.766,606,1.766,607,1.766,608,1.766,609,1.766,610,3.943,611,3.661,612,3.271,613,1.766,614,1.766,615,1.766,616,1.766,617,3.943,618,3.271,619,1.766,620,2.697,621,3.661,622,1.766,623,1.766,624,4.324,625,3.271,626,1.418,627,2.939,628,1.766,629,1.766,630,1.766,631,1.766,632,1.418,633,1.766,634,3.661,635,2.697,636,1.766,637,1.766,638,1.766,639,3.661,640,2.697,641,2.939,642,3.661,643,1.766,644,1.766,645,1.766,646,1.766,647,3.271,648,1.766,649,1.766,650,1.766,651,1.766,652,3.943,653,1.766,654,2.697,655,1.766,656,1.766,657,1.766,658,2.697,659,1.766,660,1.766,661,1.766,662,1.418,663,1.766,664,3.943,665,1.766,666,1.766,667,1.766,668,3.943,669,1.766,670,1.766,671,1.766,672,1.766,673,2.697,674,2.165,675,1.766,676,1.766,677,4.324,678,3.271,679,1.766,680,1.766,681,1.766,682,1.766,683,2.697,684,1.766,685,1.766,686,2.697,687,2.697,688,1.766,689,1.766,690,4.156,691,1.766,692,1.766,693,5.128,694,3.271,695,1.766,696,1.766,697,3.661,698,1.766,699,1.766,700,3.271,701,1.766,702,1.766,703,1.766,704,1.766,705,1.766,706,1.766,707,1.766,708,1.766,709,1.766,710,3.661,711,1.766,712,1.766,713,1.766,714,3.943,715,3.271,716,2.697,717,2.697,718,3.661,719,2.697,720,2.697,721,1.766,722,1.766,723,2.697,724,3.661,725,1.766,726,1.766,727,1.766,728,3.943,729,1.766,730,2.697,731,1.766,732,1.766,733,1.766,734,1.766,735,1.766,736,1.766,737,1.766,738,1.766,739,1.766,740,1.766,741,1.766,742,1.766,743,2.697,744,1.766,745,1.766,746,1.766,747,1.766,748,1.766,749,2.697,750,1.766,751,1.766,752,1.766,753,2.697,754,1.766,755,1.766,756,1.766,757,1.766,758,2.165,759,1.766,760,1.766,761,1.766,762,1.766,763,3.271,764,1.766,765,1.766,766,1.766,767,1.766,768,1.418,769,1.766,770,1.766,771,1.766,772,1.766,773,1.766,774,2.697,775,3.271,776,1.766,777,1.766,778,1.766,779,1.766,780,1.766,781,1.766,782,1.766,783,1.766,784,1.766,785,2.697,786,1.766,787,1.766,788,2.697,789,1.766,790,1.766,791,2.697,792,1.766,793,1.766,794,1.766,795,1.418,796,2.697,797,1.766,798,2.697,799,1.766,800,1.766,801,1.766,802,1.766,803,1.766,804,1.766,805,1.766,806,1.766,807,1.766,808,1.766,809,1.766,810,1.766,811,1.766,812,1.766,813,1.766,814,1.766,815,1.766,816,2.697,817,1.766,818,1.766,819,1.766,820,2.697,821,1.766,822,1.766,823,1.766,824,3.271,825,1.766,826,1.766,827,1.766,828,1.766,829,1.766,830,1.766,831,1.766,832,1.766,833,1.766,834,4.045,835,2.697,836,1.418,837,1.766,838,1.766,839,1.766,840,1.766,841,1.766,842,1.766,843,1.766,844,1.766,845,2.697,846,1.766,847,1.766,848,3.271,849,1.766,850,1.766,851,1.766,852,1.766,853,1.766,854,2.697,855,1.766,856,1.766,857,1.766,858,1.766,859,3.661,860,1.418,861,1.766,862,1.766,863,1.766,864,4.156,865,1.766,866,1.766,867,1.766,868,1.766,869,1.766,870,1.766,871,1.766,872,1.766,873,1.766,874,1.766,875,3.943,876,1.766,877,1.418,878,1.766,879,1.766,880,1.418,881,2.697,882,1.766,883,1.766,884,1.766,885,1.766,886,1.766,887,3.943,888,1.766,889,1.766,890,1.766,891,3.271,892,1.766,893,1.766,894,1.766,895,1.766,896,1.766,897,1.766,898,1.418,899,1.766,900,1.766,901,1.766,902,1.766,903,1.766,904,1.766,905,1.766,906,1.766,907,1.766,908,1.766,909,1.766,910,4.156,911,1.766,912,2.626,913,1.418,914,2.697,915,1.766,916,2.697,917,1.766,918,3.271,919,1.766,920,1.766,921,1.766,922,1.766,923,1.766,924,1.766,925,1.766,926,1.766,927,1.766,928,3.271,929,1.766,930,2.697,931,2.697,932,1.766,933,1.766,934,1.766,935,1.766,936,1.766,937,1.766,938,1.766,939,1.766,940,1.766,941,1.766,942,1.766,943,1.766,944,1.766,945,2.697,946,1.766,947,1.766,948,1.766,949,1.766,950,2.697,951,1.766,952,1.766,953,1.766,954,1.766,955,1.766,956,1.766,957,2.697,958,1.766,959,1.766,960,1.766,961,1.766,962,1.766,963,1.766,964,1.766,965,1.766,966,1.766,967,1.766,968,1.766,969,1.766,970,1.766,971,1.766,972,1.766,973,1.766,974,2.165,975,1.766,976,1.766,977,1.766,978,1.766,979,1.766,980,1.766,981,1.766,982,1.766,983,1.766,984,1.766,985,1.766,986,1.766,987,1.766,988,2.697,989,1.766,990,1.766,991,3.271,992,1.766,993,1.766,994,1.766,995,1.766,996,1.766,997,1.766,998,1.766,999,1.766,1000,1.766,1001,1.766,1002,1.766,1003,1.766,1004,1.766,1005,1.766,1006,1.766,1007,1.766,1008,1.766,1009,1.766,1010,1.766,1011,1.766,1012,1.766,1013,1.766,1014,1.766,1015,1.766,1016,1.766,1017,1.766,1018,1.766,1019,1.766]],["title/dependencies.html",[561,1.572,1020,2.229]],["body/dependencies.html",[30,0.05,36,0.048,37,0.048,54,1.244,641,3.476,1020,2.913,1021,4.329]],["title/miscellaneous/functions.html",[1022,1.345,1023,2.66]],["body/miscellaneous/functions.html",[1,1.342,6,0.713,7,0.387,14,0.713,15,0.713,18,2.553,28,1.233,29,1.274,30,0.053,34,1.094,36,0.045,37,0.045,39,1.489,45,1.762,71,1.173,86,1.762,87,1.762,92,2.019,93,1.489,111,2.019,112,1.762,148,1.337,164,1.706,165,1.762,172,2.019,173,2.019,174,2.019,381,1.706,399,1.94,443,3.447,449,4.113,1022,2.264,1023,3.156,1024,4.113,1025,4.653,1026,3.932,1027,3.932]],["title/index.html",[15,0.424,540,1.572,541,1.572]],["body/index.html",[4,0.902,7,0.502,12,0.964,13,1.213,14,0.907,17,1.328,19,1.527,20,1.328,21,1.328,24,1.394,25,1.527,30,0.055,35,0.608,36,0.041,37,0.041,42,1.207,43,0.716,54,1.213,75,1.395,88,0.716,114,2.105,133,1.832,158,0.966,162,1.27,163,1.27,193,1.108,194,1.108,196,0.902,218,1.27,242,1.27,262,1.27,362,1.599,370,1.75,388,1.651,464,2.256,465,2.104,468,2.692,471,3.389,484,3.526,558,2.692,559,2.692,560,2.841,632,3.389,662,2.692,674,3.389,758,2.692,768,3.389,795,4.097,836,3.71,877,2.692,898,2.692,912,3.71,913,3.389,974,2.692,1020,2.256,1028,4.222,1029,3.353,1030,3.353,1031,4.222,1032,3.71,1033,4.85,1034,1.931,1035,2.692,1036,2.692,1037,4.999,1038,3.353,1039,5.24,1040,3.353,1041,3.353,1042,3.353,1043,3.353,1044,3.353,1045,3.353,1046,3.353,1047,4.222,1048,3.353,1049,3.353,1050,3.353,1051,3.353,1052,3.353,1053,4.222,1054,3.353,1055,4.222,1056,3.353,1057,3.353,1058,4.222,1059,3.353,1060,4.222,1061,3.353,1062,3.353,1063,4.222,1064,4.621,1065,3.353,1066,3.353,1067,3.353,1068,3.353,1069,3.353,1070,3.353,1071,3.353,1072,3.353,1073,3.353,1074,3.353,1075,3.353,1076,3.353,1077,3.353,1078,3.353,1079,3.353,1080,3.353,1081,3.353,1082,3.353,1083,3.353,1084,3.353,1085,3.353,1086,4.222,1087,3.353,1088,3.353,1089,3.353,1090,4.621,1091,3.353,1092,3.353,1093,3.353,1094,3.353,1095,3.353,1096,3.353,1097,3.353,1098,2.256]],["title/license.html",[540,1.572,541,1.572,1034,1.345]],["body/license.html",[30,0.046,36,0.046,37,0.046,57,1.49,60,1.49,88,0.841,560,3.133,570,3.16,590,3.738,626,3.16,834,3.16,880,3.16,1032,3.16,1034,2.266,1098,3.133,1099,4.958,1100,3.936,1101,3.16,1102,3.16,1103,4.656,1104,3.936,1105,3.936,1106,3.936,1107,3.936,1108,3.936,1109,3.936,1110,5.428,1111,3.936,1112,3.936,1113,4.958,1114,3.936,1115,4.656,1116,3.936,1117,3.936,1118,3.936,1119,3.936,1120,3.936,1121,3.936,1122,3.936,1123,4.656,1124,3.936,1125,3.936,1126,3.936,1127,3.936,1128,3.936,1129,4.656,1130,4.656,1131,3.936,1132,3.936,1133,3.936,1134,3.936,1135,3.936,1136,3.936,1137,3.936,1138,3.936,1139,3.936,1140,3.936,1141,3.936,1142,3.936,1143,3.936,1144,3.936,1145,3.936,1146,3.936,1147,3.936,1148,3.936,1149,3.936,1150,3.936,1151,3.936,1152,3.936,1153,3.936,1154,3.936,1155,3.936,1156,3.936,1157,3.936,1158,3.936,1159,3.936,1160,3.936]],["title/modules.html",[466,2.506]],["body/modules.html",[30,0.048,36,0.048,37,0.048,465,2.163,466,2.92,1161,4.339]],["title/overview.html",[1162,2.99]],["body/overview.html",[2,1.424,30,0.048,36,0.048,37,0.048,131,2.13,132,1.87,196,0.921,450,2.482,464,2.9,627,3.46,1162,3.46]],["title/properties.html",[16,0.824,561,1.572]],["body/properties.html",[7,0.514,10,1.807,13,1.197,14,0.756,16,1.036,30,0.054,36,0.047,37,0.047,43,0.89,242,1.577,388,1.59,548,3.344,551,3.344,860,3.344,1034,2.399,1035,3.344,1036,3.344,1098,2.803,1101,3.344,1102,3.344,1163,4.165,1164,4.165,1165,4.813,1166,4.165,1167,4.165,1168,4.165,1169,4.165,1170,4.165,1171,4.165,1172,4.165]],["title/miscellaneous/variables.html",[1022,1.345,1173,2.66]],["body/miscellaneous/variables.html",[6,0.734,7,0.398,14,0.734,15,0.734,28,1.177,29,1.006,30,0.054,34,1.104,36,0.046,37,0.046,39,1.531,126,1.708,148,1.162,149,1.754,150,1.754,151,1.754,152,1.754,153,1.754,154,1.754,155,2.052,156,1.754,157,1.754,158,0.984,159,1.754,160,1.754,161,1.754,162,1.531,163,1.531,180,2.052,181,1.531,182,2.052,183,1.531,184,2.052,185,1.754,236,1.708,1022,2.328,1024,4.15,1173,3.246]]],"invertedIndex":[["",{"_index":30,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":114,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"index.html":{}}}],["0.0.1",{"_index":995,"title":{},"body":{"changelog.html":{}}}],["0.0.2",{"_index":990,"title":{},"body":{"changelog.html":{}}}],["0.0.3",{"_index":987,"title":{},"body":{"changelog.html":{}}}],["0.1.0",{"_index":929,"title":{},"body":{"changelog.html":{}}}],["0.2.0",{"_index":921,"title":{},"body":{"changelog.html":{}}}],["0.2.1",{"_index":917,"title":{},"body":{"changelog.html":{}}}],["0.3.0",{"_index":901,"title":{},"body":{"changelog.html":{}}}],["0.3.1",{"_index":896,"title":{},"body":{"changelog.html":{}}}],["0.3.2",{"_index":893,"title":{},"body":{"changelog.html":{}}}],["0.3.3",{"_index":886,"title":{},"body":{"changelog.html":{}}}],["0.4.0",{"_index":874,"title":{},"body":{"changelog.html":{}}}],["0.4.1",{"_index":868,"title":{},"body":{"changelog.html":{}}}],["0.5.0",{"_index":850,"title":{},"body":{"changelog.html":{}}}],["0.5.1",{"_index":847,"title":{},"body":{"changelog.html":{}}}],["0.5.2",{"_index":844,"title":{},"body":{"changelog.html":{}}}],["0.5.3",{"_index":838,"title":{},"body":{"changelog.html":{}}}],["0.5.4",{"_index":833,"title":{},"body":{"changelog.html":{}}}],["0.5.5",{"_index":827,"title":{},"body":{"changelog.html":{}}}],["0.5.6",{"_index":823,"title":{},"body":{"changelog.html":{}}}],["0.5.7",{"_index":819,"title":{},"body":{"changelog.html":{}}}],["0.6.0",{"_index":815,"title":{},"body":{"changelog.html":{}}}],["0.6.1",{"_index":812,"title":{},"body":{"changelog.html":{}}}],["0.7.0",{"_index":801,"title":{},"body":{"changelog.html":{}}}],["0.7.2",{"_index":790,"title":{},"body":{"changelog.html":{}}}],["0.8.0",{"_index":784,"title":{},"body":{"changelog.html":{}}}],["0.8.1",{"_index":779,"title":{},"body":{"changelog.html":{}}}],["01",{"_index":634,"title":{},"body":{"changelog.html":{}}}],["02",{"_index":554,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":677,"title":{},"body":{"changelog.html":{}}}],["032ea5a",{"_index":1006,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":791,"title":{},"body":{"changelog.html":{}}}],["0440bbd",{"_index":696,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":624,"title":{},"body":{"changelog.html":{}}}],["053fb0e",{"_index":1000,"title":{},"body":{"changelog.html":{}}}],["05f7f7e",{"_index":780,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":600,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":617,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":553,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":690,"title":{},"body":{"changelog.html":{}}}],["0959a12",{"_index":1009,"title":{},"body":{"changelog.html":{}}}],["0a5bf11",{"_index":920,"title":{},"body":{"changelog.html":{}}}],["0ab7d40",{"_index":821,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":131,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"overview.html":{}}}],["1.0.0",{"_index":773,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":771,"title":{},"body":{"changelog.html":{}}}],["1.1.1",{"_index":767,"title":{},"body":{"changelog.html":{}}}],["1.1.2",{"_index":761,"title":{},"body":{"changelog.html":{}}}],["1.2.0",{"_index":757,"title":{},"body":{"changelog.html":{}}}],["1.2.1",{"_index":752,"title":{},"body":{"changelog.html":{}}}],["1.2.2",{"_index":746,"title":{},"body":{"changelog.html":{}}}],["1.2.3",{"_index":741,"title":{},"body":{"changelog.html":{}}}],["1.2.4",{"_index":739,"title":{},"body":{"changelog.html":{}}}],["1.2.5",{"_index":729,"title":{},"body":{"changelog.html":{}}}],["10",{"_index":224,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["100",{"_index":632,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["10051cd",{"_index":760,"title":{},"body":{"changelog.html":{}}}],["106",{"_index":636,"title":{},"body":{"changelog.html":{}}}],["10px",{"_index":223,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["11",{"_index":568,"title":{},"body":{"changelog.html":{}}}],["1185f3a",{"_index":666,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":567,"title":{},"body":{"changelog.html":{}}}],["121621",{"_index":1058,"title":{},"body":{"index.html":{}}}],["125",{"_index":598,"title":{},"body":{"changelog.html":{}}}],["126",{"_index":607,"title":{},"body":{"changelog.html":{}}}],["129",{"_index":593,"title":{},"body":{"changelog.html":{}}}],["13",{"_index":887,"title":{},"body":{"changelog.html":{}}}],["14",{"_index":556,"title":{},"body":{"changelog.html":{}}}],["14.0",{"_index":1035,"title":{},"body":{"index.html":{},"properties.html":{}}}],["14.0.0",{"_index":1021,"title":{},"body":{"dependencies.html":{}}}],["149c1a4",{"_index":932,"title":{},"body":{"changelog.html":{}}}],["15",{"_index":918,"title":{},"body":{"changelog.html":{}}}],["150px",{"_index":1051,"title":{},"body":{"index.html":{}}}],["16",{"_index":785,"title":{},"body":{"changelog.html":{}}}],["180ab35",{"_index":564,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":686,"title":{},"body":{"changelog.html":{}}}],["1af705a",{"_index":965,"title":{},"body":{"changelog.html":{}}}],["1d15bb4",{"_index":765,"title":{},"body":{"changelog.html":{}}}],["1px",{"_index":1057,"title":{},"body":{"index.html":{}}}],["2",{"_index":132,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"overview.html":{}}}],["2.0.0",{"_index":692,"title":{},"body":{"changelog.html":{}}}],["20",{"_index":863,"title":{},"body":{"changelog.html":{}}}],["200px",{"_index":1042,"title":{},"body":{"index.html":{}}}],["2016",{"_index":834,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2017",{"_index":693,"title":{},"body":{"changelog.html":{}}}],["2018",{"_index":668,"title":{},"body":{"changelog.html":{}}}],["2019",{"_index":639,"title":{},"body":{"changelog.html":{}}}],["2020",{"_index":610,"title":{},"body":{"changelog.html":{}}}],["2021",{"_index":566,"title":{},"body":{"changelog.html":{}}}],["2022",{"_index":552,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":611,"title":{},"body":{"changelog.html":{}}}],["210decc",{"_index":655,"title":{},"body":{"changelog.html":{}}}],["21eca11",{"_index":596,"title":{},"body":{"changelog.html":{}}}],["22",{"_index":625,"title":{},"body":{"changelog.html":{}}}],["22af52f",{"_index":1013,"title":{},"body":{"changelog.html":{}}}],["23",{"_index":683,"title":{},"body":{"changelog.html":{}}}],["23fc6e5",{"_index":750,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":618,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":824,"title":{},"body":{"changelog.html":{}}}],["25cfe50",{"_index":740,"title":{},"body":{"changelog.html":{}}}],["25d6fa3",{"_index":681,"title":{},"body":{"changelog.html":{}}}],["26",{"_index":694,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":843,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":652,"title":{},"body":{"changelog.html":{}}}],["29",{"_index":851,"title":{},"body":{"changelog.html":{}}}],["2a4b102",{"_index":783,"title":{},"body":{"changelog.html":{}}}],["2f6ac2d",{"_index":665,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":968,"title":{},"body":{"changelog.html":{}}}],["3.0.0",{"_index":689,"title":{},"body":{"changelog.html":{}}}],["3.1.0",{"_index":685,"title":{},"body":{"changelog.html":{}}}],["3.2.0",{"_index":682,"title":{},"body":{"changelog.html":{}}}],["3.2.1",{"_index":676,"title":{},"body":{"changelog.html":{}}}],["3.2.2",{"_index":667,"title":{},"body":{"changelog.html":{}}}],["3.2.3",{"_index":657,"title":{},"body":{"changelog.html":{}}}],["3.2.4",{"_index":651,"title":{},"body":{"changelog.html":{}}}],["3.2.5",{"_index":644,"title":{},"body":{"changelog.html":{}}}],["3.2.6",{"_index":638,"title":{},"body":{"changelog.html":{}}}],["3.3.0",{"_index":633,"title":{},"body":{"changelog.html":{}}}],["3.3.1",{"_index":629,"title":{},"body":{"changelog.html":{}}}],["3.3.2",{"_index":623,"title":{},"body":{"changelog.html":{}}}],["3.3.3",{"_index":616,"title":{},"body":{"changelog.html":{}}}],["3.3.4",{"_index":609,"title":{},"body":{"changelog.html":{}}}],["3.3.5",{"_index":602,"title":{},"body":{"changelog.html":{}}}],["3.4.0",{"_index":599,"title":{},"body":{"changelog.html":{}}}],["30",{"_index":577,"title":{},"body":{"changelog.html":{}}}],["300ac10",{"_index":989,"title":{},"body":{"changelog.html":{}}}],["300px",{"_index":1050,"title":{},"body":{"index.html":{}}}],["31",{"_index":829,"title":{},"body":{"changelog.html":{}}}],["33",{"_index":832,"title":{},"body":{"changelog.html":{}}}],["34342aa",{"_index":732,"title":{},"body":{"changelog.html":{}}}],["36",{"_index":826,"title":{},"body":{"changelog.html":{}}}],["3633040",{"_index":789,"title":{},"body":{"changelog.html":{}}}],["37fc88e",{"_index":688,"title":{},"body":{"changelog.html":{}}}],["39",{"_index":822,"title":{},"body":{"changelog.html":{}}}],["3ce508d",{"_index":811,"title":{},"body":{"changelog.html":{}}}],["4",{"_index":775,"title":{},"body":{"changelog.html":{}}}],["4.0",{"_index":777,"title":{},"body":{"changelog.html":{}}}],["4.0.0",{"_index":576,"title":{},"body":{"changelog.html":{}}}],["40",{"_index":818,"title":{},"body":{"changelog.html":{}}}],["41",{"_index":814,"title":{},"body":{"changelog.html":{}}}],["4b20cde",{"_index":800,"title":{},"body":{"changelog.html":{}}}],["4c59b05",{"_index":961,"title":{},"body":{"changelog.html":{}}}],["4c665d2",{"_index":776,"title":{},"body":{"changelog.html":{}}}],["4da938d",{"_index":973,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":697,"title":{},"body":{"changelog.html":{}}}],["5.0.0",{"_index":565,"title":{},"body":{"changelog.html":{}}}],["5.5",{"_index":713,"title":{},"body":{"changelog.html":{}}}],["50",{"_index":185,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["514851f",{"_index":837,"title":{},"body":{"changelog.html":{}}}],["520abce",{"_index":813,"title":{},"body":{"changelog.html":{}}}],["53",{"_index":770,"title":{},"body":{"changelog.html":{}}}],["534bdf6",{"_index":631,"title":{},"body":{"changelog.html":{}}}],["54",{"_index":766,"title":{},"body":{"changelog.html":{}}}],["54be6b7",{"_index":772,"title":{},"body":{"changelog.html":{}}}],["5571069",{"_index":858,"title":{},"body":{"changelog.html":{}}}],["560bcb1",{"_index":684,"title":{},"body":{"changelog.html":{}}}],["56e463b",{"_index":675,"title":{},"body":{"changelog.html":{}}}],["58c954e",{"_index":587,"title":{},"body":{"changelog.html":{}}}],["59078e2",{"_index":949,"title":{},"body":{"changelog.html":{}}}],["5d6a576",{"_index":698,"title":{},"body":{"changelog.html":{}}}],["5f7f468",{"_index":853,"title":{},"body":{"changelog.html":{}}}],["5px",{"_index":1063,"title":{},"body":{"index.html":{}}}],["6",{"_index":627,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["6.0.0",{"_index":551,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["60c2e08",{"_index":962,"title":{},"body":{"changelog.html":{}}}],["62",{"_index":756,"title":{},"body":{"changelog.html":{}}}],["65",{"_index":751,"title":{},"body":{"changelog.html":{}}}],["66",{"_index":744,"title":{},"body":{"changelog.html":{}}}],["66f2289",{"_index":628,"title":{},"body":{"changelog.html":{}}}],["68",{"_index":733,"title":{},"body":{"changelog.html":{}}}],["68dc84f",{"_index":873,"title":{},"body":{"changelog.html":{}}}],["697c52c",{"_index":849,"title":{},"body":{"changelog.html":{}}}],["70",{"_index":738,"title":{},"body":{"changelog.html":{}}}],["71d5a05",{"_index":737,"title":{},"body":{"changelog.html":{}}}],["72",{"_index":735,"title":{},"body":{"changelog.html":{}}}],["74424ba",{"_index":967,"title":{},"body":{"changelog.html":{}}}],["75ce122",{"_index":828,"title":{},"body":{"changelog.html":{}}}],["79",{"_index":706,"title":{},"body":{"changelog.html":{}}}],["7b1280e",{"_index":994,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":658,"title":{},"body":{"changelog.html":{}}}],["80",{"_index":707,"title":{},"body":{"changelog.html":{}}}],["8000",{"_index":1088,"title":{},"body":{"index.html":{}}}],["81134ee",{"_index":650,"title":{},"body":{"changelog.html":{}}}],["81fe0b4",{"_index":942,"title":{},"body":{"changelog.html":{}}}],["820612e",{"_index":797,"title":{},"body":{"changelog.html":{}}}],["8232e66",{"_index":794,"title":{},"body":{"changelog.html":{}}}],["83",{"_index":656,"title":{},"body":{"changelog.html":{}}}],["858b3f8",{"_index":900,"title":{},"body":{"changelog.html":{}}}],["862249f",{"_index":601,"title":{},"body":{"changelog.html":{}}}],["86e366c",{"_index":643,"title":{},"body":{"changelog.html":{}}}],["8e3f108",{"_index":807,"title":{},"body":{"changelog.html":{}}}],["9",{"_index":640,"title":{},"body":{"changelog.html":{}}}],["9236e02",{"_index":846,"title":{},"body":{"changelog.html":{}}}],["927235e",{"_index":861,"title":{},"body":{"changelog.html":{}}}],["930de54",{"_index":615,"title":{},"body":{"changelog.html":{}}}],["93a5c4e",{"_index":831,"title":{},"body":{"changelog.html":{}}}],["94dc48d",{"_index":659,"title":{},"body":{"changelog.html":{}}}],["9557c0a",{"_index":909,"title":{},"body":{"changelog.html":{}}}],["9597986",{"_index":862,"title":{},"body":{"changelog.html":{}}}],["99d2f66",{"_index":817,"title":{},"body":{"changelog.html":{}}}],["9]*)px",{"_index":130,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["9c76aac",{"_index":904,"title":{},"body":{"changelog.html":{}}}],["9f9c54a",{"_index":955,"title":{},"body":{"changelog.html":{}}}],["a0323e9",{"_index":755,"title":{},"body":{"changelog.html":{}}}],["a056154",{"_index":745,"title":{},"body":{"changelog.html":{}}}],["a74f9e2",{"_index":799,"title":{},"body":{"changelog.html":{}}}],["a8e5cd3",{"_index":1002,"title":{},"body":{"changelog.html":{}}}],["aa169c7",{"_index":825,"title":{},"body":{"changelog.html":{}}}],["above",{"_index":626,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["absolute",{"_index":133,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"index.html":{}}}],["action",{"_index":1153,"title":{},"body":{"license.html":{}}}],["active",{"_index":181,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["add",{"_index":400,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["adding",{"_index":273,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["af7abf7",{"_index":701,"title":{},"body":{"changelog.html":{}}}],["align",{"_index":1045,"title":{},"body":{"index.html":{}}}],["allow",{"_index":203,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["allownegativeresizes",{"_index":232,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["allows",{"_index":1036,"title":{},"body":{"index.html":{},"properties.html":{}}}],["always",{"_index":679,"title":{},"body":{"changelog.html":{}}}],["amount",{"_index":956,"title":{},"body":{"changelog.html":{}}}],["and/or",{"_index":1121,"title":{},"body":{"license.html":{}}}],["angular",{"_index":388,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["angular/common",{"_index":56,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["angular/core",{"_index":54,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"dependencies.html":{},"index.html":{}}}],["angular2",{"_index":860,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["any).eventlisteners[type",{"_index":534,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["aot",{"_index":845,"title":{},"body":{"changelog.html":{}}}],["app",{"_index":913,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["applications",{"_index":759,"title":{},"body":{"changelog.html":{}}}],["applying",{"_index":924,"title":{},"body":{"changelog.html":{}}}],["apps",{"_index":1067,"title":{},"body":{"index.html":{}}}],["arising",{"_index":1157,"title":{},"body":{"license.html":{}}}],["associated",{"_index":1111,"title":{},"body":{"license.html":{}}}],["author",{"_index":1172,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":1146,"title":{},"body":{"license.html":{}}}],["auto",{"_index":836,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["b77c9fc",{"_index":787,"title":{},"body":{"changelog.html":{}}}],["bac87e3",{"_index":1019,"title":{},"body":{"changelog.html":{}}}],["back",{"_index":753,"title":{},"body":{"changelog.html":{}}}],["background",{"_index":1052,"title":{},"body":{"index.html":{}}}],["be5d727",{"_index":769,"title":{},"body":{"changelog.html":{}}}],["before",{"_index":200,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["begin",{"_index":239,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["begun",{"_index":243,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["behaviour",{"_index":986,"title":{},"body":{"changelog.html":{}}}],["being",{"_index":856,"title":{},"body":{"changelog.html":{}}}],["between",{"_index":214,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["bf497d2",{"_index":998,"title":{},"body":{"changelog.html":{}}}],["boolean",{"_index":208,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["booleans",{"_index":982,"title":{},"body":{"changelog.html":{}}}],["bootstrap",{"_index":1068,"title":{},"body":{"index.html":{}}}],["border",{"_index":1055,"title":{},"body":{"index.html":{}}}],["bottom",{"_index":17,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["bottomleft",{"_index":151,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["bottomright",{"_index":152,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["bounding",{"_index":11,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{}}}],["boundingrect",{"_index":138,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.bottom",{"_index":143,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.height",{"_index":140,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.left",{"_index":144,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.right",{"_index":145,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.top",{"_index":142,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.width",{"_index":141,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrectangle",{"_index":1,"title":{"interfaces/BoundingRectangle.html":{}},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["box",{"_index":1060,"title":{},"body":{"index.html":{}}}],["breaking",{"_index":555,"title":{},"body":{"changelog.html":{}}}],["broken",{"_index":919,"title":{},"body":{"changelog.html":{}}}],["browse",{"_index":1161,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":281,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["browsers",{"_index":948,"title":{},"body":{"changelog.html":{}}}],["bug",{"_index":588,"title":{},"body":{"changelog.html":{}}}],["bugs",{"_index":1167,"title":{},"body":{"properties.html":{}}}],["build",{"_index":562,"title":{},"body":{"changelog.html":{}}}],["bundle",{"_index":993,"title":{},"body":{"changelog.html":{}}}],["bundling",{"_index":704,"title":{},"body":{"changelog.html":{}}}],["c",{"_index":1100,"title":{},"body":{"license.html":{}}}],["c4519a1",{"_index":705,"title":{},"body":{"changelog.html":{}}}],["c60b3f5",{"_index":951,"title":{},"body":{"changelog.html":{}}}],["c76be59",{"_index":944,"title":{},"body":{"changelog.html":{}}}],["c7e3de6",{"_index":691,"title":{},"body":{"changelog.html":{}}}],["c85a28d",{"_index":608,"title":{},"body":{"changelog.html":{}}}],["call",{"_index":933,"title":{},"body":{"changelog.html":{}}}],["called",{"_index":199,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["camel",{"_index":906,"title":{},"body":{"changelog.html":{}}}],["cancel",{"_index":206,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["canvas",{"_index":591,"title":{},"body":{"changelog.html":{}}}],["case",{"_index":190,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["catch",{"_index":271,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["cbe088f",{"_index":892,"title":{},"body":{"changelog.html":{}}}],["center",{"_index":1047,"title":{},"body":{"index.html":{}}}],["change",{"_index":612,"title":{},"body":{"changelog.html":{}}}],["changed",{"_index":718,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":542,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":544,"title":{},"body":{"changelog.html":{}}}],["changing",{"_index":635,"title":{},"body":{"changelog.html":{}}}],["charge",{"_index":1107,"title":{},"body":{"license.html":{}}}],["check",{"_index":387,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["claim",{"_index":1149,"title":{},"body":{"license.html":{}}}],["class",{"_index":196,"title":{"classes/PointerEventListeners.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{},"overview.html":{}}}],["classes",{"_index":440,"title":{},"body":{"classes/PointerEventListeners.html":{},"changelog.html":{}}}],["cli",{"_index":595,"title":{},"body":{"changelog.html":{}}}],["clientx",{"_index":86,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{}}}],["clienty",{"_index":87,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{}}}],["clone",{"_index":923,"title":{},"body":{"changelog.html":{}}}],["cloned",{"_index":743,"title":{},"body":{"changelog.html":{}}}],["clonednode",{"_index":288,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["closes",{"_index":597,"title":{},"body":{"changelog.html":{}}}],["co",{"_index":934,"title":{},"body":{"changelog.html":{}}}],["col",{"_index":162,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["color",{"_index":1053,"title":{},"body":{"index.html":{}}}],["come",{"_index":1080,"title":{},"body":{"index.html":{}}}],["commit",{"_index":549,"title":{},"body":{"changelog.html":{}}}],["compatibility",{"_index":654,"title":{},"body":{"changelog.html":{}}}],["compilation",{"_index":573,"title":{},"body":{"changelog.html":{}}}],["completely",{"_index":953,"title":{},"body":{"changelog.html":{}}}],["component",{"_index":674,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["con",{"_index":960,"title":{},"body":{"changelog.html":{}}}],["conditions",{"_index":1128,"title":{},"body":{"license.html":{}}}],["configs",{"_index":727,"title":{},"body":{"changelog.html":{}}}],["configured",{"_index":786,"title":{},"body":{"changelog.html":{}}}],["connection",{"_index":1159,"title":{},"body":{"license.html":{}}}],["console",{"_index":276,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["console.log('element",{"_index":1066,"title":{},"body":{"index.html":{}}}],["const",{"_index":94,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["constructor",{"_index":253,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["constructor(renderer",{"_index":410,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["contain",{"_index":980,"title":{},"body":{"changelog.html":{}}}],["contains",{"_index":493,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["content",{"_index":1049,"title":{},"body":{"index.html":{}}}],["contents",{"_index":1030,"title":{},"body":{"index.html":{}}}],["continually",{"_index":1095,"title":{},"body":{"index.html":{}}}],["contract",{"_index":1154,"title":{},"body":{"license.html":{}}}],["coordinate",{"_index":38,"title":{"interfaces/Coordinate.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["coords",{"_index":319,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["copies",{"_index":1123,"title":{},"body":{"license.html":{}}}],["copy",{"_index":590,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["copyright",{"_index":1099,"title":{},"body":{"license.html":{}}}],["core",{"_index":871,"title":{},"body":{"changelog.html":{}}}],["corners",{"_index":1018,"title":{},"body":{"changelog.html":{}}}],["correct",{"_index":820,"title":{},"body":{"changelog.html":{}}}],["create",{"_index":922,"title":{},"body":{"changelog.html":{}}}],["css",{"_index":620,"title":{},"body":{"changelog.html":{}}}],["cssclasses",{"_index":802,"title":{},"body":{"changelog.html":{}}}],["current",{"_index":1083,"title":{},"body":{"index.html":{}}}],["currentrect",{"_index":287,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize",{"_index":268,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize!.currentrect",{"_index":356,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize!.edges",{"_index":342,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize!.startingrect",{"_index":341,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.clonednode",{"_index":292,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.clonednode!.scrollleft",{"_index":378,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.clonednode!.scrolltop",{"_index":376,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.edges.bottom",{"_index":317,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.edges.left",{"_index":309,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.edges.right",{"_index":312,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.edges.top",{"_index":314,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.startingrect",{"_index":377,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.startingrect.height}px",{"_index":373,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.startingrect.left}px",{"_index":371,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.startingrect.top}px",{"_index":372,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.startingrect.width}px",{"_index":374,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["cursor",{"_index":362,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["cursorprecision",{"_index":808,"title":{},"body":{"changelog.html":{}}}],["cursors",{"_index":165,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["cursors.bottomleft",{"_index":168,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["cursors.bottomright",{"_index":169,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["cursors.leftorright",{"_index":170,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["cursors.topleft",{"_index":166,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["cursors.toporbottom",{"_index":171,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["cursors.topright",{"_index":167,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["customised",{"_index":816,"title":{},"body":{"changelog.html":{}}}],["d5b18cc",{"_index":895,"title":{},"body":{"changelog.html":{}}}],["d5ea756",{"_index":842,"title":{},"body":{"changelog.html":{}}}],["d65c257",{"_index":594,"title":{},"body":{"changelog.html":{}}}],["d664038",{"_index":958,"title":{},"body":{"changelog.html":{}}}],["d9ad08c",{"_index":575,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":1150,"title":{},"body":{"license.html":{}}}],["dash",{"_index":907,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":1112,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1160,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":468,"title":{},"body":{"modules/ResizableModule.html":{},"index.html":{}}}],["dedc3bb",{"_index":927,"title":{},"body":{"changelog.html":{}}}],["deepclonenode",{"_index":82,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["deepclonenode(this.elm.nativeelement",{"_index":367,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["default",{"_index":236,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["default_resize_cursors",{"_index":155,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":227,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["defined",{"_index":32,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Edges.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"directives/ResizeHandleDirective.html":{}}}],["delete",{"_index":535,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["demo",{"_index":912,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["depend",{"_index":805,"title":{},"body":{"changelog.html":{}}}],["dependencies",{"_index":1020,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["dependency",{"_index":642,"title":{},"body":{"changelog.html":{}}}],["deprecate",{"_index":660,"title":{},"body":{"changelog.html":{}}}],["deprecated",{"_index":586,"title":{},"body":{"changelog.html":{}}}],["description",{"_index":10,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Edges.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"properties.html":{}}}],["destroy",{"_index":252,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["destroyed",{"_index":841,"title":{},"body":{"changelog.html":{}}}],["destroying",{"_index":672,"title":{},"body":{"changelog.html":{}}}],["detection",{"_index":613,"title":{},"body":{"changelog.html":{}}}],["dev",{"_index":1082,"title":{},"body":{"index.html":{}}}],["development",{"_index":1033,"title":{},"body":{"index.html":{}}}],["device",{"_index":81,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["devices",{"_index":606,"title":{},"body":{"changelog.html":{}}}],["di",{"_index":527,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["dimensions",{"_index":231,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["directive",{"_index":43,"title":{"directives/ResizableDirective.html":{},"directives/ResizeHandleDirective.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["directives",{"_index":450,"title":{},"body":{"directives/ResizableDirective.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"overview.html":{}}}],["directory",{"_index":1084,"title":{},"body":{"index.html":{}}}],["disable",{"_index":945,"title":{},"body":{"changelog.html":{}}}],["disableresize",{"_index":952,"title":{},"body":{"changelog.html":{}}}],["disabling",{"_index":954,"title":{},"body":{"changelog.html":{}}}],["display",{"_index":1043,"title":{},"body":{"index.html":{}}}],["dist",{"_index":899,"title":{},"body":{"changelog.html":{}}}],["distribute",{"_index":1119,"title":{},"body":{"license.html":{}}}],["document",{"_index":392,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["documentation",{"_index":1032,"title":{},"body":{"index.html":{},"license.html":{}}}],["documented",{"_index":546,"title":{},"body":{"changelog.html":{}}}],["doesn't",{"_index":390,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["don't",{"_index":669,"title":{},"body":{"changelog.html":{}}}],["dont",{"_index":848,"title":{},"body":{"changelog.html":{}}}],["drag",{"_index":483,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["dragged",{"_index":242,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"index.html":{},"properties.html":{}}}],["dragging",{"_index":495,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["draghandle",{"_index":762,"title":{},"body":{"changelog.html":{}}}],["drop",{"_index":902,"title":{},"body":{"changelog.html":{}}}],["dynamically",{"_index":730,"title":{},"body":{"changelog.html":{}}}],["e",{"_index":272,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["e.g",{"_index":222,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["e722a86",{"_index":1008,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":201,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["eb314fd",{"_index":940,"title":{},"body":{"changelog.html":{}}}],["edf56db",{"_index":622,"title":{},"body":{"changelog.html":{}}}],["edge",{"_index":957,"title":{},"body":{"changelog.html":{}}}],["edges",{"_index":71,"title":{"interfaces/Edges.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["edges.bottom",{"_index":102,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["edges.interface",{"_index":477,"title":{},"body":{"interfaces/ResizeEvent.html":{}}}],["edges.left",{"_index":104,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["edges.right",{"_index":106,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["edges.top",{"_index":100,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["edgesdiff",{"_index":175,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["edgesdiff[edge",{"_index":177,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["edited",{"_index":810,"title":{},"body":{"changelog.html":{}}}],["effect",{"_index":213,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["effects",{"_index":946,"title":{},"body":{"changelog.html":{}}}],["element",{"_index":14,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["element#readme",{"_index":1166,"title":{},"body":{"properties.html":{}}}],["element.git",{"_index":1171,"title":{},"body":{"properties.html":{}}}],["element.js",{"_index":720,"title":{},"body":{"changelog.html":{}}}],["element.nativeelement.getboundingclientrect",{"_index":139,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.offsetheight",{"_index":134,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.offsetleft",{"_index":137,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.offsettop",{"_index":136,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.offsetwidth",{"_index":135,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.scrollleft",{"_index":147,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.scrolltop",{"_index":146,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.style",{"_index":117,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.umd.js",{"_index":722,"title":{},"body":{"changelog.html":{}}}],["element/bundles/angular",{"_index":721,"title":{},"body":{"changelog.html":{}}}],["element/dist/umd/angular",{"_index":719,"title":{},"body":{"changelog.html":{}}}],["element/docs",{"_index":1076,"title":{},"body":{"index.html":{}}}],["element/issues",{"_index":1168,"title":{},"body":{"properties.html":{}}}],["element/src/lib/interfaces/bounding",{"_index":8,"title":{},"body":{"interfaces/BoundingRectangle.html":{}}}],["element/src/lib/interfaces/edges.interface.ts",{"_index":437,"title":{},"body":{"interfaces/Edges.html":{}}}],["element/src/lib/interfaces/edges.interface.ts:8",{"_index":439,"title":{},"body":{"interfaces/Edges.html":{}}}],["element/src/lib/interfaces/resize",{"_index":474,"title":{},"body":{"interfaces/ResizeEvent.html":{}}}],["element/src/lib/resizable.directive.ts",{"_index":39,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["element/src/lib/resizable.directive.ts:213",{"_index":460,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["element/src/lib/resizable.directive.ts:218",{"_index":455,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["element/src/lib/resizable.directive.ts:225",{"_index":459,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["element/src/lib/resizable.directive.ts:230",{"_index":458,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["element/src/lib/resizable.directive.ts:235",{"_index":456,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["element/src/lib/resizable.directive.ts:240",{"_index":454,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["element/src/lib/resizable.directive.ts:245",{"_index":457,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["element/src/lib/resizable.directive.ts:250",{"_index":462,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["element/src/lib/resizable.directive.ts:255",{"_index":463,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["element/src/lib/resizable.directive.ts:260",{"_index":461,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["element/src/lib/resizable.directive.ts:675",{"_index":444,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["element/src/lib/resizable.directive.ts:677",{"_index":445,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["element/src/lib/resizable.directive.ts:679",{"_index":446,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["element/src/lib/resizable.directive.ts:683",{"_index":448,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["element/src/lib/resizable.directive.ts:694",{"_index":442,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["element/src/lib/resizable.module.ts",{"_index":467,"title":{},"body":{"modules/ResizableModule.html":{}}}],["element/src/lib/resize",{"_index":478,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["elementref",{"_index":45,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{}}}],["elements",{"_index":192,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["elementthen",{"_index":1040,"title":{},"body":{"index.html":{}}}],["elm",{"_index":257,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["emitted",{"_index":680,"title":{},"body":{"changelog.html":{}}}],["enable",{"_index":210,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["enableghostresize",{"_index":218,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["enableresizestyling",{"_index":928,"title":{},"body":{"changelog.html":{}}}],["enableresizestyling]=\"true",{"_index":977,"title":{},"body":{"changelog.html":{}}}],["ensure",{"_index":678,"title":{},"body":{"changelog.html":{}}}],["entry",{"_index":716,"title":{},"body":{"changelog.html":{}}}],["environment",{"_index":1078,"title":{},"body":{"index.html":{}}}],["errors",{"_index":275,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["event",{"_index":88,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["event.changedtouches[0].clientx",{"_index":434,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.changedtouches[0].clienty",{"_index":435,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.clientx",{"_index":417,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.clienty",{"_index":418,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.edges",{"_index":978,"title":{},"body":{"changelog.html":{}}}],["event.interface",{"_index":77,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["event.interface.ts",{"_index":475,"title":{},"body":{"interfaces/ResizeEvent.html":{}}}],["event.preventdefault",{"_index":270,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.targettouches[0].clientx",{"_index":427,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["event.targettouches[0].clienty",{"_index":428,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["event.touches[0].clientx",{"_index":420,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.touches[0].clienty",{"_index":421,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["eventemitter",{"_index":49,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["eventlisteners",{"_index":498,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["eventname).pipe",{"_index":539,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["events",{"_index":217,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{}}}],["example",{"_index":188,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["except",{"_index":283,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["existing",{"_index":619,"title":{},"body":{"changelog.html":{}}}],["export",{"_index":35,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["exportas",{"_index":195,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["exported",{"_index":911,"title":{},"body":{"changelog.html":{}}}],["exports",{"_index":470,"title":{},"body":{"modules/ResizableModule.html":{}}}],["expose",{"_index":788,"title":{},"body":{"changelog.html":{}}}],["express",{"_index":1137,"title":{},"body":{"license.html":{}}}],["f24a746",{"_index":734,"title":{},"body":{"changelog.html":{}}}],["f3fe12a",{"_index":878,"title":{},"body":{"changelog.html":{}}}],["f440c87",{"_index":1017,"title":{},"body":{"changelog.html":{}}}],["fa73345",{"_index":926,"title":{},"body":{"changelog.html":{}}}],["false",{"_index":205,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["favour",{"_index":663,"title":{},"body":{"changelog.html":{}}}],["fb5599b",{"_index":637,"title":{},"body":{"changelog.html":{}}}],["fd4140",{"_index":1054,"title":{},"body":{"index.html":{}}}],["fe49114",{"_index":992,"title":{},"body":{"changelog.html":{}}}],["features",{"_index":569,"title":{},"body":{"changelog.html":{}}}],["ffad2ca",{"_index":908,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["files",{"_index":880,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["filter",{"_index":65,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["filter(([previouscoords",{"_index":329,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["filter((edges",{"_index":357,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["filter((newboundingrect",{"_index":343,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["find",{"_index":1070,"title":{},"body":{"index.html":{}}}],["find((value",{"_index":125,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["firefox",{"_index":764,"title":{},"body":{"changelog.html":{}}}],["fires",{"_index":943,"title":{},"body":{"changelog.html":{}}}],["fit",{"_index":966,"title":{},"body":{"changelog.html":{}}}],["fitness",{"_index":1142,"title":{},"body":{"license.html":{}}}],["fix",{"_index":763,"title":{},"body":{"changelog.html":{}}}],["fixed",{"_index":229,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["fixes",{"_index":589,"title":{},"body":{"changelog.html":{}}}],["flex",{"_index":1044,"title":{},"body":{"index.html":{}}}],["flicker",{"_index":1005,"title":{},"body":{"changelog.html":{}}}],["following",{"_index":1127,"title":{},"body":{"license.html":{}}}],["free",{"_index":1106,"title":{},"body":{"license.html":{}}}],["fromevent",{"_index":497,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["fromevent(this.element.nativeelement",{"_index":538,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["full",{"_index":584,"title":{},"body":{"changelog.html":{}}}],["function",{"_index":91,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["functions",{"_index":1023,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":1126,"title":{},"body":{"license.html":{}}}],["generated",{"_index":1073,"title":{},"body":{"index.html":{}}}],["getdiff(movecoords",{"_index":301,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getdiff(newcoords",{"_index":328,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getdiff(previouscoords",{"_index":327,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getedgesdiff",{"_index":172,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["getedgesdiff(__namedparameters",{"_index":1026,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getelementrect",{"_index":111,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["getelementrect(element",{"_index":1027,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getgrid",{"_index":318,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getgrid(newcoords",{"_index":332,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getinstance",{"_index":408,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getinstance(renderer",{"_index":447,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["getnewboundingrectangle",{"_index":92,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["getnewboundingrectangle(startingrect",{"_index":381,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["getresizecursor",{"_index":1025,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getresizecursor(currentresize.edges",{"_index":363,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getresizecursor(edges",{"_index":164,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["getresizecursors",{"_index":297,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getsnapgrid",{"_index":306,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getting",{"_index":540,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["ghost",{"_index":183,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["ghostelementpositioning",{"_index":112,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["git+https://github.com/mattlewis92/angular",{"_index":1170,"title":{},"body":{"properties.html":{}}}],["gives",{"_index":803,"title":{},"body":{"changelog.html":{}}}],["global",{"_index":708,"title":{},"body":{"changelog.html":{}}}],["globally",{"_index":736,"title":{},"body":{"changelog.html":{}}}],["granted",{"_index":1105,"title":{},"body":{"license.html":{}}}],["grid",{"_index":220,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["guidelines",{"_index":550,"title":{},"body":{"changelog.html":{}}}],["handle",{"_index":484,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["handle.directive",{"_index":473,"title":{},"body":{"modules/ResizableModule.html":{}}}],["handle.directive.ts",{"_index":479,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["handle.directive.ts:40",{"_index":492,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["handle.directive.ts:44",{"_index":489,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["handle.directive.ts:52",{"_index":488,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["handlers",{"_index":747,"title":{},"body":{"changelog.html":{}}}],["handles",{"_index":664,"title":{},"body":{"changelog.html":{}}}],["height",{"_index":19,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["here",{"_index":1075,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":1104,"title":{},"body":{"license.html":{}}}],["hidden",{"_index":245,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["higher",{"_index":557,"title":{},"body":{"changelog.html":{}}}],["holders",{"_index":1147,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":1164,"title":{},"body":{"properties.html":{}}}],["host",{"_index":673,"title":{},"body":{"changelog.html":{}}}],["html",{"_index":189,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["htmlelement",{"_index":289,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["https://github.com/mattlewis92/angular",{"_index":1165,"title":{},"body":{"properties.html":{}}}],["https://mattlewis92.github.io/angular",{"_index":1028,"title":{},"body":{"index.html":{}}}],["ie11",{"_index":754,"title":{},"body":{"changelog.html":{}}}],["immediately",{"_index":671,"title":{},"body":{"changelog.html":{}}}],["implementation",{"_index":1012,"title":{},"body":{"changelog.html":{}}}],["implements",{"_index":198,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["implied",{"_index":1138,"title":{},"body":{"license.html":{}}}],["import",{"_index":42,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["imports",{"_index":898,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["improve",{"_index":687,"title":{},"body":{"changelog.html":{}}}],["improvements",{"_index":604,"title":{},"body":{"changelog.html":{}}}],["include",{"_index":870,"title":{},"body":{"changelog.html":{}}}],["included",{"_index":1131,"title":{},"body":{"license.html":{}}}],["including",{"_index":1115,"title":{},"body":{"license.html":{}}}],["index",{"_index":15,"title":{"index.html":{}},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":26,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Edges.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{}}}],["inherit",{"_index":296,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["initial",{"_index":1010,"title":{},"body":{"changelog.html":{}}}],["initialise",{"_index":646,"title":{},"body":{"changelog.html":{}}}],["initialrectangle",{"_index":173,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["initialrectangle[edge",{"_index":179,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["inject",{"_index":52,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["inject(platform_id",{"_index":254,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["input",{"_index":48,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["inputs",{"_index":452,"title":{},"body":{"directives/ResizableDirective.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["inside",{"_index":481,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["install",{"_index":1037,"title":{},"body":{"index.html":{}}}],["installation",{"_index":1031,"title":{},"body":{"index.html":{}}}],["instance",{"_index":407,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["instances",{"_index":782,"title":{},"body":{"changelog.html":{}}}],["instead",{"_index":582,"title":{},"body":{"changelog.html":{}}}],["interface",{"_index":0,"title":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{}},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{},"overview.html":{}}}],["interfaces/bounding",{"_index":73,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["interfaces/edges.interface",{"_index":72,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["interfaces/resize",{"_index":76,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["is_touch_device",{"_index":78,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["isplatformbrowser",{"_index":55,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["isplatformbrowser(this.platformid",{"_index":393,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["items",{"_index":1046,"title":{},"body":{"index.html":{}}}],["ivy",{"_index":571,"title":{},"body":{"changelog.html":{}}}],["js",{"_index":872,"title":{},"body":{"changelog.html":{}}}],["justify",{"_index":1048,"title":{},"body":{"index.html":{}}}],["keep",{"_index":830,"title":{},"body":{"changelog.html":{}}}],["key",{"_index":27,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Edges.html":{},"directives/ResizeHandleDirective.html":{}}}],["keywords",{"_index":1163,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":1136,"title":{},"body":{"license.html":{}}}],["know",{"_index":391,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["last",{"_index":936,"title":{},"body":{"changelog.html":{}}}],["lazily",{"_index":645,"title":{},"body":{"changelog.html":{}}}],["left",{"_index":20,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["leftorright",{"_index":153,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["lettable",{"_index":699,"title":{},"body":{"changelog.html":{}}}],["level",{"_index":661,"title":{},"body":{"changelog.html":{}}}],["lewis",{"_index":1102,"title":{},"body":{"license.html":{},"properties.html":{}}}],["liability",{"_index":1151,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1148,"title":{},"body":{"license.html":{}}}],["library",{"_index":714,"title":{},"body":{"changelog.html":{}}}],["license",{"_index":1034,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["limitation",{"_index":1116,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1139,"title":{},"body":{"license.html":{}}}],["listen",{"_index":605,"title":{},"body":{"changelog.html":{}}}],["listener",{"_index":278,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["listeners",{"_index":647,"title":{},"body":{"changelog.html":{}}}],["listenonthehost(eventname",{"_index":537,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["local",{"_index":1081,"title":{},"body":{"index.html":{}}}],["located",{"_index":491,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["locked",{"_index":221,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["longer",{"_index":710,"title":{},"body":{"changelog.html":{}}}],["main",{"_index":804,"title":{},"body":{"changelog.html":{}}}],["make",{"_index":187,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["map",{"_index":62,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["map(([previouscoords",{"_index":324,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["map((property",{"_index":123,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["margin",{"_index":1059,"title":{},"body":{"index.html":{}}}],["matching",{"_index":37,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(coords.clientx",{"_index":320,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["math.ceil(coords.clienty",{"_index":321,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["math.round(newcoords.clientx",{"_index":337,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["math.round(newcoords.clienty",{"_index":338,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["matt",{"_index":1101,"title":{},"body":{"license.html":{},"properties.html":{}}}],["merchantability",{"_index":1141,"title":{},"body":{"license.html":{}}}],["merge",{"_index":60,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"license.html":{}}}],["merge(this.pointereventlisteners.pointerdown",{"_index":263,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["merge(this.pointereventlisteners.pointerup",{"_index":285,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["mergemap",{"_index":63,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["mergemap((startcoords",{"_index":300,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["metadata",{"_index":451,"title":{},"body":{"directives/ResizableDirective.html":{},"directives/ResizeHandleDirective.html":{}}}],["methods",{"_index":441,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["migrate",{"_index":580,"title":{},"body":{"changelog.html":{}}}],["milliseconds",{"_index":235,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["miscellaneous",{"_index":1022,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":988,"title":{},"body":{"changelog.html":{}}}],["mit",{"_index":1098,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["mode",{"_index":574,"title":{},"body":{"changelog.html":{}}}],["modified",{"_index":711,"title":{},"body":{"changelog.html":{}}}],["modify",{"_index":1118,"title":{},"body":{"license.html":{}}}],["module",{"_index":464,"title":{"modules/ResizableModule.html":{}},"body":{"index.html":{},"overview.html":{}}}],["modules",{"_index":466,"title":{"modules.html":{}},"body":{"modules/ResizableModule.html":{},"modules.html":{}}}],["mouse",{"_index":226,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["mouse_move_throttle_ms",{"_index":184,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["mousedown",{"_index":248,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["mousedrag",{"_index":299,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["mouseevent",{"_index":89,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["mousemove",{"_index":249,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["mousemove$.pipe(pairwise",{"_index":323,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["mousemove$.pipe(take(1)).pipe(map((coords",{"_index":322,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["mousemoveevent",{"_index":520,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["mousemoveevent.clientx",{"_index":521,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["mousemoveevent.clienty",{"_index":522,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["mousemovethrottlems",{"_index":237,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["mouseup",{"_index":247,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["mouseup$.pipe(takeuntil(this.destroy$)).subscribe",{"_index":382,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["mousing",{"_index":1015,"title":{},"body":{"changelog.html":{}}}],["move",{"_index":233,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["movecoords.clientx",{"_index":302,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["movecoords.clienty",{"_index":304,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["moz",{"_index":121,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["ms",{"_index":120,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["multiple",{"_index":996,"title":{},"body":{"changelog.html":{}}}],["mwl",{"_index":910,"title":{},"body":{"changelog.html":{}}}],["mwlresizable",{"_index":194,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["mwlresizehandle",{"_index":485,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["mycomponent",{"_index":1064,"title":{},"body":{"index.html":{}}}],["mymodule",{"_index":1069,"title":{},"body":{"index.html":{}}}],["name",{"_index":399,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{}}}],["ne",{"_index":159,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["need",{"_index":725,"title":{},"body":{"changelog.html":{}}}],["needed",{"_index":649,"title":{},"body":{"changelog.html":{}}}],["negative",{"_index":230,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["nesting",{"_index":964,"title":{},"body":{"changelog.html":{}}}],["new",{"_index":241,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["newboundingrect",{"_index":95,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.bottom",{"_index":103,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.height",{"_index":108,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.height}px",{"_index":349,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.left",{"_index":105,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.left}px",{"_index":352,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.right",{"_index":107,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.top",{"_index":101,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.top}px",{"_index":351,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.width",{"_index":109,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.width}px",{"_index":350,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newcoords",{"_index":325,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newgrid",{"_index":331,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newgrid.x",{"_index":334,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newgrid.y",{"_index":336,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newrectangle",{"_index":174,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["newrectangle[edge",{"_index":178,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["ng",{"_index":702,"title":{},"body":{"changelog.html":{}}}],["ng4",{"_index":774,"title":{},"body":{"changelog.html":{}}}],["ngmodule",{"_index":471,"title":{},"body":{"modules/ResizableModule.html":{},"index.html":{}}}],["ngondestroy",{"_index":386,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["ngoninit",{"_index":261,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["ngzone",{"_index":51,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["node",{"_index":84,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["node.js",{"_index":1079,"title":{},"body":{"index.html":{}}}],["node_modules/angular",{"_index":865,"title":{},"body":{"changelog.html":{}}}],["node_modules/angular2",{"_index":881,"title":{},"body":{"changelog.html":{}}}],["noninfringement",{"_index":1145,"title":{},"body":{"license.html":{}}}],["notable",{"_index":543,"title":{},"body":{"changelog.html":{}}}],["nothing",{"_index":282,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["notice",{"_index":1129,"title":{},"body":{"license.html":{}}}],["now",{"_index":558,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["npm",{"_index":1039,"title":{},"body":{"index.html":{}}}],["null",{"_index":290,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["number",{"_index":29,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["numbers",{"_index":981,"title":{},"body":{"changelog.html":{}}}],["nw",{"_index":157,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["o",{"_index":122,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["object",{"_index":240,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["object.freeze",{"_index":156,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["object.keys(edges).foreach((edge",{"_index":176,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["object.keys(edges).length",{"_index":358,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["object.keys(this.eventlisteners).foreach((type",{"_index":533,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["observable",{"_index":58,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["observables",{"_index":840,"title":{},"body":{"changelog.html":{}}}],["observer",{"_index":59,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["observer.next",{"_index":416,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["obtaining",{"_index":1109,"title":{},"body":{"license.html":{}}}],["offline",{"_index":876,"title":{},"body":{"changelog.html":{}}}],["old",{"_index":985,"title":{},"body":{"changelog.html":{}}}],["once",{"_index":1093,"title":{},"body":{"index.html":{}}}],["ondestroy",{"_index":50,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["oninit",{"_index":46,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["onmousedown",{"_index":511,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["onmousemove",{"_index":530,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["onmouseup(clientx",{"_index":525,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["onresize",{"_index":915,"title":{},"body":{"changelog.html":{}}}],["onresizeend",{"_index":916,"title":{},"body":{"changelog.html":{}}}],["onresizeend(event",{"_index":1065,"title":{},"body":{"index.html":{}}}],["onresizestart",{"_index":914,"title":{},"body":{"changelog.html":{}}}],["operator",{"_index":897,"title":{},"body":{"changelog.html":{}}}],["operators",{"_index":700,"title":{},"body":{"changelog.html":{}}}],["opt",{"_index":959,"title":{},"body":{"changelog.html":{}}}],["option",{"_index":662,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["optional",{"_index":18,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Edges.html":{},"classes/PointerEventListeners.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{}}}],["ordinates",{"_index":935,"title":{},"body":{"changelog.html":{}}}],["otherwise",{"_index":1156,"title":{},"body":{"license.html":{}}}],["out",{"_index":1158,"title":{},"body":{"license.html":{}}}],["output",{"_index":47,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["outputs",{"_index":453,"title":{},"body":{"directives/ResizableDirective.html":{},"changelog.html":{}}}],["outside",{"_index":749,"title":{},"body":{"changelog.html":{}}}],["over",{"_index":1016,"title":{},"body":{"changelog.html":{}}}],["overview",{"_index":1162,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":561,"title":{"dependencies.html":{},"properties.html":{}},"body":{"changelog.html":{}}}],["packagr",{"_index":703,"title":{},"body":{"changelog.html":{}}}],["pairwise",{"_index":66,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["parameters",{"_index":443,"title":{},"body":{"classes/PointerEventListeners.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":494,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["partial",{"_index":572,"title":{},"body":{"changelog.html":{}}}],["particular",{"_index":1143,"title":{},"body":{"license.html":{}}}],["passed",{"_index":476,"title":{},"body":{"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{}}}],["passive",{"_index":277,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["path",{"_index":879,"title":{},"body":{"changelog.html":{}}}],["peer",{"_index":641,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["peerdependencies",{"_index":888,"title":{},"body":{"changelog.html":{}}}],["performance",{"_index":603,"title":{},"body":{"changelog.html":{}}}],["permission",{"_index":1103,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1124,"title":{},"body":{"license.html":{}}}],["person",{"_index":1108,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1125,"title":{},"body":{"license.html":{}}}],["pipe",{"_index":267,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pipe(filter",{"_index":340,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pipe(share",{"_index":422,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pipe(takeuntil(merge(mouseup",{"_index":339,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["place",{"_index":186,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["placed",{"_index":480,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["platform_id",{"_index":53,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["platformid",{"_index":255,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["please",{"_index":581,"title":{},"body":{"changelog.html":{}}}],["point",{"_index":717,"title":{},"body":{"changelog.html":{}}}],["pointerdown",{"_index":403,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointereventcoordinate",{"_index":85,"title":{"interfaces/PointerEventCoordinate.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointereventlisteners",{"_index":251,"title":{"classes/PointerEventListeners.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointereventlisteners.getinstance",{"_index":260,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointereventlisteners.instance",{"_index":409,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointermove",{"_index":404,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointerup",{"_index":405,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pojo",{"_index":941,"title":{},"body":{"changelog.html":{}}}],["port",{"_index":1087,"title":{},"body":{"index.html":{}}}],["portions",{"_index":1133,"title":{},"body":{"license.html":{}}}],["position",{"_index":370,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["positioning",{"_index":228,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["post",{"_index":890,"title":{},"body":{"changelog.html":{}}}],["precision",{"_index":809,"title":{},"body":{"changelog.html":{}}}],["prefix",{"_index":903,"title":{},"body":{"changelog.html":{}}}],["prepare",{"_index":1077,"title":{},"body":{"index.html":{}}}],["pressed",{"_index":238,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["prevent",{"_index":854,"title":{},"body":{"changelog.html":{}}}],["previous",{"_index":930,"title":{},"body":{"changelog.html":{}}}],["previouscoords",{"_index":326,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["previousgrid",{"_index":330,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["previousgrid.x",{"_index":333,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["previousgrid.y",{"_index":335,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["private",{"_index":250,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["project",{"_index":545,"title":{},"body":{"changelog.html":{}}}],["projects/.../resizable.directive.ts",{"_index":1024,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["projects/angular",{"_index":6,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["propagate",{"_index":204,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["properties",{"_index":16,"title":{"properties.html":{}},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{},"properties.html":{}}}],["prototype",{"_index":709,"title":{},"body":{"changelog.html":{}}}],["provide",{"_index":970,"title":{},"body":{"changelog.html":{}}}],["provided",{"_index":1134,"title":{},"body":{"license.html":{}}}],["public",{"_index":246,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["publish",{"_index":570,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["purpose",{"_index":1144,"title":{},"body":{"license.html":{}}}],["rc5",{"_index":891,"title":{},"body":{"changelog.html":{}}}],["rc6",{"_index":894,"title":{},"body":{"changelog.html":{}}}],["re",{"_index":975,"title":{},"body":{"changelog.html":{}}}],["readme",{"_index":583,"title":{},"body":{"changelog.html":{}}}],["rectangle",{"_index":12,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{},"index.html":{}}}],["rectangle.interface",{"_index":74,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{}}}],["rectangle.interface.ts",{"_index":9,"title":{},"body":{"interfaces/BoundingRectangle.html":{}}}],["rectangle.interface.ts:12",{"_index":33,"title":{},"body":{"interfaces/BoundingRectangle.html":{}}}],["reference",{"_index":490,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["register",{"_index":798,"title":{},"body":{"changelog.html":{}}}],["relative",{"_index":1041,"title":{},"body":{"index.html":{}}}],["relax",{"_index":792,"title":{},"body":{"changelog.html":{}}}],["release",{"_index":1096,"title":{},"body":{"index.html":{}}}],["released",{"_index":244,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["releaselicense",{"_index":1097,"title":{},"body":{"index.html":{}}}],["reload",{"_index":1089,"title":{},"body":{"index.html":{}}}],["remove",{"_index":585,"title":{},"body":{"changelog.html":{}}}],["removed",{"_index":579,"title":{},"body":{"changelog.html":{}}}],["removeghostelement",{"_index":291,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["rename",{"_index":859,"title":{},"body":{"changelog.html":{}}}],["renamed",{"_index":864,"title":{},"body":{"changelog.html":{}}}],["renderer",{"_index":256,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["renderer.listen",{"_index":415,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["renderer2",{"_index":44,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["repo",{"_index":1085,"title":{},"body":{"index.html":{}}}],["repository",{"_index":1169,"title":{},"body":{"properties.html":{}}}],["required",{"_index":559,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["reset",{"_index":835,"title":{},"body":{"changelog.html":{}}}],["resizable",{"_index":7,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["resizable.directive",{"_index":472,"title":{},"body":{"modules/ResizableModule.html":{},"directives/ResizeHandleDirective.html":{}}}],["resizable.js",{"_index":885,"title":{},"body":{"changelog.html":{}}}],["resizable.jsafter",{"_index":883,"title":{},"body":{"changelog.html":{}}}],["resizable/angular2",{"_index":882,"title":{},"body":{"changelog.html":{}}}],["resizable/dist/umd/angular2",{"_index":884,"title":{},"body":{"changelog.html":{}}}],["resizablecontainer",{"_index":486,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["resizabledirective",{"_index":197,"title":{"directives/ResizableDirective.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["resizablemodule",{"_index":465,"title":{"modules/ResizableModule.html":{}},"body":{"modules/ResizableModule.html":{},"changelog.html":{},"index.html":{},"modules.html":{}}}],["resize",{"_index":158,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["resize)=\"onresize($event)\"after",{"_index":866,"title":{},"body":{"changelog.html":{}}}],["resize_active_class",{"_index":180,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["resize_ghost_element_class",{"_index":182,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["resizeable",{"_index":950,"title":{},"body":{"changelog.html":{}}}],["resizecursorprecision",{"_index":578,"title":{},"body":{"changelog.html":{}}}],["resizecursors",{"_index":148,"title":{"interfaces/ResizeCursors.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["resized",{"_index":13,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["resizeedges",{"_index":487,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["resizeedges]={top",{"_index":984,"title":{},"body":{"changelog.html":{}}}],["resizeend",{"_index":216,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["resizeevent",{"_index":75,"title":{"interfaces/ResizeEvent.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"index.html":{}}}],["resizehandle",{"_index":728,"title":{},"body":{"changelog.html":{}}}],["resizehandledirective",{"_index":469,"title":{"directives/ResizeHandleDirective.html":{}},"body":{"modules/ResizableModule.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["resizehandles",{"_index":963,"title":{},"body":{"changelog.html":{}}}],["resizesnapgrid",{"_index":225,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["resizestart",{"_index":215,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["resizing",{"_index":212,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["resizing)=\"onresizing($event",{"_index":867,"title":{},"body":{"changelog.html":{}}}],["restore",{"_index":653,"title":{},"body":{"changelog.html":{}}}],["restriction",{"_index":1114,"title":{},"body":{"license.html":{}}}],["results",{"_index":36,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":110,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["returns",{"_index":449,"title":{},"body":{"classes/PointerEventListeners.html":{},"miscellaneous/functions.html":{}}}],["rezize",{"_index":796,"title":{},"body":{"changelog.html":{}}}],["right",{"_index":21,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["rights",{"_index":1117,"title":{},"body":{"license.html":{}}}],["row",{"_index":163,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":795,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["rxjs",{"_index":61,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["rxjs/operators",{"_index":70,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["same",{"_index":279,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["scroll",{"_index":742,"title":{},"body":{"changelog.html":{}}}],["scrollleft",{"_index":22,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["scrolltop",{"_index":23,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["se",{"_index":161,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["seamless",{"_index":778,"title":{},"body":{"changelog.html":{}}}],["see",{"_index":274,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["selected",{"_index":857,"title":{},"body":{"changelog.html":{}}}],["selector",{"_index":193,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["selectors",{"_index":905,"title":{},"body":{"changelog.html":{}}}],["sell",{"_index":1122,"title":{},"body":{"license.html":{}}}],["server",{"_index":1086,"title":{},"body":{"index.html":{}}}],["set",{"_index":209,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["setelementclass(elm",{"_index":398,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["setting",{"_index":976,"title":{},"body":{"changelog.html":{}}}],["shall",{"_index":1130,"title":{},"body":{"license.html":{}}}],["share",{"_index":68,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["shared",{"_index":781,"title":{},"body":{"changelog.html":{}}}],["show",{"_index":1014,"title":{},"body":{"changelog.html":{}}}],["shown",{"_index":731,"title":{},"body":{"changelog.html":{}}}],["sibling",{"_index":191,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["sizing",{"_index":1061,"title":{},"body":{"index.html":{}}}],["snap",{"_index":219,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["snapgrid",{"_index":307,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["snapgrid.x",{"_index":310,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["snapgrid.y",{"_index":315,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["software",{"_index":1110,"title":{},"body":{"license.html":{}}}],["solid",{"_index":1056,"title":{},"body":{"index.html":{}}}],["somewhere",{"_index":280,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"index.html":{}}}],["specify",{"_index":983,"title":{},"body":{"changelog.html":{}}}],["standard",{"_index":547,"title":{},"body":{"changelog.html":{}}}],["start",{"_index":768,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["startcoords.clientx",{"_index":303,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["startcoords.clienty",{"_index":305,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["started",{"_index":541,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["starting",{"_index":931,"title":{},"body":{"changelog.html":{}}}],["startingrect",{"_index":93,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["startingrect.bottom",{"_index":97,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["startingrect.left",{"_index":98,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["startingrect.right",{"_index":99,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["startingrect.top",{"_index":96,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["state",{"_index":806,"title":{},"body":{"changelog.html":{}}}],["static",{"_index":406,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["string",{"_index":28,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["style",{"_index":116,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["style[property",{"_index":124,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["styles",{"_index":974,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["styling",{"_index":925,"title":{},"body":{"changelog.html":{}}}],["subject",{"_index":57,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"license.html":{}}}],["sublicense",{"_index":1120,"title":{},"body":{"license.html":{}}}],["subscribe((edges",{"_index":359,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["subscribe((event",{"_index":508,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["subscribe((newboundingrect",{"_index":347,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["subscribers",{"_index":614,"title":{},"body":{"changelog.html":{}}}],["substantial",{"_index":1132,"title":{},"body":{"license.html":{}}}],["suffix",{"_index":695,"title":{},"body":{"changelog.html":{}}}],["support",{"_index":875,"title":{},"body":{"changelog.html":{}}}],["sw",{"_index":160,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["sync",{"_index":1003,"title":{},"body":{"changelog.html":{}}}],["system.js",{"_index":723,"title":{},"body":{"changelog.html":{}}}],["table",{"_index":1029,"title":{},"body":{"index.html":{}}}],["take",{"_index":67,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["takeuntil",{"_index":64,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["takeuntil(this.destroy",{"_index":346,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["tap",{"_index":69,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["template",{"_index":877,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["temporary",{"_index":211,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["test",{"_index":1092,"title":{},"body":{"index.html":{}}}],["test:watch",{"_index":1094,"title":{},"body":{"index.html":{}}}],["testing",{"_index":1091,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1090,"title":{},"body":{"index.html":{}}}],["text",{"_index":855,"title":{},"body":{"changelog.html":{}}}],["this.allownegativeresizes",{"_index":344,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.destroy$.next",{"_index":397,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["this.element.nativeelement",{"_index":514,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.elm",{"_index":360,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.elm.nativeelement",{"_index":369,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.elm.nativeelement.parentelement.appendchild",{"_index":368,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.elm.nativeelement.parentelement.removechild",{"_index":293,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.enableghostresize",{"_index":366,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.eventlisteners.mousemove",{"_index":519,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.eventlisteners.touchmove",{"_index":512,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.eventlisteners[type",{"_index":536,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.ghostelementpositioning",{"_index":361,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.listenonthehost('mousedown').subscribe((event",{"_index":500,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.listenonthehost('mouseup').subscribe((event",{"_index":502,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.listenonthehost('touchcancel",{"_index":507,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.listenonthehost('touchend",{"_index":506,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.listenonthehost('touchstart').subscribe((event",{"_index":504,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.mousedown",{"_index":264,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mousedown.complete",{"_index":394,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mousemove",{"_index":266,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mousemove.complete",{"_index":396,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mouseup",{"_index":286,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mouseup.complete",{"_index":395,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.onmousedown",{"_index":505,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.onmousedown(event",{"_index":501,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.onmousemove",{"_index":516,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.onmouseup",{"_index":509,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.onmouseup(event.clientx",{"_index":503,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.pointerdown",{"_index":411,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointereventlisteners",{"_index":259,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointereventlisteners.pointermove",{"_index":265,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointermove",{"_index":423,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointerup",{"_index":429,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.addclass",{"_index":375,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.addclass(elm.nativeelement",{"_index":401,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.listen",{"_index":513,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.renderer.removeclass(elm.nativeelement",{"_index":402,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.removeclass(this.elm.nativeelement",{"_index":383,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.setstyle",{"_index":348,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.setstyle(document.body",{"_index":364,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.setstyle(this.elm.nativeelement",{"_index":294,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizable.mousedown.next",{"_index":523,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.resizable.mousemove.next",{"_index":531,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.resizable.mouseup.next",{"_index":526,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.resizablecontainer",{"_index":529,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.resizabledirective",{"_index":528,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.resizecursors",{"_index":298,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizeedges",{"_index":524,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.resizeend.emit",{"_index":385,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizeend.observers.length",{"_index":384,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizesnapgrid.bottom",{"_index":316,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizesnapgrid.left",{"_index":308,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizesnapgrid.right",{"_index":311,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizesnapgrid.top",{"_index":313,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizestart.emit",{"_index":380,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizestart.observers.length",{"_index":379,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizing.emit",{"_index":355,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizing.observers.length",{"_index":353,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.setelementclass(this.elm",{"_index":365,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.unsubscribeeventlisteners",{"_index":510,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.validateresize",{"_index":345,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.zone.run",{"_index":354,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.zone.runoutsideangular",{"_index":499,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["throttle",{"_index":234,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["through",{"_index":1038,"title":{},"body":{"index.html":{}}}],["throw",{"_index":670,"title":{},"body":{"changelog.html":{}}}],["times",{"_index":997,"title":{},"body":{"changelog.html":{}}}],["top",{"_index":24,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["topleft",{"_index":149,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["toporbottom",{"_index":154,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["topright",{"_index":150,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["tort",{"_index":1155,"title":{},"body":{"license.html":{}}}],["touch",{"_index":80,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["touchcancel",{"_index":436,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["touchend",{"_index":433,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["touchevent",{"_index":90,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["touchmove",{"_index":426,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["touchmoveevent",{"_index":515,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["touchmoveevent.targettouches[0].clientx",{"_index":517,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["touchmoveevent.targettouches[0].clienty",{"_index":518,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["touchstart",{"_index":419,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["transform",{"_index":119,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["transform.includes('translate",{"_index":127,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["transform.replace",{"_index":128,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["transformproperties",{"_index":118,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["transforms",{"_index":621,"title":{},"body":{"changelog.html":{}}}],["translate3?d",{"_index":129,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["translate3d",{"_index":630,"title":{},"body":{"changelog.html":{}}}],["translatex",{"_index":113,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["translatey",{"_index":115,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["trigger",{"_index":496,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["triggered",{"_index":438,"title":{},"body":{"interfaces/Edges.html":{}}}],["triggers",{"_index":748,"title":{},"body":{"changelog.html":{}}}],["true",{"_index":202,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["try",{"_index":269,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["type",{"_index":34,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":991,"title":{},"body":{"changelog.html":{}}}],["typescript",{"_index":1007,"title":{},"body":{"changelog.html":{}}}],["typings",{"_index":869,"title":{},"body":{"changelog.html":{}}}],["ui",{"_index":1004,"title":{},"body":{"changelog.html":{}}}],["umd",{"_index":715,"title":{},"body":{"changelog.html":{}}}],["uncancelled",{"_index":1001,"title":{},"body":{"changelog.html":{}}}],["undefined",{"_index":31,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["universal",{"_index":389,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["unsubscribe",{"_index":839,"title":{},"body":{"changelog.html":{}}}],["unsubscribeeventlisteners",{"_index":532,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["unsubscribemousedown",{"_index":412,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribemousemove",{"_index":424,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribemouseup",{"_index":430,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribetouchcancel",{"_index":432,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribetouchend",{"_index":431,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribetouchmove",{"_index":425,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribetouchstart",{"_index":413,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["until",{"_index":648,"title":{},"body":{"changelog.html":{}}}],["up",{"_index":938,"title":{},"body":{"changelog.html":{}}}],["update",{"_index":726,"title":{},"body":{"changelog.html":{}}}],["upgrade",{"_index":563,"title":{},"body":{"changelog.html":{}}}],["use",{"_index":560,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":482,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["useful",{"_index":1071,"title":{},"body":{"index.html":{}}}],["user",{"_index":999,"title":{},"body":{"changelog.html":{}}}],["users",{"_index":724,"title":{},"body":{"changelog.html":{}}}],["using",{"_index":592,"title":{},"body":{"changelog.html":{}}}],["util/clone",{"_index":83,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["util/is",{"_index":79,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["valid",{"_index":937,"title":{},"body":{"changelog.html":{}}}],["validate",{"_index":969,"title":{},"body":{"changelog.html":{}}}],["validated",{"_index":972,"title":{},"body":{"changelog.html":{}}}],["validateresize",{"_index":207,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["value",{"_index":126,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":979,"title":{},"body":{"changelog.html":{}}}],["variables",{"_index":1173,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":548,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["versions",{"_index":889,"title":{},"body":{"changelog.html":{}}}],["via",{"_index":852,"title":{},"body":{"changelog.html":{}}}],["view",{"_index":1072,"title":{},"body":{"index.html":{}}}],["viewed",{"_index":1074,"title":{},"body":{"index.html":{}}}],["visibility",{"_index":295,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["void",{"_index":262,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"index.html":{}}}],["w",{"_index":939,"title":{},"body":{"changelog.html":{}}}],["warning",{"_index":793,"title":{},"body":{"changelog.html":{}}}],["warranties",{"_index":1140,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1135,"title":{},"body":{"license.html":{}}}],["way",{"_index":971,"title":{},"body":{"changelog.html":{}}}],["webkit",{"_index":947,"title":{},"body":{"changelog.html":{}}}],["whether",{"_index":1152,"title":{},"body":{"license.html":{}}}],["width",{"_index":25,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["wip",{"_index":1011,"title":{},"body":{"changelog.html":{}}}],["within",{"_index":758,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["without",{"_index":1113,"title":{},"body":{"license.html":{}}}],["work",{"_index":1062,"title":{},"body":{"index.html":{}}}],["writing",{"_index":284,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["x",{"_index":40,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["y",{"_index":41,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["yourself",{"_index":712,"title":{},"body":{"changelog.html":{}}}],["zone",{"_index":258,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["zone.runoutsideangular",{"_index":414,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/BoundingRectangle.html":{"url":"interfaces/BoundingRectangle.html","title":"interface - BoundingRectangle","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BoundingRectangle\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-resizable-element/src/lib/interfaces/bounding-rectangle.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                The bounding rectangle of the resized element\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            bottom\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            height\n                                        \n                                \n                                \n                                        \n                                            left\n                                        \n                                \n                                \n                                        \n                                            right\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            scrollLeft\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            scrollTop\n                                        \n                                \n                                \n                                        \n                                            top\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            width\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    number | undefined\n\n                    \n                \n                        \n                            \n                                Defined in projects/angular-resizable-element/src/lib/interfaces/bounding-rectangle.interface.ts:12\n                            \n                        \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bottom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bottom:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        left\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        left:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        right\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        right:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scrollLeft\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scrollLeft:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scrollTop\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scrollTop:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        top\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        top:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface BoundingRectangle {\n  top: number;\n  bottom: number;\n  left: number;\n  right: number;\n  height?: number;\n  width?: number;\n  scrollTop?: number;\n  scrollLeft?: number;\n  [key: string]: number | undefined;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Coordinate.html":{"url":"interfaces/Coordinate.html","title":"interface - Coordinate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Coordinate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-resizable-element/src/lib/resizable.directive.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone,\n  Inject,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Subject, Observable, Observer, merge } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  filter,\n  pairwise,\n  take,\n  share,\n  tap,\n} from 'rxjs/operators';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\nimport { IS_TOUCH_DEVICE } from './util/is-touch-device';\nimport { deepCloneNode } from './util/clone-node';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction getNewBoundingRectangle(\n  startingRect: BoundingRectangle,\n  edges: Edges,\n  clientX: number,\n  clientY: number\n): BoundingRectangle {\n  const newBoundingRect: BoundingRectangle = {\n    top: startingRect.top,\n    bottom: startingRect.bottom,\n    left: startingRect.left,\n    right: startingRect.right,\n  };\n\n  if (edges.top) {\n    newBoundingRect.top += clientY;\n  }\n  if (edges.bottom) {\n    newBoundingRect.bottom += clientY;\n  }\n  if (edges.left) {\n    newBoundingRect.left += clientX;\n  }\n  if (edges.right) {\n    newBoundingRect.right += clientX;\n  }\n  newBoundingRect.height = newBoundingRect.bottom - newBoundingRect.top;\n  newBoundingRect.width = newBoundingRect.right - newBoundingRect.left;\n\n  return newBoundingRect;\n}\n\nfunction getElementRect(\n  element: ElementRef,\n  ghostElementPositioning: string\n): BoundingRectangle {\n  let translateX = 0;\n  let translateY = 0;\n  const style = element.nativeElement.style;\n  const transformProperties = [\n    'transform',\n    '-ms-transform',\n    '-moz-transform',\n    '-o-transform',\n  ];\n  const transform = transformProperties\n    .map((property) => style[property])\n    .find((value) => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(\n      /.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/,\n      '$1'\n    );\n    translateY = transform.replace(\n      /.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/,\n      '$2'\n    );\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX,\n    };\n  } else {\n    const boundingRect: BoundingRectangle =\n      element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft,\n    };\n  }\n}\n\nexport interface ResizeCursors {\n  topLeft: string;\n  topRight: string;\n  bottomLeft: string;\n  bottomRight: string;\n  leftOrRight: string;\n  topOrBottom: string;\n}\n\nconst DEFAULT_RESIZE_CURSORS: ResizeCursors = Object.freeze({\n  topLeft: 'nw-resize',\n  topRight: 'ne-resize',\n  bottomLeft: 'sw-resize',\n  bottomRight: 'se-resize',\n  leftOrRight: 'col-resize',\n  topOrBottom: 'row-resize',\n});\n\nfunction getResizeCursor(edges: Edges, cursors: ResizeCursors): string {\n  if (edges.left && edges.top) {\n    return cursors.topLeft;\n  } else if (edges.right && edges.top) {\n    return cursors.topRight;\n  } else if (edges.left && edges.bottom) {\n    return cursors.bottomLeft;\n  } else if (edges.right && edges.bottom) {\n    return cursors.bottomRight;\n  } else if (edges.left || edges.right) {\n    return cursors.leftOrRight;\n  } else if (edges.top || edges.bottom) {\n    return cursors.topOrBottom;\n  } else {\n    return '';\n  }\n}\n\nfunction getEdgesDiff({\n  edges,\n  initialRectangle,\n  newRectangle,\n}: {\n  edges: Edges;\n  initialRectangle: BoundingRectangle;\n  newRectangle: BoundingRectangle;\n}): Edges {\n  const edgesDiff: Edges = {};\n  Object.keys(edges).forEach((edge) => {\n    edgesDiff[edge] = (newRectangle[edge] || 0) - (initialRectangle[edge] || 0);\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * \n * \n * ```\n * Or in case they are sibling elements:\n * ```html\n * \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizable]',\n  exportAs: 'mwlResizable',\n})\nexport class ResizableDirective implements OnInit, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: ResizeCursors = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Allow elements to be resized to negative dimensions\n   */\n  @Input() allowNegativeResizes: boolean = false;\n\n  /**\n   * The mouse move throttle in milliseconds, default: 50 ms\n   */\n  @Input() mouseMoveThrottleMS: number = MOUSE_MOVE_THROTTLE_MS;\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private destroy$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: any,\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    const mousedown$: Observable = merge(this.pointerEventListeners.pointerDown, this.mousedown);\n\n    const mousemove$ = merge(\n      this.pointerEventListeners.pointerMove,\n      this.mousemove\n    ).pipe(\n      tap(({ event }) => {\n        if (currentResize) {\n          try {\n            event.preventDefault();\n          } catch (e) {\n            // just adding try-catch not to see errors in console if there is a passive listener for same event somewhere\n            // browser does nothing except of writing errors to console\n          }\n        }\n      }),\n      share()\n    );\n\n    const mouseup$ = merge(this.pointerEventListeners.pointerUp, this.mouseup);\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const getResizeCursors = (): ResizeCursors => {\n      return {\n        ...DEFAULT_RESIZE_CURSORS,\n        ...this.resizeCursors,\n      };\n    };\n\n    const mousedrag: Observable = mousedown$\n      .pipe(\n        mergeMap((startCoords) => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY,\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y),\n            };\n          }\n\n          return (\n            merge(\n              mousemove$.pipe(take(1)).pipe(map((coords) => [, coords])),\n              mousemove$.pipe(pairwise())\n            ) as Observable\n          )\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords),\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y,\n                };\n              })\n            )\n            .pipe(takeUntil(merge(mouseup$, mousedown$)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return (\n            this.allowNegativeResizes ||\n            !!(\n              newBoundingRect.height &&\n              newBoundingRect.width &&\n              newBoundingRect.height > 0 &&\n              newBoundingRect.width > 0\n            )\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect,\n                }),\n              })\n            : true;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        if (this.resizing.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizing.emit({\n              edges: getEdgesDiff({\n                edges: currentResize!.edges,\n                initialRectangle: currentResize!.startingRect,\n                newRectangle: newBoundingRect,\n              }),\n              rectangle: newBoundingRect,\n            });\n          });\n        }\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    mousedown$\n      .pipe(\n        map(({ edges }) => {\n          return edges || {};\n        }),\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect,\n        };\n        const resizeCursors = getResizeCursors();\n        const cursor = getResizeCursor(currentResize.edges, resizeCursors);\n        this.renderer.setStyle(document.body, 'cursor', cursor);\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, true);\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = deepCloneNode(this.elm.nativeElement);\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        if (this.resizeStart.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizeStart.emit({\n              edges: getEdgesDiff({\n                edges,\n                initialRectangle: startingRect,\n                newRectangle: startingRect,\n              }),\n              rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0),\n            });\n          });\n        }\n      });\n\n    mouseup$.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        if (this.resizeEnd.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizeEnd.emit({\n              edges: getEdgesDiff({\n                edges: currentResize!.edges,\n                initialRectangle: currentResize!.startingRect,\n                newRectangle: currentResize!.currentRect,\n              }),\n              rectangle: currentResize!.currentRect,\n            });\n          });\n        }\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    // browser check for angular universal, because it doesn't know what document is\n    if (isPlatformBrowser(this.platformId)) {\n      this.renderer.setStyle(document.body, 'cursor', '');\n    }\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.destroy$.next();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable;\n\n  public pointerMove: Observable;\n\n  public pointerUp: Observable;\n\n  private static instance: PointerEventListeners;\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event,\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchStart = renderer.listen(\n              'document',\n              'touchstart',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.touches[0].clientX,\n                  clientY: event.touches[0].clientY,\n                  event,\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchStart!();\n          }\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event,\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchMove = renderer.listen(\n              'document',\n              'touchmove',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.targetTouches[0].clientX,\n                  clientY: event.targetTouches[0].clientY,\n                  event,\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchMove!();\n          }\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: (() => void) | undefined;\n        let unsubscribeTouchCancel: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event,\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchEnd = renderer.listen(\n              'document',\n              'touchend',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.changedTouches[0].clientX,\n                  clientY: event.changedTouches[0].clientY,\n                  event,\n                });\n              }\n            );\n\n            unsubscribeTouchCancel = renderer.listen(\n              'document',\n              'touchcancel',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.changedTouches[0].clientX,\n                  clientY: event.changedTouches[0].clientY,\n                  event,\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchEnd!();\n            unsubscribeTouchCancel!();\n          }\n        };\n      }\n    ).pipe(share());\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Edges.html":{"url":"interfaces/Edges.html","title":"interface - Edges","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Edges\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-resizable-element/src/lib/interfaces/edges.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                The edges that the resize event were triggered on\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            bottom\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            left\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            right\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            top\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    boolean | number | undefined\n\n                    \n                \n                        \n                            \n                                Defined in projects/angular-resizable-element/src/lib/interfaces/edges.interface.ts:8\n                            \n                        \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bottom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bottom:     boolean | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        left\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        left:     boolean | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        right\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        right:     boolean | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        top\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        top:     boolean | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Edges {\n  top?: boolean | number;\n  bottom?: boolean | number;\n  left?: boolean | number;\n  right?: boolean | number;\n  [key: string]: boolean | number | undefined;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PointerEventCoordinate.html":{"url":"interfaces/PointerEventCoordinate.html","title":"interface - PointerEventCoordinate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PointerEventCoordinate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-resizable-element/src/lib/resizable.directive.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            clientX\n                                        \n                                \n                                \n                                        \n                                            clientY\n                                        \n                                \n                                \n                                        \n                                            event\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clientX\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clientX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clientY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clientY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        event\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        event:     MouseEvent | TouchEvent\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MouseEvent | TouchEvent\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone,\n  Inject,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Subject, Observable, Observer, merge } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  filter,\n  pairwise,\n  take,\n  share,\n  tap,\n} from 'rxjs/operators';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\nimport { IS_TOUCH_DEVICE } from './util/is-touch-device';\nimport { deepCloneNode } from './util/clone-node';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction getNewBoundingRectangle(\n  startingRect: BoundingRectangle,\n  edges: Edges,\n  clientX: number,\n  clientY: number\n): BoundingRectangle {\n  const newBoundingRect: BoundingRectangle = {\n    top: startingRect.top,\n    bottom: startingRect.bottom,\n    left: startingRect.left,\n    right: startingRect.right,\n  };\n\n  if (edges.top) {\n    newBoundingRect.top += clientY;\n  }\n  if (edges.bottom) {\n    newBoundingRect.bottom += clientY;\n  }\n  if (edges.left) {\n    newBoundingRect.left += clientX;\n  }\n  if (edges.right) {\n    newBoundingRect.right += clientX;\n  }\n  newBoundingRect.height = newBoundingRect.bottom - newBoundingRect.top;\n  newBoundingRect.width = newBoundingRect.right - newBoundingRect.left;\n\n  return newBoundingRect;\n}\n\nfunction getElementRect(\n  element: ElementRef,\n  ghostElementPositioning: string\n): BoundingRectangle {\n  let translateX = 0;\n  let translateY = 0;\n  const style = element.nativeElement.style;\n  const transformProperties = [\n    'transform',\n    '-ms-transform',\n    '-moz-transform',\n    '-o-transform',\n  ];\n  const transform = transformProperties\n    .map((property) => style[property])\n    .find((value) => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(\n      /.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/,\n      '$1'\n    );\n    translateY = transform.replace(\n      /.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/,\n      '$2'\n    );\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX,\n    };\n  } else {\n    const boundingRect: BoundingRectangle =\n      element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft,\n    };\n  }\n}\n\nexport interface ResizeCursors {\n  topLeft: string;\n  topRight: string;\n  bottomLeft: string;\n  bottomRight: string;\n  leftOrRight: string;\n  topOrBottom: string;\n}\n\nconst DEFAULT_RESIZE_CURSORS: ResizeCursors = Object.freeze({\n  topLeft: 'nw-resize',\n  topRight: 'ne-resize',\n  bottomLeft: 'sw-resize',\n  bottomRight: 'se-resize',\n  leftOrRight: 'col-resize',\n  topOrBottom: 'row-resize',\n});\n\nfunction getResizeCursor(edges: Edges, cursors: ResizeCursors): string {\n  if (edges.left && edges.top) {\n    return cursors.topLeft;\n  } else if (edges.right && edges.top) {\n    return cursors.topRight;\n  } else if (edges.left && edges.bottom) {\n    return cursors.bottomLeft;\n  } else if (edges.right && edges.bottom) {\n    return cursors.bottomRight;\n  } else if (edges.left || edges.right) {\n    return cursors.leftOrRight;\n  } else if (edges.top || edges.bottom) {\n    return cursors.topOrBottom;\n  } else {\n    return '';\n  }\n}\n\nfunction getEdgesDiff({\n  edges,\n  initialRectangle,\n  newRectangle,\n}: {\n  edges: Edges;\n  initialRectangle: BoundingRectangle;\n  newRectangle: BoundingRectangle;\n}): Edges {\n  const edgesDiff: Edges = {};\n  Object.keys(edges).forEach((edge) => {\n    edgesDiff[edge] = (newRectangle[edge] || 0) - (initialRectangle[edge] || 0);\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * \n * \n * ```\n * Or in case they are sibling elements:\n * ```html\n * \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizable]',\n  exportAs: 'mwlResizable',\n})\nexport class ResizableDirective implements OnInit, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: ResizeCursors = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Allow elements to be resized to negative dimensions\n   */\n  @Input() allowNegativeResizes: boolean = false;\n\n  /**\n   * The mouse move throttle in milliseconds, default: 50 ms\n   */\n  @Input() mouseMoveThrottleMS: number = MOUSE_MOVE_THROTTLE_MS;\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private destroy$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: any,\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    const mousedown$: Observable = merge(this.pointerEventListeners.pointerDown, this.mousedown);\n\n    const mousemove$ = merge(\n      this.pointerEventListeners.pointerMove,\n      this.mousemove\n    ).pipe(\n      tap(({ event }) => {\n        if (currentResize) {\n          try {\n            event.preventDefault();\n          } catch (e) {\n            // just adding try-catch not to see errors in console if there is a passive listener for same event somewhere\n            // browser does nothing except of writing errors to console\n          }\n        }\n      }),\n      share()\n    );\n\n    const mouseup$ = merge(this.pointerEventListeners.pointerUp, this.mouseup);\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const getResizeCursors = (): ResizeCursors => {\n      return {\n        ...DEFAULT_RESIZE_CURSORS,\n        ...this.resizeCursors,\n      };\n    };\n\n    const mousedrag: Observable = mousedown$\n      .pipe(\n        mergeMap((startCoords) => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY,\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y),\n            };\n          }\n\n          return (\n            merge(\n              mousemove$.pipe(take(1)).pipe(map((coords) => [, coords])),\n              mousemove$.pipe(pairwise())\n            ) as Observable\n          )\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords),\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y,\n                };\n              })\n            )\n            .pipe(takeUntil(merge(mouseup$, mousedown$)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return (\n            this.allowNegativeResizes ||\n            !!(\n              newBoundingRect.height &&\n              newBoundingRect.width &&\n              newBoundingRect.height > 0 &&\n              newBoundingRect.width > 0\n            )\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect,\n                }),\n              })\n            : true;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        if (this.resizing.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizing.emit({\n              edges: getEdgesDiff({\n                edges: currentResize!.edges,\n                initialRectangle: currentResize!.startingRect,\n                newRectangle: newBoundingRect,\n              }),\n              rectangle: newBoundingRect,\n            });\n          });\n        }\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    mousedown$\n      .pipe(\n        map(({ edges }) => {\n          return edges || {};\n        }),\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect,\n        };\n        const resizeCursors = getResizeCursors();\n        const cursor = getResizeCursor(currentResize.edges, resizeCursors);\n        this.renderer.setStyle(document.body, 'cursor', cursor);\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, true);\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = deepCloneNode(this.elm.nativeElement);\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        if (this.resizeStart.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizeStart.emit({\n              edges: getEdgesDiff({\n                edges,\n                initialRectangle: startingRect,\n                newRectangle: startingRect,\n              }),\n              rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0),\n            });\n          });\n        }\n      });\n\n    mouseup$.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        if (this.resizeEnd.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizeEnd.emit({\n              edges: getEdgesDiff({\n                edges: currentResize!.edges,\n                initialRectangle: currentResize!.startingRect,\n                newRectangle: currentResize!.currentRect,\n              }),\n              rectangle: currentResize!.currentRect,\n            });\n          });\n        }\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    // browser check for angular universal, because it doesn't know what document is\n    if (isPlatformBrowser(this.platformId)) {\n      this.renderer.setStyle(document.body, 'cursor', '');\n    }\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.destroy$.next();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable;\n\n  public pointerMove: Observable;\n\n  public pointerUp: Observable;\n\n  private static instance: PointerEventListeners;\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event,\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchStart = renderer.listen(\n              'document',\n              'touchstart',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.touches[0].clientX,\n                  clientY: event.touches[0].clientY,\n                  event,\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchStart!();\n          }\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event,\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchMove = renderer.listen(\n              'document',\n              'touchmove',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.targetTouches[0].clientX,\n                  clientY: event.targetTouches[0].clientY,\n                  event,\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchMove!();\n          }\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: (() => void) | undefined;\n        let unsubscribeTouchCancel: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event,\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchEnd = renderer.listen(\n              'document',\n              'touchend',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.changedTouches[0].clientX,\n                  clientY: event.changedTouches[0].clientY,\n                  event,\n                });\n              }\n            );\n\n            unsubscribeTouchCancel = renderer.listen(\n              'document',\n              'touchcancel',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.changedTouches[0].clientX,\n                  clientY: event.changedTouches[0].clientY,\n                  event,\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchEnd!();\n            unsubscribeTouchCancel!();\n          }\n        };\n      }\n    ).pipe(share());\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PointerEventListeners.html":{"url":"classes/PointerEventListeners.html","title":"class - PointerEventListeners","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PointerEventListeners\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-resizable-element/src/lib/resizable.directive.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                pointerDown\n                            \n                            \n                                    Public\n                                pointerMove\n                            \n                            \n                                    Public\n                                pointerUp\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getInstance\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(renderer: Renderer2, zone: NgZone)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-resizable-element/src/lib/resizable.directive.ts:694\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                        Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        zone\n                                                  \n                                                        \n                                                                        NgZone\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pointerDown\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-resizable-element/src/lib/resizable.directive.ts:675\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pointerMove\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-resizable-element/src/lib/resizable.directive.ts:677\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pointerUp\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-resizable-element/src/lib/resizable.directive.ts:679\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getInstance\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInstance(renderer: Renderer2, zone: NgZone)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-resizable-element/src/lib/resizable.directive.ts:683\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                Renderer2\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    zone\n                                    \n                                                NgZone\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PointerEventListeners\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone,\n  Inject,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Subject, Observable, Observer, merge } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  filter,\n  pairwise,\n  take,\n  share,\n  tap,\n} from 'rxjs/operators';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\nimport { IS_TOUCH_DEVICE } from './util/is-touch-device';\nimport { deepCloneNode } from './util/clone-node';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction getNewBoundingRectangle(\n  startingRect: BoundingRectangle,\n  edges: Edges,\n  clientX: number,\n  clientY: number\n): BoundingRectangle {\n  const newBoundingRect: BoundingRectangle = {\n    top: startingRect.top,\n    bottom: startingRect.bottom,\n    left: startingRect.left,\n    right: startingRect.right,\n  };\n\n  if (edges.top) {\n    newBoundingRect.top += clientY;\n  }\n  if (edges.bottom) {\n    newBoundingRect.bottom += clientY;\n  }\n  if (edges.left) {\n    newBoundingRect.left += clientX;\n  }\n  if (edges.right) {\n    newBoundingRect.right += clientX;\n  }\n  newBoundingRect.height = newBoundingRect.bottom - newBoundingRect.top;\n  newBoundingRect.width = newBoundingRect.right - newBoundingRect.left;\n\n  return newBoundingRect;\n}\n\nfunction getElementRect(\n  element: ElementRef,\n  ghostElementPositioning: string\n): BoundingRectangle {\n  let translateX = 0;\n  let translateY = 0;\n  const style = element.nativeElement.style;\n  const transformProperties = [\n    'transform',\n    '-ms-transform',\n    '-moz-transform',\n    '-o-transform',\n  ];\n  const transform = transformProperties\n    .map((property) => style[property])\n    .find((value) => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(\n      /.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/,\n      '$1'\n    );\n    translateY = transform.replace(\n      /.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/,\n      '$2'\n    );\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX,\n    };\n  } else {\n    const boundingRect: BoundingRectangle =\n      element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft,\n    };\n  }\n}\n\nexport interface ResizeCursors {\n  topLeft: string;\n  topRight: string;\n  bottomLeft: string;\n  bottomRight: string;\n  leftOrRight: string;\n  topOrBottom: string;\n}\n\nconst DEFAULT_RESIZE_CURSORS: ResizeCursors = Object.freeze({\n  topLeft: 'nw-resize',\n  topRight: 'ne-resize',\n  bottomLeft: 'sw-resize',\n  bottomRight: 'se-resize',\n  leftOrRight: 'col-resize',\n  topOrBottom: 'row-resize',\n});\n\nfunction getResizeCursor(edges: Edges, cursors: ResizeCursors): string {\n  if (edges.left && edges.top) {\n    return cursors.topLeft;\n  } else if (edges.right && edges.top) {\n    return cursors.topRight;\n  } else if (edges.left && edges.bottom) {\n    return cursors.bottomLeft;\n  } else if (edges.right && edges.bottom) {\n    return cursors.bottomRight;\n  } else if (edges.left || edges.right) {\n    return cursors.leftOrRight;\n  } else if (edges.top || edges.bottom) {\n    return cursors.topOrBottom;\n  } else {\n    return '';\n  }\n}\n\nfunction getEdgesDiff({\n  edges,\n  initialRectangle,\n  newRectangle,\n}: {\n  edges: Edges;\n  initialRectangle: BoundingRectangle;\n  newRectangle: BoundingRectangle;\n}): Edges {\n  const edgesDiff: Edges = {};\n  Object.keys(edges).forEach((edge) => {\n    edgesDiff[edge] = (newRectangle[edge] || 0) - (initialRectangle[edge] || 0);\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * \n * \n * ```\n * Or in case they are sibling elements:\n * ```html\n * \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizable]',\n  exportAs: 'mwlResizable',\n})\nexport class ResizableDirective implements OnInit, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: ResizeCursors = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Allow elements to be resized to negative dimensions\n   */\n  @Input() allowNegativeResizes: boolean = false;\n\n  /**\n   * The mouse move throttle in milliseconds, default: 50 ms\n   */\n  @Input() mouseMoveThrottleMS: number = MOUSE_MOVE_THROTTLE_MS;\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private destroy$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: any,\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    const mousedown$: Observable = merge(this.pointerEventListeners.pointerDown, this.mousedown);\n\n    const mousemove$ = merge(\n      this.pointerEventListeners.pointerMove,\n      this.mousemove\n    ).pipe(\n      tap(({ event }) => {\n        if (currentResize) {\n          try {\n            event.preventDefault();\n          } catch (e) {\n            // just adding try-catch not to see errors in console if there is a passive listener for same event somewhere\n            // browser does nothing except of writing errors to console\n          }\n        }\n      }),\n      share()\n    );\n\n    const mouseup$ = merge(this.pointerEventListeners.pointerUp, this.mouseup);\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const getResizeCursors = (): ResizeCursors => {\n      return {\n        ...DEFAULT_RESIZE_CURSORS,\n        ...this.resizeCursors,\n      };\n    };\n\n    const mousedrag: Observable = mousedown$\n      .pipe(\n        mergeMap((startCoords) => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY,\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y),\n            };\n          }\n\n          return (\n            merge(\n              mousemove$.pipe(take(1)).pipe(map((coords) => [, coords])),\n              mousemove$.pipe(pairwise())\n            ) as Observable\n          )\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords),\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y,\n                };\n              })\n            )\n            .pipe(takeUntil(merge(mouseup$, mousedown$)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return (\n            this.allowNegativeResizes ||\n            !!(\n              newBoundingRect.height &&\n              newBoundingRect.width &&\n              newBoundingRect.height > 0 &&\n              newBoundingRect.width > 0\n            )\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect,\n                }),\n              })\n            : true;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        if (this.resizing.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizing.emit({\n              edges: getEdgesDiff({\n                edges: currentResize!.edges,\n                initialRectangle: currentResize!.startingRect,\n                newRectangle: newBoundingRect,\n              }),\n              rectangle: newBoundingRect,\n            });\n          });\n        }\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    mousedown$\n      .pipe(\n        map(({ edges }) => {\n          return edges || {};\n        }),\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect,\n        };\n        const resizeCursors = getResizeCursors();\n        const cursor = getResizeCursor(currentResize.edges, resizeCursors);\n        this.renderer.setStyle(document.body, 'cursor', cursor);\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, true);\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = deepCloneNode(this.elm.nativeElement);\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        if (this.resizeStart.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizeStart.emit({\n              edges: getEdgesDiff({\n                edges,\n                initialRectangle: startingRect,\n                newRectangle: startingRect,\n              }),\n              rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0),\n            });\n          });\n        }\n      });\n\n    mouseup$.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        if (this.resizeEnd.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizeEnd.emit({\n              edges: getEdgesDiff({\n                edges: currentResize!.edges,\n                initialRectangle: currentResize!.startingRect,\n                newRectangle: currentResize!.currentRect,\n              }),\n              rectangle: currentResize!.currentRect,\n            });\n          });\n        }\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    // browser check for angular universal, because it doesn't know what document is\n    if (isPlatformBrowser(this.platformId)) {\n      this.renderer.setStyle(document.body, 'cursor', '');\n    }\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.destroy$.next();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable;\n\n  public pointerMove: Observable;\n\n  public pointerUp: Observable;\n\n  private static instance: PointerEventListeners;\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event,\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchStart = renderer.listen(\n              'document',\n              'touchstart',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.touches[0].clientX,\n                  clientY: event.touches[0].clientY,\n                  event,\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchStart!();\n          }\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event,\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchMove = renderer.listen(\n              'document',\n              'touchmove',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.targetTouches[0].clientX,\n                  clientY: event.targetTouches[0].clientY,\n                  event,\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchMove!();\n          }\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: (() => void) | undefined;\n        let unsubscribeTouchCancel: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event,\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchEnd = renderer.listen(\n              'document',\n              'touchend',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.changedTouches[0].clientX,\n                  clientY: event.changedTouches[0].clientY,\n                  event,\n                });\n              }\n            );\n\n            unsubscribeTouchCancel = renderer.listen(\n              'document',\n              'touchcancel',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.changedTouches[0].clientX,\n                  clientY: event.changedTouches[0].clientY,\n                  event,\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchEnd!();\n            unsubscribeTouchCancel!();\n          }\n        };\n      }\n    ).pipe(share());\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/ResizableDirective.html":{"url":"directives/ResizableDirective.html","title":"directive - ResizableDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  ResizableDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-resizable-element/src/lib/resizable.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Place this on an element to make it resizable. For example:\n\nOr in case they are sibling elements:\n\n\n            \n\n\n            \n                Implements\n            \n            \n                            OnInit\n                            OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [mwlResizable]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                allowNegativeResizes\n                            \n                            \n                                enableGhostResize\n                            \n                            \n                                ghostElementPositioning\n                            \n                            \n                                mouseMoveThrottleMS\n                            \n                            \n                                resizeCursors\n                            \n                            \n                                resizeSnapGrid\n                            \n                            \n                                validateResize\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                resizeEnd\n                            \n                            \n                                resizeStart\n                            \n                            \n                                resizing\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        allowNegativeResizes\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-resizable-element/src/lib/resizable.directive.ts:240\n                            \n                        \n                \n                    \n                        Allow elements to be resized to negative dimensions\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        enableGhostResize\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-resizable-element/src/lib/resizable.directive.ts:218\n                            \n                        \n                \n                    \n                        Set to true to enable a temporary resizing effect of the element in between the resizeStart and resizeEnd events.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostElementPositioning\n                    \n                \n                \n                    \n                        Type :     \"fixed\" | \"absolute\"\n\n                    \n                \n                \n                    \n                        Default value : 'fixed'\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-resizable-element/src/lib/resizable.directive.ts:235\n                            \n                        \n                \n                    \n                        Define the positioning of the ghost element (can be fixed or absolute)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        mouseMoveThrottleMS\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : MOUSE_MOVE_THROTTLE_MS\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-resizable-element/src/lib/resizable.directive.ts:245\n                            \n                        \n                \n                    \n                        The mouse move throttle in milliseconds, default: 50 ms\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        resizeCursors\n                    \n                \n                \n                    \n                        Type :         ResizeCursors\n\n                    \n                \n                \n                    \n                        Default value : DEFAULT_RESIZE_CURSORS\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-resizable-element/src/lib/resizable.directive.ts:230\n                            \n                        \n                \n                    \n                        The mouse cursors that will be set on the resize edges\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        resizeSnapGrid\n                    \n                \n                \n                    \n                        Type :         Edges\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-resizable-element/src/lib/resizable.directive.ts:225\n                            \n                        \n                \n                    \n                        A snap grid that resize events will be locked to.\ne.g. to only allow the element to be resized every 10px set it to {left: 10, right: 10}\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        validateResize\n                    \n                \n                \n                    \n                        Type :         function\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-resizable-element/src/lib/resizable.directive.ts:213\n                            \n                        \n                \n                    \n                        A function that will be called before each resize event. Return true to allow the resize event to propagate or false to cancel it\n\n                    \n                \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        resizeEnd\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-resizable-element/src/lib/resizable.directive.ts:260\n                            \n                        \n                \n                    \n                        Called after the mouse is released after a resize event. $event is a ResizeEvent object.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        resizeStart\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-resizable-element/src/lib/resizable.directive.ts:250\n                            \n                        \n                \n                    \n                        Called when the mouse is pressed and a resize event is about to begin. $event is a ResizeEvent object.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        resizing\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-resizable-element/src/lib/resizable.directive.ts:255\n                            \n                        \n                \n                    \n                        Called as the mouse is dragged after a resize event has begun. $event is a ResizeEvent object.\n\n                    \n                \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone,\n  Inject,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Subject, Observable, Observer, merge } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  filter,\n  pairwise,\n  take,\n  share,\n  tap,\n} from 'rxjs/operators';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\nimport { IS_TOUCH_DEVICE } from './util/is-touch-device';\nimport { deepCloneNode } from './util/clone-node';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction getNewBoundingRectangle(\n  startingRect: BoundingRectangle,\n  edges: Edges,\n  clientX: number,\n  clientY: number\n): BoundingRectangle {\n  const newBoundingRect: BoundingRectangle = {\n    top: startingRect.top,\n    bottom: startingRect.bottom,\n    left: startingRect.left,\n    right: startingRect.right,\n  };\n\n  if (edges.top) {\n    newBoundingRect.top += clientY;\n  }\n  if (edges.bottom) {\n    newBoundingRect.bottom += clientY;\n  }\n  if (edges.left) {\n    newBoundingRect.left += clientX;\n  }\n  if (edges.right) {\n    newBoundingRect.right += clientX;\n  }\n  newBoundingRect.height = newBoundingRect.bottom - newBoundingRect.top;\n  newBoundingRect.width = newBoundingRect.right - newBoundingRect.left;\n\n  return newBoundingRect;\n}\n\nfunction getElementRect(\n  element: ElementRef,\n  ghostElementPositioning: string\n): BoundingRectangle {\n  let translateX = 0;\n  let translateY = 0;\n  const style = element.nativeElement.style;\n  const transformProperties = [\n    'transform',\n    '-ms-transform',\n    '-moz-transform',\n    '-o-transform',\n  ];\n  const transform = transformProperties\n    .map((property) => style[property])\n    .find((value) => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(\n      /.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/,\n      '$1'\n    );\n    translateY = transform.replace(\n      /.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/,\n      '$2'\n    );\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX,\n    };\n  } else {\n    const boundingRect: BoundingRectangle =\n      element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft,\n    };\n  }\n}\n\nexport interface ResizeCursors {\n  topLeft: string;\n  topRight: string;\n  bottomLeft: string;\n  bottomRight: string;\n  leftOrRight: string;\n  topOrBottom: string;\n}\n\nconst DEFAULT_RESIZE_CURSORS: ResizeCursors = Object.freeze({\n  topLeft: 'nw-resize',\n  topRight: 'ne-resize',\n  bottomLeft: 'sw-resize',\n  bottomRight: 'se-resize',\n  leftOrRight: 'col-resize',\n  topOrBottom: 'row-resize',\n});\n\nfunction getResizeCursor(edges: Edges, cursors: ResizeCursors): string {\n  if (edges.left && edges.top) {\n    return cursors.topLeft;\n  } else if (edges.right && edges.top) {\n    return cursors.topRight;\n  } else if (edges.left && edges.bottom) {\n    return cursors.bottomLeft;\n  } else if (edges.right && edges.bottom) {\n    return cursors.bottomRight;\n  } else if (edges.left || edges.right) {\n    return cursors.leftOrRight;\n  } else if (edges.top || edges.bottom) {\n    return cursors.topOrBottom;\n  } else {\n    return '';\n  }\n}\n\nfunction getEdgesDiff({\n  edges,\n  initialRectangle,\n  newRectangle,\n}: {\n  edges: Edges;\n  initialRectangle: BoundingRectangle;\n  newRectangle: BoundingRectangle;\n}): Edges {\n  const edgesDiff: Edges = {};\n  Object.keys(edges).forEach((edge) => {\n    edgesDiff[edge] = (newRectangle[edge] || 0) - (initialRectangle[edge] || 0);\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * \n * \n * ```\n * Or in case they are sibling elements:\n * ```html\n * \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizable]',\n  exportAs: 'mwlResizable',\n})\nexport class ResizableDirective implements OnInit, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: ResizeCursors = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Allow elements to be resized to negative dimensions\n   */\n  @Input() allowNegativeResizes: boolean = false;\n\n  /**\n   * The mouse move throttle in milliseconds, default: 50 ms\n   */\n  @Input() mouseMoveThrottleMS: number = MOUSE_MOVE_THROTTLE_MS;\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private destroy$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: any,\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    const mousedown$: Observable = merge(this.pointerEventListeners.pointerDown, this.mousedown);\n\n    const mousemove$ = merge(\n      this.pointerEventListeners.pointerMove,\n      this.mousemove\n    ).pipe(\n      tap(({ event }) => {\n        if (currentResize) {\n          try {\n            event.preventDefault();\n          } catch (e) {\n            // just adding try-catch not to see errors in console if there is a passive listener for same event somewhere\n            // browser does nothing except of writing errors to console\n          }\n        }\n      }),\n      share()\n    );\n\n    const mouseup$ = merge(this.pointerEventListeners.pointerUp, this.mouseup);\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const getResizeCursors = (): ResizeCursors => {\n      return {\n        ...DEFAULT_RESIZE_CURSORS,\n        ...this.resizeCursors,\n      };\n    };\n\n    const mousedrag: Observable = mousedown$\n      .pipe(\n        mergeMap((startCoords) => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY,\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y),\n            };\n          }\n\n          return (\n            merge(\n              mousemove$.pipe(take(1)).pipe(map((coords) => [, coords])),\n              mousemove$.pipe(pairwise())\n            ) as Observable\n          )\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords),\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y,\n                };\n              })\n            )\n            .pipe(takeUntil(merge(mouseup$, mousedown$)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return (\n            this.allowNegativeResizes ||\n            !!(\n              newBoundingRect.height &&\n              newBoundingRect.width &&\n              newBoundingRect.height > 0 &&\n              newBoundingRect.width > 0\n            )\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect,\n                }),\n              })\n            : true;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        if (this.resizing.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizing.emit({\n              edges: getEdgesDiff({\n                edges: currentResize!.edges,\n                initialRectangle: currentResize!.startingRect,\n                newRectangle: newBoundingRect,\n              }),\n              rectangle: newBoundingRect,\n            });\n          });\n        }\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    mousedown$\n      .pipe(\n        map(({ edges }) => {\n          return edges || {};\n        }),\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect,\n        };\n        const resizeCursors = getResizeCursors();\n        const cursor = getResizeCursor(currentResize.edges, resizeCursors);\n        this.renderer.setStyle(document.body, 'cursor', cursor);\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, true);\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = deepCloneNode(this.elm.nativeElement);\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        if (this.resizeStart.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizeStart.emit({\n              edges: getEdgesDiff({\n                edges,\n                initialRectangle: startingRect,\n                newRectangle: startingRect,\n              }),\n              rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0),\n            });\n          });\n        }\n      });\n\n    mouseup$.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        if (this.resizeEnd.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizeEnd.emit({\n              edges: getEdgesDiff({\n                edges: currentResize!.edges,\n                initialRectangle: currentResize!.startingRect,\n                newRectangle: currentResize!.currentRect,\n              }),\n              rectangle: currentResize!.currentRect,\n            });\n          });\n        }\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    // browser check for angular universal, because it doesn't know what document is\n    if (isPlatformBrowser(this.platformId)) {\n      this.renderer.setStyle(document.body, 'cursor', '');\n    }\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.destroy$.next();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable;\n\n  public pointerMove: Observable;\n\n  public pointerUp: Observable;\n\n  private static instance: PointerEventListeners;\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event,\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchStart = renderer.listen(\n              'document',\n              'touchstart',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.touches[0].clientX,\n                  clientY: event.touches[0].clientY,\n                  event,\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchStart!();\n          }\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event,\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchMove = renderer.listen(\n              'document',\n              'touchmove',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.targetTouches[0].clientX,\n                  clientY: event.targetTouches[0].clientY,\n                  event,\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchMove!();\n          }\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: (() => void) | undefined;\n        let unsubscribeTouchCancel: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event,\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchEnd = renderer.listen(\n              'document',\n              'touchend',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.changedTouches[0].clientX,\n                  clientY: event.changedTouches[0].clientY,\n                  event,\n                });\n              }\n            );\n\n            unsubscribeTouchCancel = renderer.listen(\n              'document',\n              'touchcancel',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.changedTouches[0].clientX,\n                  clientY: event.changedTouches[0].clientY,\n                  event,\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchEnd!();\n            unsubscribeTouchCancel!();\n          }\n        };\n      }\n    ).pipe(share());\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ResizableModule.html":{"url":"modules/ResizableModule.html","title":"module - ResizableModule","body":"\n                   \n\n\n\n\n    Modules\n    ResizableModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/angular-resizable-element/src/lib/resizable.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ResizableDirective\n                        \n                        \n                            ResizeHandleDirective\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ResizableDirective\n                        \n                        \n                            ResizeHandleDirective\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { ResizableDirective } from './resizable.directive';\nimport { ResizeHandleDirective } from './resize-handle.directive';\n\n@NgModule({\n  declarations: [ResizableDirective, ResizeHandleDirective],\n  exports: [ResizableDirective, ResizeHandleDirective],\n})\nexport class ResizableModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResizeCursors.html":{"url":"interfaces/ResizeCursors.html","title":"interface - ResizeCursors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ResizeCursors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-resizable-element/src/lib/resizable.directive.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            bottomLeft\n                                        \n                                \n                                \n                                        \n                                            bottomRight\n                                        \n                                \n                                \n                                        \n                                            leftOrRight\n                                        \n                                \n                                \n                                        \n                                            topLeft\n                                        \n                                \n                                \n                                        \n                                            topOrBottom\n                                        \n                                \n                                \n                                        \n                                            topRight\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bottomLeft\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bottomLeft:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bottomRight\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bottomRight:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        leftOrRight\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        leftOrRight:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topLeft\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        topLeft:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topOrBottom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        topOrBottom:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topRight\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        topRight:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone,\n  Inject,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Subject, Observable, Observer, merge } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  filter,\n  pairwise,\n  take,\n  share,\n  tap,\n} from 'rxjs/operators';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\nimport { IS_TOUCH_DEVICE } from './util/is-touch-device';\nimport { deepCloneNode } from './util/clone-node';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction getNewBoundingRectangle(\n  startingRect: BoundingRectangle,\n  edges: Edges,\n  clientX: number,\n  clientY: number\n): BoundingRectangle {\n  const newBoundingRect: BoundingRectangle = {\n    top: startingRect.top,\n    bottom: startingRect.bottom,\n    left: startingRect.left,\n    right: startingRect.right,\n  };\n\n  if (edges.top) {\n    newBoundingRect.top += clientY;\n  }\n  if (edges.bottom) {\n    newBoundingRect.bottom += clientY;\n  }\n  if (edges.left) {\n    newBoundingRect.left += clientX;\n  }\n  if (edges.right) {\n    newBoundingRect.right += clientX;\n  }\n  newBoundingRect.height = newBoundingRect.bottom - newBoundingRect.top;\n  newBoundingRect.width = newBoundingRect.right - newBoundingRect.left;\n\n  return newBoundingRect;\n}\n\nfunction getElementRect(\n  element: ElementRef,\n  ghostElementPositioning: string\n): BoundingRectangle {\n  let translateX = 0;\n  let translateY = 0;\n  const style = element.nativeElement.style;\n  const transformProperties = [\n    'transform',\n    '-ms-transform',\n    '-moz-transform',\n    '-o-transform',\n  ];\n  const transform = transformProperties\n    .map((property) => style[property])\n    .find((value) => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(\n      /.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/,\n      '$1'\n    );\n    translateY = transform.replace(\n      /.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/,\n      '$2'\n    );\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX,\n    };\n  } else {\n    const boundingRect: BoundingRectangle =\n      element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft,\n    };\n  }\n}\n\nexport interface ResizeCursors {\n  topLeft: string;\n  topRight: string;\n  bottomLeft: string;\n  bottomRight: string;\n  leftOrRight: string;\n  topOrBottom: string;\n}\n\nconst DEFAULT_RESIZE_CURSORS: ResizeCursors = Object.freeze({\n  topLeft: 'nw-resize',\n  topRight: 'ne-resize',\n  bottomLeft: 'sw-resize',\n  bottomRight: 'se-resize',\n  leftOrRight: 'col-resize',\n  topOrBottom: 'row-resize',\n});\n\nfunction getResizeCursor(edges: Edges, cursors: ResizeCursors): string {\n  if (edges.left && edges.top) {\n    return cursors.topLeft;\n  } else if (edges.right && edges.top) {\n    return cursors.topRight;\n  } else if (edges.left && edges.bottom) {\n    return cursors.bottomLeft;\n  } else if (edges.right && edges.bottom) {\n    return cursors.bottomRight;\n  } else if (edges.left || edges.right) {\n    return cursors.leftOrRight;\n  } else if (edges.top || edges.bottom) {\n    return cursors.topOrBottom;\n  } else {\n    return '';\n  }\n}\n\nfunction getEdgesDiff({\n  edges,\n  initialRectangle,\n  newRectangle,\n}: {\n  edges: Edges;\n  initialRectangle: BoundingRectangle;\n  newRectangle: BoundingRectangle;\n}): Edges {\n  const edgesDiff: Edges = {};\n  Object.keys(edges).forEach((edge) => {\n    edgesDiff[edge] = (newRectangle[edge] || 0) - (initialRectangle[edge] || 0);\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * \n * \n * ```\n * Or in case they are sibling elements:\n * ```html\n * \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizable]',\n  exportAs: 'mwlResizable',\n})\nexport class ResizableDirective implements OnInit, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: ResizeCursors = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Allow elements to be resized to negative dimensions\n   */\n  @Input() allowNegativeResizes: boolean = false;\n\n  /**\n   * The mouse move throttle in milliseconds, default: 50 ms\n   */\n  @Input() mouseMoveThrottleMS: number = MOUSE_MOVE_THROTTLE_MS;\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private destroy$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: any,\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    const mousedown$: Observable = merge(this.pointerEventListeners.pointerDown, this.mousedown);\n\n    const mousemove$ = merge(\n      this.pointerEventListeners.pointerMove,\n      this.mousemove\n    ).pipe(\n      tap(({ event }) => {\n        if (currentResize) {\n          try {\n            event.preventDefault();\n          } catch (e) {\n            // just adding try-catch not to see errors in console if there is a passive listener for same event somewhere\n            // browser does nothing except of writing errors to console\n          }\n        }\n      }),\n      share()\n    );\n\n    const mouseup$ = merge(this.pointerEventListeners.pointerUp, this.mouseup);\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const getResizeCursors = (): ResizeCursors => {\n      return {\n        ...DEFAULT_RESIZE_CURSORS,\n        ...this.resizeCursors,\n      };\n    };\n\n    const mousedrag: Observable = mousedown$\n      .pipe(\n        mergeMap((startCoords) => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY,\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y),\n            };\n          }\n\n          return (\n            merge(\n              mousemove$.pipe(take(1)).pipe(map((coords) => [, coords])),\n              mousemove$.pipe(pairwise())\n            ) as Observable\n          )\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords),\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y,\n                };\n              })\n            )\n            .pipe(takeUntil(merge(mouseup$, mousedown$)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return (\n            this.allowNegativeResizes ||\n            !!(\n              newBoundingRect.height &&\n              newBoundingRect.width &&\n              newBoundingRect.height > 0 &&\n              newBoundingRect.width > 0\n            )\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect,\n                }),\n              })\n            : true;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        if (this.resizing.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizing.emit({\n              edges: getEdgesDiff({\n                edges: currentResize!.edges,\n                initialRectangle: currentResize!.startingRect,\n                newRectangle: newBoundingRect,\n              }),\n              rectangle: newBoundingRect,\n            });\n          });\n        }\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    mousedown$\n      .pipe(\n        map(({ edges }) => {\n          return edges || {};\n        }),\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect,\n        };\n        const resizeCursors = getResizeCursors();\n        const cursor = getResizeCursor(currentResize.edges, resizeCursors);\n        this.renderer.setStyle(document.body, 'cursor', cursor);\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, true);\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = deepCloneNode(this.elm.nativeElement);\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        if (this.resizeStart.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizeStart.emit({\n              edges: getEdgesDiff({\n                edges,\n                initialRectangle: startingRect,\n                newRectangle: startingRect,\n              }),\n              rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0),\n            });\n          });\n        }\n      });\n\n    mouseup$.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        if (this.resizeEnd.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizeEnd.emit({\n              edges: getEdgesDiff({\n                edges: currentResize!.edges,\n                initialRectangle: currentResize!.startingRect,\n                newRectangle: currentResize!.currentRect,\n              }),\n              rectangle: currentResize!.currentRect,\n            });\n          });\n        }\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    // browser check for angular universal, because it doesn't know what document is\n    if (isPlatformBrowser(this.platformId)) {\n      this.renderer.setStyle(document.body, 'cursor', '');\n    }\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.destroy$.next();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable;\n\n  public pointerMove: Observable;\n\n  public pointerUp: Observable;\n\n  private static instance: PointerEventListeners;\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event,\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchStart = renderer.listen(\n              'document',\n              'touchstart',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.touches[0].clientX,\n                  clientY: event.touches[0].clientY,\n                  event,\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchStart!();\n          }\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event,\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchMove = renderer.listen(\n              'document',\n              'touchmove',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.targetTouches[0].clientX,\n                  clientY: event.targetTouches[0].clientY,\n                  event,\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchMove!();\n          }\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: (() => void) | undefined;\n        let unsubscribeTouchCancel: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event,\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchEnd = renderer.listen(\n              'document',\n              'touchend',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.changedTouches[0].clientX,\n                  clientY: event.changedTouches[0].clientY,\n                  event,\n                });\n              }\n            );\n\n            unsubscribeTouchCancel = renderer.listen(\n              'document',\n              'touchcancel',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.changedTouches[0].clientX,\n                  clientY: event.changedTouches[0].clientY,\n                  event,\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchEnd!();\n            unsubscribeTouchCancel!();\n          }\n        };\n      }\n    ).pipe(share());\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResizeEvent.html":{"url":"interfaces/ResizeEvent.html","title":"interface - ResizeEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ResizeEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-resizable-element/src/lib/interfaces/resize-event.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                The $event object that is passed to the resize events\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            edges\n                                        \n                                \n                                \n                                        \n                                            rectangle\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        edges\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        edges:         Edges\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Edges\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rectangle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rectangle:         BoundingRectangle\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BoundingRectangle\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BoundingRectangle } from './bounding-rectangle.interface';\nimport { Edges } from './edges.interface';\n\n/**\n * The `$event` object that is passed to the resize events\n */\nexport interface ResizeEvent {\n  rectangle: BoundingRectangle;\n  edges: Edges;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/ResizeHandleDirective.html":{"url":"directives/ResizeHandleDirective.html","title":"directive - ResizeHandleDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  ResizeHandleDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-resizable-element/src/lib/resize-handle.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                An element placed inside a mwlResizable directive to be used as a drag and resize handle\nFor example\n\n  \nOr in case they are sibling elements:\n\n\n            \n\n\n            \n                Implements\n            \n            \n                            OnInit\n                            OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [mwlResizeHandle]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                resizableContainer\n                            \n                            \n                                resizeEdges\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(renderer: Renderer2, element: ElementRef, zone: NgZone, resizableDirective: ResizableDirective)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-resizable-element/src/lib/resize-handle.directive.ts:52\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                        Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        element\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        zone\n                                                  \n                                                        \n                                                                        NgZone\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        resizableDirective\n                                                  \n                                                        \n                                                                        ResizableDirective\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        resizableContainer\n                    \n                \n                \n                    \n                        Type :         ResizableDirective\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-resizable-element/src/lib/resize-handle.directive.ts:44\n                            \n                        \n                \n                    \n                        Reference to ResizableDirective in case if handle is not located inside of element with ResizableDirective\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        resizeEdges\n                    \n                \n                \n                    \n                        Type :         Edges\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-resizable-element/src/lib/resize-handle.directive.ts:40\n                            \n                        \n                \n                    \n                        The Edges object that contains the edges of the parent element that dragging the handle will trigger a resize on\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  Input,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  OnDestroy,\n  NgZone,\n  Optional,\n} from '@angular/core';\nimport { fromEvent, merge, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { ResizableDirective } from './resizable.directive';\nimport { Edges } from './interfaces/edges.interface';\nimport { IS_TOUCH_DEVICE } from './util/is-touch-device';\n\n/**\n * An element placed inside a `mwlResizable` directive to be used as a drag and resize handle\n *\n * For example\n *\n * ```html\n * \n *   \n * \n * ```\n * Or in case they are sibling elements:\n * ```html\n * \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizeHandle]',\n})\nexport class ResizeHandleDirective implements OnInit, OnDestroy {\n  /**\n   * The `Edges` object that contains the edges of the parent element that dragging the handle will trigger a resize on\n   */\n  @Input() resizeEdges: Edges = {};\n  /**\n   * Reference to ResizableDirective in case if handle is not located inside of element with ResizableDirective\n   */\n  @Input() resizableContainer: ResizableDirective;\n\n  private eventListeners: {\n    touchmove?: () => void;\n    mousemove?: () => void;\n    [key: string]: (() => void) | undefined;\n  } = {};\n\n  private destroy$ = new Subject();\n\n  constructor(\n    private renderer: Renderer2,\n    private element: ElementRef,\n    private zone: NgZone,\n    @Optional() private resizableDirective: ResizableDirective\n  ) {}\n\n  ngOnInit(): void {\n    this.zone.runOutsideAngular(() => {\n      this.listenOnTheHost('mousedown').subscribe((event) => {\n        this.onMousedown(event, event.clientX, event.clientY);\n      });\n\n      this.listenOnTheHost('mouseup').subscribe((event) => {\n        this.onMouseup(event.clientX, event.clientY);\n      });\n\n      if (IS_TOUCH_DEVICE) {\n        this.listenOnTheHost('touchstart').subscribe((event) => {\n          this.onMousedown(\n            event,\n            event.touches[0].clientX,\n            event.touches[0].clientY\n          );\n        });\n\n        merge(\n          this.listenOnTheHost('touchend'),\n          this.listenOnTheHost('touchcancel')\n        ).subscribe((event) => {\n          this.onMouseup(\n            event.changedTouches[0].clientX,\n            event.changedTouches[0].clientY\n          );\n        });\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.unsubscribeEventListeners();\n  }\n\n  /**\n   * @hidden\n   */\n  onMousedown(\n    event: MouseEvent | TouchEvent,\n    clientX: number,\n    clientY: number\n  ): void {\n    event.preventDefault();\n    if (!this.eventListeners.touchmove) {\n      this.eventListeners.touchmove = this.renderer.listen(\n        this.element.nativeElement,\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          this.onMousemove(\n            touchMoveEvent,\n            touchMoveEvent.targetTouches[0].clientX,\n            touchMoveEvent.targetTouches[0].clientY\n          );\n        }\n      );\n    }\n    if (!this.eventListeners.mousemove) {\n      this.eventListeners.mousemove = this.renderer.listen(\n        this.element.nativeElement,\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.onMousemove(\n            mouseMoveEvent,\n            mouseMoveEvent.clientX,\n            mouseMoveEvent.clientY\n          );\n        }\n      );\n    }\n    this.resizable.mousedown.next({\n      clientX,\n      clientY,\n      edges: this.resizeEdges,\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  onMouseup(clientX: number, clientY: number): void {\n    this.unsubscribeEventListeners();\n    this.resizable.mouseup.next({\n      clientX,\n      clientY,\n      edges: this.resizeEdges,\n    });\n  }\n\n  // directive might be passed from DI or as an input\n  private get resizable(): ResizableDirective {\n    return this.resizableDirective || this.resizableContainer;\n  }\n\n  private onMousemove(\n    event: MouseEvent | TouchEvent,\n    clientX: number,\n    clientY: number\n  ): void {\n    this.resizable.mousemove.next({\n      clientX,\n      clientY,\n      edges: this.resizeEdges,\n      event,\n    });\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListeners).forEach((type) => {\n      (this as any).eventListeners[type]();\n      delete this.eventListeners[type];\n    });\n  }\n\n  private listenOnTheHost(eventName: string) {\n    return fromEvent(this.element.nativeElement, eventName).pipe(\n      takeUntil(this.destroy$)\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n6.0.0 (2022-08-02)\n⚠ BREAKING CHANGES\n\nangular 14 or higher is now required to use this package\n\nbuild\n\nupgrade to angular 14 (180ab35)\n\n5.0.0 (2021-12-11)\n⚠ BREAKING CHANGES\n\nangular 12 or higher is now required to use this package\n\nFeatures\n\npublish package in ivy partial compilation mode (d9ad08c)\n\n4.0.0 (2021-08-30)\n⚠ BREAKING CHANGES\n\nmwlResizable: the resizeEdges and resizeCursorPrecision inputs have been removed from the mwlResizable directive.\n\nTo migrate, please use the mwlResizeHandle directive instead (see the readme for a full example)\n\nangular 10 or higher is now required to use this package\n\nFeatures\n\nmwlResizable: remove deprecated resizeEdges and resizeCursorPrecision inputs (58c954e)\n\nBug Fixes\n\ncopy canvas when using enableGhostResize (#129) (d65c257)\n\nbuild\n\nmigrate to the angular cli (21eca11), closes #125\n\n\n3.4.0 (2021-06-02)\nFeatures\n\nmwlResizeHandle: add resizableContainer input (862249f)\n\n\n3.3.5 (2021-02-02)\nPerformance Improvements\n\nlisten to touch events only on touch devices (#126) (c85a28d)\n\n\n3.3.4 (2020-11-21)\nPerformance Improvements\n\nonly trigger change detection if there are output subscribers (930de54)\n\n\n3.3.3 (2020-07-24)\nBug Fixes\n\nhandle existing negative css transforms on resizable elements (edf56db)\n\n\n3.3.2 (2020-05-22)\nBug Fixes\n\nallow any angular version above 6 (66f2289)\n\n\n3.3.1 (2020-05-22)\nBug Fixes\n\nhandle translate3d transforms on resizable elements (534bdf6), closes #100\n\n\n3.3.0 (2020-01-14)\nFeatures\n\nallow changing mouseMoveThrottleMS (#106) (fb5599b)\n\n\n3.2.6 (2019-10-11)\nBug Fixes\n\nallow angular 9 peer dependency (86e366c)\n\n\n3.2.5 (2019-10-07)\nPerformance Improvements\n\nlazily initialise all mousemove listeners until needed (81134ee)\n\n\n3.2.4 (2019-02-28)\nBug Fixes\n\nrestore compatibility with universal (210decc), closes #83\n\n\n3.2.3 (2019-02-05)\nBug Fixes\n\nallow angular 8 peer dependency (94dc48d)\ndeprecate the top level resizeEdges option in favour of resize handles (2f6ac2d)\n\nPerformance Improvements\n\nremove mouse move listeners when only using resize handles (1185f3a)\n\n\n3.2.2 (2018-08-10)\nBug Fixes\n\ndon't throw errors when immediately destroying the host component (56e463b)\n\n\n3.2.1 (2018-08-03)\nBug Fixes\n\nensure all resizing events are always emitted (25d6fa3)\n\n\n3.2.0 (2018-07-23)\nFeatures\n\nallow negative resizing of elements (560bcb1)\n\n\n3.1.0 (2018-06-19)\nFeatures\n\nimprove default resize cursors (37fc88e)\n\n\n3.0.0 (2018-05-09)\nFeatures\n\nupgrade to angular 6 (c7e3de6)\n\nBREAKING CHANGES\n\nangular 6 and rxjs 6 or higher are now required to use this package\n\n\n2.0.0 (2017-12-26)\nFeatures\n\nexport directives with Directive suffix (0440bbd)\nupgrade to angular 5 (5d6a576)\nuse lettable rxjs operators (af7abf7)\nuse ng-packagr for bundling the package (c4519a1), closes #79 #80\n\nBREAKING CHANGES\n\nthe global observable prototype is now no longer modified by this package, you must\nimport rxjs operators yourself. Also rxjs 5.5 or higher is now required to use this library\nThe UMD entry point has changed from angular-resizable-element/dist/umd/angular-resizable-element.js to angular-resizable-element/bundles/angular-resizable-element.umd.js\n\nSystem.js users will need to update their configs\n\nangular 5 or higher is now required to use this package\nThe Resizable import is now ResizableDirective and ResizeHandle is now\nResizeHandleDirective\n\n\n1.2.5 (2017-12-26)\nBug Fixes\n\nresizeHandle: allow handles to be dynamically shown (34342aa), closes #68\nresize elements that have css transforms (f24a746), closes #72\nset the resize cursor globally when resizing (71d5a05), closes #70\n\n\n1.2.4 (2017-10-21)\nBug Fixes\n\nallow angular 5 peer dependency (25cfe50)\n\n\n1.2.3 (2017-09-28)\nBug Fixes\n\nAdd startingRect scroll position to cloned node. (#66) (a056154)\n\n\n1.2.2 (2017-08-28)\nBug Fixes\n\nensure mouse event handlers are triggers outside of the angular zone (23fc6e5), closes #65\n\n\n1.2.1 (2017-08-06)\nBug Fixes\n\ncursor: change the cursor back to default on IE11 (a0323e9), closes #62\n\n\n1.2.0 (2017-06-12)\nFeatures\n\nexport Edges and BoundingRectangle interfaces for use within applications (10051cd)\n\n\n1.1.2 (2017-06-10)\nBug Fixes\n\ndragHandle: fix drag handles on firefox (1d15bb4), closes #54\n\n\n1.1.1 (2017-05-21)\nBug Fixes\n\nset ghost element width and height on resize start (be5d727), closes #53\n\n\n1.1.0 (2017-05-12)\nFeatures\n\nadd a class to the ghost element (54be6b7)\n\n\n1.0.0 (2017-03-24)\nFeatures\n\nng4: upgrade to angular 4 (4c665d2)\n\nBREAKING CHANGES\n\nng4: angular 4.0 or higher is now required to use this library. The\nupgrade should be seamless\nfor most users.\n\n\n0.8.1 (2017-03-23)\nPerformance Improvements\n\nthrottle mousemove listener events (05f7f7e)\nuse shared mouse event listeners across all resizable instances (2a4b102)\n\n\n0.8.0 (2017-03-16)\nFeatures\n\nghostElementPositioning: allow ghost element positioning to be configured (b77c9fc)\nexpose Resizable and ResizeHandle directives (3633040)\n\n\n0.7.2 (2017-03-04)\nBug Fixes\n\nrelax peer dependency warning to allow angular 4 (8232e66)\n\nPerformance Improvements\n\nrun all rezize events outside the angular zone (820612e)\nresizable: only register mouse move events when a rezize is active (a74f9e2)\nresizeHandle: dynamically register mouse move event listener (4b20cde)\n\n\n0.7.0 (2017-02-28)\nFeatures\n\ncssClasses: Gives classes to main element depend on state (8e3f108)\ncursorPrecision: allow cursor precision value to be edited (3ce508d)\n\n\n0.6.1 (2017-02-11)\nBug Fixes\n\nuniversal: remove MouseEvent reference (520abce), closes #41\n\n\n0.6.0 (2017-02-04)\nFeatures\n\nresizeCursors: allow resize cursors to be customised (99d2f66), closes #40\n\n\n0.5.7 (2017-01-30)\nBug Fixes\n\nuse correct touch event properties (0ab7d40), closes #39\n\n\n0.5.6 (2017-01-25)\nBug Fixes\n\nelement should resize on touch events (aa169c7), closes #36\n\n\n0.5.5 (2017-01-11)\nBug Fixes\n\nadd width and height to cloned node (75ce122), closes #31\nkeep cursor while resizing (93a5c4e), closes #33\n\n\n0.5.4 (2016-12-11)\nBug Fixes\n\ncursor: reset the cursor instead of changing it to auto (514851f)\n\n\n0.5.3 (2016-11-19)\nBug Fixes\n\nunsubscribe all observables when the component is destroyed (d5ea756), closes #27\n\n\n0.5.2 (2016-11-05)\nBug Fixes\n\naot: aot compatibility (9236e02)\n\n\n0.5.1 (2016-11-03)\nBug Fixes\n\ndont change the cursor when resizing an element (697c52c), closes #24\n\n\n0.5.0 (2016-10-29)\nBug Fixes\n\nfix resizing via a drag handle (5f7f468)\nprevent text from being selected when resizing an element (5571069), closes #22\n\nFeatures\n\nrename the library from angular2-resizable to angular-resizable-element (927235e), closes #21\nrename the resize output to resizing (9597986), closes #20\n\nBREAKING CHANGES\n\nThe library has been renamed to angular-resizable-element.\n\nThe UMD entry point has changed to\nnode_modules/angular-resizable-element/dist/umd/angular-resizable-element.js\nBefore\n\n(resize)=\"onResize($event)\"After:\n(resizing)=\"onResizing($event)\"\n0.4.1 (2016-09-28)\nBug Fixes\n\ntypings: dont include reference to core-js (68dc84f)\n\n\n0.4.0 (2016-09-25)\nFeatures\n\nbuild: support offline template compilation (f3fe12a)\n\nBREAKING CHANGES\n\nbuild: For System.js users the path to the UMD files has changed:\n\nBefore:\nnode_modules/angular2-resizable/angular2-resizable.jsAfter:\nnode_modules/angular2-resizable/dist/umd/angular2-resizable.js\n0.3.3 (2016-09-13)\nBug Fixes\n\npeerDependencies: allow any versions of angular post RC5 (cbe088f)\n\n\n0.3.2 (2016-09-03)\nFeatures\n\nangular: support RC6 (d5b18cc)\n\n\n0.3.1 (2016-08-25)\nBug Fixes\n\nrxjs: use correct rxjs operator imports in dist (858b3f8), closes #16\n\n\n0.3.0 (2016-08-12)\nFeatures\n\nevents: rename all outputs to drop the on prefix (9c76aac)\ndirective selectors are now camel case instead of dash case (ffad2ca)\nupgrade to angular RC5 (9557c0a)\n\nBREAKING CHANGES\n\nmwl-resizable is now mwlResizable and mwl-resize-handle is now mwlResizeHandle\nAngular RC5 is now required\n\nThe Resizable and ResizeHandle directives are now no longer exported. Instead you must use the ResizableModule. See the readme or the demo app for an example of how to do this.\n\nevents: The onResizeStart output has been renamed to resizeStart\n\nThe onResize output has been renamed to resize\nThe onResizeEnd output has been renamed to resizeEnd\n\n0.2.1 (2016-07-15)\nBug Fixes\n\ndemo: fix broken demo (0a5bf11)\n\n\n0.2.0 (2016-07-15)\nBug Fixes\n\ncreate a clone of the ghost element instead of applying styling to the host (fa73345), closes #15\nonly resize when the cursor is within the bounding rectangle (dedc3bb)\n\nBREAKING CHANGES\n\nenableResizeStyling has been renamed to enableGhostResize\n\n\n0.1.0 (2016-06-26)\nBug Fixes\n\nmousedrag: cancel the previous mousedrag observable when starting a new drag (149c1a4), closes #9\nonResizeEnd: call with co-ordinates of last valid resize rather than where the mouse up event w (eb314fd)\nonResizeStart: ensure the starting rectangle is a POJO rather than a bounding rectangle (81fe0b4)\ncancel mousedrag event when either a mouseup or mousedown event fires (c76be59)\ndisable dragging effects on resizable elements on webkit browsers (59078e2)\nrenamed directive selector from mwl-resizeable to mwl-resizable (c60b3f5)\n\nFeatures\n\ndisableResize: support completely disabling resizing an element (9f9c54a), closes #13\nexpose the amount each edge was resized on resize events (d664038), closes #11\nenableResizeStyling: make temporary resizing of the element opt-in by default so users can con (4c59b05), closes #5\nresizeEdges: allow the resize edges to be customised (60c2e08), closes #8\nresizeHandles: add support for nesting resize handles inside the element (1af705a), closes #10\nresizeSnapGrid: allow resizing to fit to a snap grid (74424ba), closes #3\nvalidate: provide a way for resize events to be validated (4da938d), closes #12\n\nBREAKING CHANGES\n\nenableResizeStyling: the element will no longer have its styles changed by default when dragging and\nresizing. You can now re-enable it by setting [enableResizeStyling]=\"true\" on the element.\nthe $event.edges object values now contain numbers instead of booleans\n\nrename the directive from mwl-resizeable to mwl-resizable\n\n\nresizeEdges: by default the element is no longer resizable.\n\nYou must specify [resizeEdges]={top: true, bottom: true, left: true, right: true} to get the old behaviour back\n\n0.0.3 (2016-06-13)\nBug Fixes\n\nimport missing rxjs operators (300ac10)\n\n\n0.0.2 (2016-06-13)\nBug Fixes\n\ntypes: export Edges and BoundingRectangle types (fe49114)\ndont bundle rxjs with the library (7b1280e)\n\n\n0.0.1 (2016-06-13)\nBug Fixes\n\nallow the element to be resized multiple times (bf497d2)\ndrag: disable user dragging (053fb0e)\nreset element styles on mousedown if there was a previous uncancelled resize (a8e5cd3)\noutputs: make outputs sync to prevent ui flicker (032ea5a)\ntypescript: add missing types (e722a86)\n\nFeatures\n\nimprove transforms, add resize events (0959a12)\ninitial WIP resizable implementation (22af52f)\nshow the cursor when mousing over the edge of the element (f440c87)\nsupport resizing from corners (bac87e3), closes #4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Peer dependencies\n    \n    \n        \n            @angular/core : >=14.0.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            getEdgesDiff   (projects/.../resizable.directive.ts)\n                        \n                        \n                            getElementRect   (projects/.../resizable.directive.ts)\n                        \n                        \n                            getNewBoundingRectangle   (projects/.../resizable.directive.ts)\n                        \n                        \n                            getResizeCursor   (projects/.../resizable.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-resizable-element/src/lib/resizable.directive.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getEdgesDiff\n                        \n                    \n                \n            \n            \n                \ngetEdgesDiff(__namedParameters: {edges: Edges, initialRectangle: BoundingRectangle, newRectangle: BoundingRectangle})\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edges\n                                    \n                                                Edges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    initialRectangle\n                                    \n                                                BoundingRectangle\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newRectangle\n                                    \n                                                BoundingRectangle\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Edges\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getElementRect\n                        \n                    \n                \n            \n            \n                \ngetElementRect(element: ElementRef, ghostElementPositioning: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    element\n                                    \n                                                ElementRef\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ghostElementPositioning\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BoundingRectangle\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNewBoundingRectangle\n                        \n                    \n                \n            \n            \n                \ngetNewBoundingRectangle(startingRect: BoundingRectangle, edges: Edges, clientX: number, clientY: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    startingRect\n                                    \n                                                BoundingRectangle\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    edges\n                                    \n                                                Edges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientX\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientY\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BoundingRectangle\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getResizeCursor\n                        \n                    \n                \n            \n            \n                \ngetResizeCursor(edges: Edges, cursors: ResizeCursors)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edges\n                                    \n                                                Edges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cursors\n                                    \n                                                ResizeCursors\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nangular resizable element\n\n\n\n\n\nDemo\nhttps://mattlewis92.github.io/angular-resizable-element/\nTable of contents\n\nAbout\nInstallation\nDocumentation\nDevelopment\nLicense\n\nAbout\nAn angular 14.0+ directive that allows an element to be dragged and resized\nInstallation\nInstall through npm:\nnpm install angular-resizable-elementThen use it in your app like so:\nimport { Component } from '@angular/core';\nimport { ResizeEvent } from 'angular-resizable-element';\n\n@Component({\n  selector: 'demo-app',\n  styles: [\n    `\n      .rectangle {\n        position: relative;\n        top: 200px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: 300px;\n        height: 150px;\n        background-color: #fd4140;\n        border: solid 1px #121621;\n        color: #121621;\n        margin: auto;\n      }\n\n      mwlResizable {\n        box-sizing: border-box; // required for the enableGhostResize option to work\n      }\n\n      .resize-handle-top,\n      .resize-handle-bottom {\n        position: absolute;\n        height: 5px;\n        cursor: row-resize;\n        width: 100%;\n      }\n\n      .resize-handle-top {\n        top: 0;\n      }\n\n      .resize-handle-bottom {\n        bottom: 0;\n      }\n\n      .resize-handle-left,\n      .resize-handle-right {\n        position: absolute;\n        height: 100%;\n        cursor: col-resize;\n        width: 5px;\n      }\n\n      .resize-handle-left {\n        left: 0;\n      }\n\n      .resize-handle-right {\n        right: 0;\n      }\n    `,\n  ],\n  template: `\n    \n      \n      \n      \n      \n    \n  `,\n})\nexport class MyComponent {\n  onResizeEnd(event: ResizeEvent): void {\n    console.log('Element was resized', event);\n  }\n}\n\n// now use within your apps module\nimport { NgModule } from '@angular/core';\nimport { ResizableModule } from 'angular-resizable-element';\n\n@NgModule({\n  declarations: [MyComponent],\n  imports: [ResizableModule],\n  bootstrap: [MyComponent],\n})\nclass MyModule {}You may also find it useful to view the demo source.\nDocumentation\nAll documentation is auto-generated from the source and can be viewed here:\nhttps://mattlewis92.github.io/angular-resizable-element/docs/\nDevelopment\nPrepare your environment\n\nInstall Node.js and NPM (should come with)\nInstall local dev dependencies: npm install while current directory is this repo\n\nDevelopment server\nRun npm start to start a development server on port 8000 with auto reload + tests.\nTesting\nRun npm test to run tests once or npm run test:watch to continually run tests.\nRelease\nnpm run releaseLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2016 Matt Lewis\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ResizableModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 6.0.0\n        \n            Description : An angular 14.0+ directive that allows an element to be dragged and resized\n        \n            Keywords : angular, angular2, resizable\n        \n            Homepage : https://github.com/mattlewis92/angular-resizable-element#readme\n        \n            Bugs : https://github.com/mattlewis92/angular-resizable-element/issues\n        \n            License : MIT\n        \n            Repository : git+https://github.com/mattlewis92/angular-resizable-element.git\n        \n            Author : Matt Lewis\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DEFAULT_RESIZE_CURSORS   (projects/.../resizable.directive.ts)\n                        \n                        \n                            MOUSE_MOVE_THROTTLE_MS   (projects/.../resizable.directive.ts)\n                        \n                        \n                            RESIZE_ACTIVE_CLASS   (projects/.../resizable.directive.ts)\n                        \n                        \n                            RESIZE_GHOST_ELEMENT_CLASS   (projects/.../resizable.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-resizable-element/src/lib/resizable.directive.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DEFAULT_RESIZE_CURSORS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResizeCursors\n\n                    \n                \n                \n                    \n                        Default value : Object.freeze({\n  topLeft: 'nw-resize',\n  topRight: 'ne-resize',\n  bottomLeft: 'sw-resize',\n  bottomRight: 'se-resize',\n  leftOrRight: 'col-resize',\n  topOrBottom: 'row-resize',\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MOUSE_MOVE_THROTTLE_MS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RESIZE_ACTIVE_CLASS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'resize-active'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RESIZE_GHOST_ELEMENT_CLASS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'resize-ghost-element'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
