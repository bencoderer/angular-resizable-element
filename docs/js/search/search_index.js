var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/BoundingRectangle.html",[0,0.272,1,0.688]],["body/interfaces/BoundingRectangle.html",[0,0.378,1,1.141,2,1.268,3,0.955,4,0.82,5,0.82,6,0.832,7,0.451,8,4.588,9,3.839,10,1.666,11,2.583,12,1.103,13,1.103,14,0.697,15,0.697,16,1.141,17,1.461,18,2.331,19,1.679,20,1.461,21,1.461,22,2.206,23,2.206,24,1.461,25,1.679,26,3.082,27,3.087,28,1.141,29,1.392,30,0.054,31,1.515,32,1.913,33,3.839,34,0.975,35,0.697,36,0.045,37,0.045]],["title/interfaces/Coordinate.html",[0,0.272,38,1.2]],["body/interfaces/Coordinate.html",[0,0.29,1,1.182,2,0.496,3,0.373,4,0.321,5,0.321,6,0.272,7,0.234,12,0.964,13,0.683,14,0.705,15,0.272,16,0.591,17,0.848,19,1.108,20,1.117,21,0.964,22,1.031,23,1.031,24,1.05,25,1.108,28,1.13,29,1.227,30,0.055,31,1.108,34,0.431,35,0.535,36,0.023,37,0.023,38,1.832,39,0.568,40,1.937,41,1.937,42,1.082,43,0.508,44,1.455,45,1.27,46,1.031,47,1.455,48,1.599,49,1.672,50,1.031,51,1.455,52,0.748,53,0.748,54,0.431,55,0.748,56,0.748,57,1.384,58,1.932,59,2.029,60,1.117,61,0.568,62,1.672,63,0.748,64,0.651,65,0.748,66,0.748,67,0.748,68,1.184,69,1.184,70,0.651,71,1.099,72,0.651,73,0.748,74,0.651,75,1.284,76,0.748,77,0.748,78,1.767,79,0.651,80,0.568,81,0.651,82,0.748,83,0.748,84,0.651,85,0.651,86,1.853,87,1.853,88,1.09,89,1.27,90,1.586,91,2.029,92,1.031,93,1.542,94,2.554,95,2.029,96,0.748,97,0.748,98,0.748,99,0.748,100,1.672,101,1.184,102,1.672,103,1.184,104,1.672,105,1.184,106,1.672,107,1.184,108,1.47,109,1.47,110,2.262,111,1.031,112,1.117,113,1.937,114,2.105,115,1.937,116,0.748,117,0.748,118,1.184,119,1.937,120,1.184,121,0.748,122,0.748,123,0.748,124,0.748,125,0.748,126,0.496,127,0.748,128,1.184,129,1.184,130,1.672,131,1.28,132,0.651,133,1.28,134,1.184,135,1.184,136,1.184,137,1.184,138,0.748,139,0.748,140,0.748,141,0.748,142,0.748,143,0.748,144,0.748,145,0.748,146,0.748,147,0.748,148,1.214,149,1.031,150,1.031,151,1.031,152,1.031,153,1.031,154,1.031,155,1.28,156,0.651,157,0.651,158,0.872,159,0.651,160,0.651,161,0.651,162,0.568,163,0.568,164,0.651,165,0.9,166,0.748,167,0.748,168,0.748,169,0.748,170,0.748,171,0.748,172,1.586,173,1.687,174,1.687,175,1.184,176,0.748,177,0.748,178,0.748,179,0.748,180,1.28,181,0.568,182,1.031,183,0.9,184,1.031,185,1.031,186,0.748,187,0.651,188,0.568,189,1.031,190,0.568,191,0.651,192,0.9,193,0.496,194,0.785,195,0.748,196,0.508,197,0.431,198,0.651,199,1.672,200,0.651,201,0.651,202,1.586,203,1.28,204,0.748,205,1.47,206,0.651,207,0.748,208,1.455,209,1.28,210,0.568,211,0.651,212,1.031,213,0.748,214,0.748,215,1.031,216,1.031,217,0.9,218,0.568,219,0.651,220,0.651,221,0.748,222,0.748,223,0.748,224,1.031,225,0.651,226,1.586,227,0.651,228,0.748,229,0.651,230,1.47,231,0.651,232,0.748,233,0.748,234,0.651,235,0.651,236,0.748,237,0.496,238,0.651,239,0.748,240,0.748,241,0.974,242,1.72,243,0.568,244,0.748,245,0.748,246,1.767,247,1.832,248,1.28,249,1.687,250,1.117,251,1.767,252,1.687,253,0.651,254,0.651,255,0.748,256,0.748,257,1.455,258,0.748,259,1.384,260,0.748,261,0.748,262,0.651,263,1.686,264,0.748,265,0.748,266,0.748,267,0.748,268,2.167,269,2.22,270,0.748,271,0.651,272,0.748,273,0.748,274,1.184,275,0.748,276,0.748,277,1.184,278,1.47,279,2.418,280,0.748,281,1.184,282,1.184,283,0.748,284,1.184,285,0.748,286,1.031,287,0.748,288,0.748,289,0.748,290,0.748,291,0.748,292,0.748,293,1.47,294,2.029,295,1.184,296,0.748,297,1.822,298,1.184,299,0.748,300,1.184,301,0.748,302,1.822,303,1.184,304,0.748,305,1.184,306,1.184,307,0.748,308,0.748,309,0.748,310,0.748,311,0.748,312,1.47,313,1.672,314,0.748,315,0.748,316,0.748,317,0.748,318,0.748,319,0.748,320,0.748,321,0.748,322,0.748,323,0.748,324,0.748,325,0.748,326,0.748,327,0.748,328,1.672,329,1.672,330,1.184,331,0.748,332,1.184,333,1.031,334,0.748,335,2.265,336,0.748,337,0.748,338,0.748,339,0.748,340,0.748,341,1.47,342,0.748,343,1.47,344,0.748,345,0.748,346,0.748,347,0.748,348,1.184,349,1.542,350,1.184,351,1.47,352,0.748,353,0.748,354,0.748,355,0.748,356,0.748,357,0.568,358,0.748,359,0.748,360,0.748,361,0.748,362,0.748,363,0.748,364,1.184,365,0.748,366,0.748,367,0.748,368,0.651,369,0.748,370,0.748,371,0.748,372,0.748,373,0.651,374,0.748,375,0.651,376,0.496,377,0.651,378,0.748,379,0.748,380,2.105,381,0.748,382,0.748,383,0.748,384,0.748,385,0.651,386,0.748,387,1.117,388,1.031,389,0.748,390,0.748,391,0.748,392,0.748,393,0.748,394,1.184,395,0.748,396,0.748,397,1.47,398,0.651,399,0.748,400,1.47,401,1.47,402,1.47,403,2.029,404,2.029,405,1.28,406,1.28,407,0.748,408,0.651,409,0.651,410,1.47,411,0.748,412,1.47,413,1.47,414,0.651,415,0.748,416,0.748,417,0.748,418,1.47,419,1.47,420,1.47,421,0.748,422,1.031,423,1.031,424,0.748]],["title/interfaces/Edges.html",[0,0.272,71,0.591]],["body/interfaces/Edges.html",[0,0.382,2,1.281,3,0.965,4,0.828,5,0.828,6,0.837,7,0.454,10,1.683,15,0.704,16,1.148,17,1.466,18,2.336,20,1.466,21,1.466,24,1.466,26,3.113,27,3.106,28,1.148,29,1.372,30,0.055,31,1.525,32,1.933,34,0.925,35,0.704,36,0.045,37,0.045,71,1.053,88,0.828,158,0.704,208,2.392,425,3.878,426,3.878,427,3.878]],["title/interfaces/PointerEventCoordinate.html",[0,0.272,85,1.2]],["body/interfaces/PointerEventCoordinate.html",[0,0.289,1,1.18,2,0.494,3,0.372,4,0.319,5,0.319,6,0.271,7,0.233,12,0.962,13,0.681,14,0.704,15,0.271,16,0.589,17,0.845,19,1.105,20,1.115,21,0.962,22,1.028,23,1.028,24,1.048,25,1.105,28,1.129,29,1.226,30,0.055,31,1.105,34,0.534,35,0.534,36,0.023,37,0.023,38,1.764,39,0.566,40,1.466,41,1.466,42,1.08,43,0.506,44,1.452,45,1.267,46,1.028,47,1.452,48,1.597,49,1.668,50,1.028,51,1.452,52,0.745,53,0.745,54,0.43,55,0.745,56,0.745,57,1.381,58,1.93,59,2.026,60,1.114,61,0.566,62,1.668,63,0.745,64,0.649,65,0.745,66,0.745,67,0.745,68,1.18,69,1.18,70,0.649,71,1.099,72,0.649,73,0.745,74,0.649,75,1.282,76,0.745,77,0.745,78,1.764,79,0.649,80,0.566,81,0.649,82,0.745,83,0.745,84,0.649,85,1.028,86,1.892,87,1.892,88,1.103,89,1.469,90,1.764,91,2.026,92,1.028,93,1.539,94,2.553,95,2.026,96,0.745,97,0.745,98,0.745,99,0.745,100,1.668,101,1.18,102,1.668,103,1.18,104,1.668,105,1.18,106,1.668,107,1.18,108,1.466,109,1.466,110,2.261,111,1.028,112,1.114,113,1.934,114,2.103,115,1.934,116,0.745,117,0.745,118,1.18,119,1.934,120,1.18,121,0.745,122,0.745,123,0.745,124,0.745,125,0.745,126,0.494,127,0.745,128,1.18,129,1.18,130,1.668,131,1.276,132,0.649,133,1.276,134,1.18,135,1.18,136,1.18,137,1.18,138,0.745,139,0.745,140,0.745,141,0.745,142,0.745,143,0.745,144,0.745,145,0.745,146,0.745,147,0.745,148,1.212,149,1.028,150,1.028,151,1.028,152,1.028,153,1.028,154,1.028,155,1.276,156,0.649,157,0.649,158,0.871,159,0.649,160,0.649,161,0.649,162,0.566,163,0.566,164,0.649,165,0.897,166,0.745,167,0.745,168,0.745,169,0.745,170,0.745,171,0.745,172,1.582,173,1.684,174,1.684,175,1.18,176,0.745,177,0.745,178,0.745,179,0.745,180,1.276,181,0.566,182,1.028,183,0.897,184,1.028,185,1.028,186,0.745,187,0.649,188,0.566,189,1.028,190,0.566,191,0.649,192,0.897,193,0.494,194,0.782,195,0.745,196,0.506,197,0.43,198,0.649,199,1.668,200,0.649,201,0.649,202,1.582,203,1.276,204,0.745,205,1.466,206,0.649,207,0.745,208,1.452,209,1.276,210,0.566,211,0.649,212,1.028,213,0.745,214,0.745,215,1.028,216,1.028,217,0.897,218,0.566,219,0.649,220,0.649,221,0.745,222,0.745,223,0.745,224,1.028,225,0.649,226,1.582,227,0.649,228,0.745,229,0.649,230,1.466,231,0.649,232,0.745,233,0.745,234,0.649,235,0.649,236,0.745,237,0.494,238,0.649,239,0.745,240,0.745,241,0.972,242,1.718,243,0.566,244,0.745,245,0.745,246,1.764,247,1.829,248,1.276,249,1.684,250,1.114,251,1.764,252,1.684,253,0.649,254,0.649,255,0.745,256,0.745,257,1.452,258,0.745,259,1.381,260,0.745,261,0.745,262,0.649,263,1.684,264,0.745,265,0.745,266,0.745,267,0.745,268,2.164,269,2.217,270,0.745,271,0.649,272,0.745,273,0.745,274,1.18,275,0.745,276,0.745,277,1.18,278,1.466,279,2.416,280,0.745,281,1.18,282,1.18,283,0.745,284,1.18,285,0.745,286,1.028,287,0.745,288,0.745,289,0.745,290,0.745,291,0.745,292,0.745,293,1.466,294,2.026,295,1.18,296,0.745,297,1.818,298,1.18,299,0.745,300,1.18,301,0.745,302,1.818,303,1.18,304,0.745,305,1.18,306,1.18,307,0.745,308,0.745,309,0.745,310,0.745,311,0.745,312,1.466,313,1.668,314,0.745,315,0.745,316,0.745,317,0.745,318,0.745,319,0.745,320,0.745,321,0.745,322,0.745,323,0.745,324,0.745,325,0.745,326,0.745,327,0.745,328,1.668,329,1.668,330,1.18,331,0.745,332,1.18,333,1.028,334,0.745,335,2.262,336,0.745,337,0.745,338,0.745,339,0.745,340,0.745,341,1.466,342,0.745,343,1.466,344,0.745,345,0.745,346,0.745,347,0.745,348,1.18,349,1.539,350,1.18,351,1.466,352,0.745,353,0.745,354,0.745,355,0.745,356,0.745,357,0.566,358,0.745,359,0.745,360,0.745,361,0.745,362,0.745,363,0.745,364,1.18,365,0.745,366,0.745,367,0.745,368,0.649,369,0.745,370,0.745,371,0.745,372,0.745,373,0.649,374,0.745,375,0.649,376,0.494,377,0.649,378,0.745,379,0.745,380,2.101,381,0.745,382,0.745,383,0.745,384,0.745,385,0.649,386,0.745,387,1.114,388,1.028,389,0.745,390,0.745,391,0.745,392,0.745,393,0.745,394,1.18,395,0.745,396,0.745,397,1.466,398,0.649,399,0.745,400,1.466,401,1.466,402,1.466,403,2.026,404,2.026,405,1.276,406,1.276,407,0.745,408,0.649,409,0.649,410,1.466,411,0.745,412,1.466,413,1.466,414,0.649,415,0.745,416,0.745,417,0.745,418,1.466,419,1.466,420,1.466,421,0.745,422,1.028,423,1.028,424,0.745]],["title/classes/PointerEventListeners.html",[196,0.591,252,1.2]],["body/classes/PointerEventListeners.html",[0,0.286,1,1.175,3,0.364,4,0.313,5,0.313,6,0.698,7,0.397,12,0.951,13,0.67,14,0.698,15,0.266,16,0.58,17,0.834,18,1.011,19,1.093,20,1.105,21,0.951,22,1.011,23,1.011,24,1.038,25,1.093,28,1.123,29,1.175,30,0.055,31,1.093,32,1.8,34,0.655,35,0.527,36,0.023,37,0.023,38,1.75,39,0.555,40,1.447,41,1.447,42,1.073,43,0.498,44,1.816,45,1.253,46,1.011,47,1.436,48,1.585,49,1.649,50,1.011,51,1.816,52,0.73,53,0.73,54,0.421,55,0.73,56,0.73,57,1.367,58,2.023,59,2.01,60,1.099,61,0.555,62,1.649,63,0.73,64,0.636,65,0.73,66,0.73,67,0.73,68,1.162,69,1.162,70,0.636,71,1.096,72,0.636,73,0.73,74,0.636,75,1.271,76,0.73,77,0.73,78,1.75,79,0.636,80,0.555,81,0.636,82,0.73,83,0.73,84,0.636,85,0.636,86,1.844,87,1.844,88,1.087,89,1.253,90,1.567,91,2.01,92,1.011,93,1.527,94,2.546,95,2.01,96,0.73,97,0.73,98,0.73,99,0.73,100,1.649,101,1.162,102,1.649,103,1.162,104,1.649,105,1.162,106,1.649,107,1.162,108,1.447,109,1.447,110,2.255,111,1.011,112,1.099,113,1.917,114,2.094,115,1.917,116,0.73,117,0.73,118,1.162,119,1.917,120,1.162,121,0.73,122,0.73,123,0.73,124,0.73,125,0.73,126,0.484,127,0.73,128,1.162,129,1.162,130,1.649,131,1.259,132,0.636,133,1.259,134,1.162,135,1.162,136,1.162,137,1.162,138,0.73,139,0.73,140,0.73,141,0.73,142,0.73,143,0.73,144,0.73,145,0.73,146,0.73,147,0.73,148,1.203,149,1.011,150,1.011,151,1.011,152,1.011,153,1.011,154,1.011,155,1.259,156,0.636,157,0.636,158,0.867,159,0.636,160,0.636,161,0.636,162,0.555,163,0.555,164,0.636,165,0.883,166,0.73,167,0.73,168,0.73,169,0.73,170,0.73,171,0.73,172,1.567,173,1.669,174,1.669,175,1.162,176,0.73,177,0.73,178,0.73,179,0.73,180,1.259,181,0.555,182,1.011,183,0.883,184,1.011,185,1.011,186,0.73,187,0.636,188,0.555,189,1.011,190,0.555,191,0.636,192,0.883,193,0.484,194,0.77,195,0.73,196,0.498,197,0.421,198,0.636,199,1.649,200,0.636,201,0.636,202,1.567,203,1.259,204,0.73,205,1.447,206,0.636,207,0.73,208,1.436,209,1.259,210,0.555,211,0.636,212,1.011,213,0.73,214,0.73,215,1.011,216,1.011,217,0.883,218,0.555,219,0.636,220,0.636,221,0.73,222,0.73,223,0.73,224,1.011,225,0.636,226,1.567,227,0.636,228,0.73,229,0.636,230,1.447,231,0.636,232,0.73,233,0.73,234,0.636,235,0.636,236,0.73,237,0.484,238,0.636,239,0.73,240,0.73,241,0.959,242,1.709,243,0.555,244,0.73,245,0.73,246,1.75,247,2.05,248,1.259,249,1.669,250,1.099,251,1.75,252,1.816,253,0.636,254,1.011,255,0.73,256,0.73,257,1.669,258,0.73,259,1.633,260,0.73,261,0.73,262,0.636,263,1.674,264,0.73,265,0.73,266,0.73,267,0.73,268,2.15,269,2.203,270,0.73,271,0.636,272,0.73,273,0.73,274,1.162,275,0.73,276,0.73,277,1.162,278,1.447,279,2.406,280,0.73,281,1.162,282,1.162,283,0.73,284,1.162,285,0.73,286,1.011,287,0.73,288,0.73,289,0.73,290,0.73,291,0.73,292,0.73,293,1.447,294,2.01,295,1.162,296,0.73,297,1.8,298,1.162,299,0.73,300,1.162,301,0.73,302,1.8,303,1.162,304,0.73,305,1.162,306,1.162,307,0.73,308,0.73,309,0.73,310,0.73,311,0.73,312,1.447,313,1.649,314,0.73,315,0.73,316,0.73,317,0.73,318,0.73,319,0.73,320,0.73,321,0.73,322,0.73,323,0.73,324,0.73,325,0.73,326,0.73,327,0.73,328,1.649,329,1.649,330,1.162,331,0.73,332,1.162,333,1.011,334,0.73,335,2.249,336,0.73,337,0.73,338,0.73,339,0.73,340,0.73,341,1.447,342,0.73,343,1.447,344,0.73,345,0.73,346,0.73,347,0.73,348,1.162,349,1.527,350,1.162,351,1.447,352,0.73,353,0.73,354,0.73,355,0.73,356,0.73,357,0.555,358,0.73,359,0.73,360,0.73,361,0.73,362,0.73,363,0.73,364,1.162,365,0.73,366,0.73,367,0.73,368,0.636,369,0.73,370,0.73,371,0.73,372,0.73,373,0.636,374,0.73,375,0.636,376,0.484,377,0.636,378,0.73,379,0.73,380,2.086,381,0.73,382,0.73,383,0.73,384,0.73,385,0.636,386,0.73,387,1.367,388,1.011,389,0.73,390,0.73,391,1.447,392,1.447,393,1.447,394,1.649,395,0.73,396,1.447,397,1.447,398,1.011,399,0.73,400,1.447,401,1.447,402,1.447,403,2.01,404,2.01,405,1.259,406,1.259,407,0.73,408,0.636,409,0.636,410,1.447,411,0.73,412,1.447,413,1.447,414,0.636,415,0.73,416,0.73,417,0.73,418,1.447,419,1.447,420,1.447,421,0.73,422,1.011,423,1.011,424,0.73,428,1.176,429,2.331,430,1.465,431,1.568,432,1.465,433,1.465,434,1.465,435,1.465,436,1.465,437,1.176]],["title/directives/ResizableDirective.html",[43,0.591,197,0.795]],["body/directives/ResizableDirective.html",[0,0.276,1,1.16,3,0.345,4,0.297,5,0.297,6,0.806,7,0.453,10,0.602,12,0.922,13,0.922,14,0.789,15,0.252,17,0.805,19,1.06,20,1.134,21,1.01,22,0.969,23,0.969,24,1.01,25,1.06,28,1.105,29,1.174,30,0.055,31,1.06,32,2.167,34,0.789,35,0.508,36,0.022,37,0.022,38,1.713,39,0.526,40,1.396,41,1.396,42,1.054,43,0.477,44,1.392,45,1.215,46,1.215,47,1.392,48,1.554,49,1.967,50,1.215,51,1.392,52,0.692,53,0.692,54,0.399,55,0.692,56,0.692,57,1.331,58,1.887,59,1.967,60,1.06,61,0.526,62,1.599,63,0.692,64,0.602,65,0.692,66,0.692,67,0.692,68,1.113,69,1.113,70,0.602,71,1.096,72,0.602,73,0.692,74,0.602,75,1.4,76,0.692,77,0.692,78,1.713,79,0.602,80,0.526,81,0.602,82,0.692,83,0.692,84,0.602,85,0.602,86,1.825,87,1.825,88,1.11,89,1.215,90,1.525,91,2.112,92,0.969,93,1.495,94,2.526,95,1.967,96,0.692,97,0.692,98,0.692,99,0.692,100,1.599,101,1.113,102,1.599,103,1.113,104,1.599,105,1.113,106,1.599,107,1.113,108,1.396,109,1.396,110,2.248,111,0.969,112,1.331,113,1.872,114,2.071,115,1.872,116,0.692,117,0.692,118,1.113,119,1.872,120,1.396,121,0.692,122,0.692,123,0.692,124,0.692,125,0.692,126,1.304,127,0.692,128,1.113,129,1.113,130,1.599,131,1.215,132,0.602,133,1.525,134,1.113,135,1.113,136,1.113,137,1.113,138,0.692,139,0.692,140,0.692,141,0.692,142,0.692,143,0.692,144,0.692,145,0.692,146,0.692,147,0.692,148,1.25,149,0.969,150,0.969,151,0.969,152,0.969,153,0.969,154,0.969,155,1.392,156,0.602,157,0.602,158,0.906,159,0.602,160,0.602,161,0.602,162,0.526,163,0.526,164,0.602,165,1.06,166,0.692,167,0.692,168,0.692,169,0.692,170,0.692,171,0.692,172,1.525,173,1.629,174,1.629,175,1.113,176,0.692,177,0.692,178,0.692,179,0.692,180,1.215,181,0.526,182,0.969,183,1.06,184,1.215,185,1.215,186,1.113,187,0.969,188,0.845,189,0.969,190,0.845,191,0.969,192,1.215,193,0.737,194,0.925,195,0.692,196,0.477,197,0.642,198,0.969,199,2.046,200,0.969,201,0.969,202,1.713,203,1.629,204,1.113,205,1.872,206,0.969,207,1.396,208,1.629,209,1.629,210,0.845,211,0.969,212,1.525,213,1.113,214,1.113,215,1.525,216,1.525,217,1.215,218,1.06,219,0.969,220,0.969,221,1.113,222,1.113,223,1.113,224,1.392,225,1.215,226,1.887,227,0.969,228,1.113,229,0.969,230,1.872,231,0.969,232,1.113,233,1.396,234,0.969,235,0.969,236,1.113,237,1.356,238,1.215,239,1.113,240,1.113,241,1.24,242,1.683,243,0.845,244,1.113,245,1.113,246,1.713,247,1.781,248,1.215,249,1.629,250,1.06,251,1.713,252,1.629,253,0.602,254,0.602,255,0.692,256,0.692,257,1.392,258,0.692,259,1.331,260,0.692,261,0.692,262,0.602,263,1.647,264,0.692,265,0.692,266,0.692,267,0.692,268,2.112,269,2.167,270,0.692,271,0.602,272,0.692,273,0.692,274,1.113,275,0.692,276,0.692,277,1.113,278,1.396,279,2.379,280,0.692,281,1.113,282,1.113,283,0.692,284,1.113,285,0.692,286,0.969,287,0.692,288,0.692,289,0.692,290,0.692,291,0.692,292,0.692,293,1.396,294,1.967,295,1.113,296,0.692,297,1.752,298,1.113,299,0.692,300,1.113,301,0.692,302,1.752,303,1.113,304,0.692,305,1.113,306,1.113,307,0.692,308,0.692,309,0.692,310,0.692,311,0.692,312,1.396,313,1.599,314,0.692,315,0.692,316,0.692,317,0.692,318,0.692,319,0.692,320,0.692,321,0.692,322,0.692,323,0.692,324,0.692,325,0.692,326,0.692,327,0.692,328,1.599,329,1.599,330,1.113,331,0.692,332,1.113,333,0.969,334,0.692,335,2.215,336,0.692,337,0.692,338,0.692,339,0.692,340,0.692,341,1.396,342,0.692,343,1.396,344,0.692,345,0.692,346,0.692,347,0.692,348,1.113,349,1.495,350,1.113,351,1.396,352,0.692,353,0.692,354,0.692,355,0.692,356,0.692,357,0.526,358,0.692,359,0.692,360,0.692,361,0.692,362,0.692,363,0.692,364,1.113,365,0.692,366,0.692,367,0.692,368,0.602,369,0.692,370,0.692,371,0.692,372,0.692,373,0.602,374,0.692,375,0.602,376,0.459,377,0.602,378,0.692,379,0.692,380,2.046,381,0.692,382,0.692,383,0.692,384,0.692,385,0.602,386,0.692,387,1.06,388,0.969,389,0.692,390,0.692,391,0.692,392,0.692,393,0.692,394,1.113,395,0.692,396,0.692,397,1.396,398,0.602,399,0.692,400,1.396,401,1.396,402,1.396,403,1.967,404,1.967,405,1.215,406,1.215,407,0.692,408,0.602,409,0.602,410,1.396,411,0.692,412,1.396,413,1.396,414,0.602,415,0.692,416,0.692,417,0.692,418,1.396,419,1.396,420,1.396,421,0.692,422,0.969,423,0.969,424,0.692,438,0.799,439,1.114,440,1.502,441,1.792,442,1.388,443,1.388,444,1.388,445,1.388,446,1.388,447,1.388,448,1.388,449,1.388,450,1.388,451,1.388]],["title/modules/ResizableModule.html",[452,1.861,453,1.379]],["body/modules/ResizableModule.html",[3,1.034,4,0.888,5,0.888,6,0.754,7,0.409,30,0.054,35,0.754,36,0.047,37,0.047,42,1.261,54,1.194,158,0.754,196,0.888,197,1.525,453,2.395,454,2.796,455,4.155,456,3.858,457,3.055,458,4.806,459,3.858,460,3.336,461,4.155]],["title/interfaces/ResizeCursors.html",[0,0.272,148,0.795]],["body/interfaces/ResizeCursors.html",[0,0.288,1,1.179,2,0.491,3,0.369,4,0.317,5,0.317,6,0.269,7,0.232,12,0.958,13,0.677,14,0.702,15,0.269,16,0.586,17,0.842,19,1.101,20,1.112,21,0.958,22,1.022,23,1.022,24,1.045,25,1.101,28,1.262,29,1.179,30,0.055,31,1.101,34,0.702,35,0.531,36,0.023,37,0.023,38,1.759,39,0.562,40,1.46,41,1.46,42,1.078,43,0.503,44,1.446,45,1.262,46,1.022,47,1.446,48,1.593,49,1.661,50,1.022,51,1.446,52,0.74,53,0.74,54,0.427,55,0.74,56,0.74,57,1.377,58,1.926,59,2.021,60,1.109,61,0.562,62,1.661,63,0.74,64,0.644,65,0.74,66,0.74,67,0.74,68,1.174,69,1.174,70,0.644,71,1.098,72,0.644,73,0.74,74,0.644,75,1.278,76,0.74,77,0.74,78,1.759,79,0.644,80,0.562,81,0.644,82,0.74,83,0.74,84,0.644,85,0.644,86,1.849,87,1.849,88,1.089,89,1.262,90,1.577,91,2.021,92,1.022,93,1.535,94,2.551,95,2.021,96,0.74,97,0.74,98,0.74,99,0.74,100,1.661,101,1.174,102,1.661,103,1.174,104,1.661,105,1.174,106,1.661,107,1.174,108,1.46,109,1.46,110,2.259,111,1.022,112,1.109,113,1.928,114,2.1,115,1.928,116,0.74,117,0.74,118,1.174,119,1.928,120,1.174,121,0.74,122,0.74,123,0.74,124,0.74,125,0.74,126,0.491,127,0.74,128,1.174,129,1.174,130,1.661,131,1.271,132,0.644,133,1.271,134,1.174,135,1.174,136,1.174,137,1.174,138,0.74,139,0.74,140,0.74,141,0.74,142,0.74,143,0.74,144,0.74,145,0.74,146,0.74,147,0.74,148,1.245,149,1.577,150,1.577,151,1.577,152,1.577,153,1.577,154,1.577,155,1.271,156,0.644,157,0.644,158,0.87,159,0.644,160,0.644,161,0.644,162,0.562,163,0.562,164,0.644,165,0.892,166,0.74,167,0.74,168,0.74,169,0.74,170,0.74,171,0.74,172,1.577,173,1.679,174,1.679,175,1.174,176,0.74,177,0.74,178,0.74,179,0.74,180,1.271,181,0.562,182,1.022,183,0.892,184,1.022,185,1.022,186,0.74,187,0.644,188,0.562,189,1.022,190,0.562,191,0.644,192,0.892,193,0.491,194,0.778,195,0.74,196,0.503,197,0.427,198,0.644,199,1.661,200,0.644,201,0.644,202,1.577,203,1.271,204,0.74,205,1.46,206,0.644,207,0.74,208,1.446,209,1.271,210,0.562,211,0.644,212,1.022,213,0.74,214,0.74,215,1.022,216,1.022,217,0.892,218,0.562,219,0.644,220,0.644,221,0.74,222,0.74,223,0.74,224,1.022,225,0.644,226,1.577,227,0.644,228,0.74,229,0.644,230,1.46,231,0.644,232,0.74,233,0.74,234,0.644,235,0.644,236,0.74,237,0.491,238,0.644,239,0.74,240,0.74,241,0.967,242,1.715,243,0.562,244,0.74,245,0.74,246,1.759,247,1.825,248,1.271,249,1.679,250,1.109,251,1.759,252,1.679,253,0.644,254,0.644,255,0.74,256,0.74,257,1.446,258,0.74,259,1.377,260,0.74,261,0.74,262,0.644,263,1.681,264,0.74,265,0.74,266,0.74,267,0.74,268,2.159,269,2.212,270,0.74,271,0.644,272,0.74,273,0.74,274,1.174,275,0.74,276,0.74,277,1.174,278,1.46,279,2.412,280,0.74,281,1.174,282,1.174,283,0.74,284,1.174,285,0.74,286,1.022,287,0.74,288,0.74,289,0.74,290,0.74,291,0.74,292,0.74,293,1.46,294,2.021,295,1.174,296,0.74,297,1.812,298,1.174,299,0.74,300,1.174,301,0.74,302,1.812,303,1.174,304,0.74,305,1.174,306,1.174,307,0.74,308,0.74,309,0.74,310,0.74,311,0.74,312,1.46,313,1.661,314,0.74,315,0.74,316,0.74,317,0.74,318,0.74,319,0.74,320,0.74,321,0.74,322,0.74,323,0.74,324,0.74,325,0.74,326,0.74,327,0.74,328,1.661,329,1.661,330,1.174,331,0.74,332,1.174,333,1.022,334,0.74,335,2.258,336,0.74,337,0.74,338,0.74,339,0.74,340,0.74,341,1.46,342,0.74,343,1.46,344,0.74,345,0.74,346,0.74,347,0.74,348,1.174,349,1.535,350,1.174,351,1.46,352,0.74,353,0.74,354,0.74,355,0.74,356,0.74,357,0.562,358,0.74,359,0.74,360,0.74,361,0.74,362,0.74,363,0.74,364,1.174,365,0.74,366,0.74,367,0.74,368,0.644,369,0.74,370,0.74,371,0.74,372,0.74,373,0.644,374,0.74,375,0.644,376,0.491,377,0.644,378,0.74,379,0.74,380,2.096,381,0.74,382,0.74,383,0.74,384,0.74,385,0.644,386,0.74,387,1.109,388,1.022,389,0.74,390,0.74,391,0.74,392,0.74,393,0.74,394,1.174,395,0.74,396,0.74,397,1.46,398,0.644,399,0.74,400,1.46,401,1.46,402,1.46,403,2.021,404,2.021,405,1.271,406,1.271,407,0.74,408,0.644,409,0.644,410,1.46,411,0.74,412,1.46,413,1.46,414,0.644,415,0.74,416,0.74,417,0.74,418,1.46,419,1.46,420,1.46,421,0.74,422,1.022,423,1.022,424,0.74]],["title/interfaces/ResizeEvent.html",[0,0.272,75,0.914]],["body/interfaces/ResizeEvent.html",[0,0.401,1,1.289,2,1.346,3,1.014,4,0.871,5,0.871,6,0.74,7,0.401,10,1.769,11,2.743,12,1.49,15,0.74,16,1.182,30,0.054,34,0.862,35,0.74,36,0.046,37,0.046,42,1.182,71,1.16,74,1.769,75,1.57,88,1.015,158,0.862,217,1.8,241,1.57,462,4.076,463,4.076,464,3.815,465,4.076]],["title/directives/ResizeHandleDirective.html",[43,0.591,457,1.593]],["body/directives/ResizeHandleDirective.html",[3,0.718,4,0.616,5,0.616,6,0.831,7,0.469,10,1.252,14,0.933,15,0.524,18,1.866,27,1.942,28,0.953,29,1.219,30,0.055,31,0.953,32,2.144,34,0.78,35,0.524,36,0.037,37,0.037,42,1.219,43,1.019,44,1.988,45,1.735,46,1.866,48,1.735,50,1.866,51,1.988,54,0.829,57,1.451,60,1.451,61,1.093,64,1.252,70,1.252,71,1.109,72,1.252,78,1.662,79,1.252,80,1.093,81,1.252,86,1.806,87,1.856,88,0.979,89,1.629,90,1.866,110,1.662,126,0.953,158,0.831,188,1.451,189,1.662,190,1.735,191,1.662,192,1.451,193,1.266,194,1.266,196,0.616,197,1.531,198,1.662,237,0.953,241,1.266,242,1.093,246,1.662,250,1.451,251,2.253,253,1.252,254,1.662,257,1.662,259,1.629,262,1.252,263,1.947,271,1.252,333,1.252,373,1.252,385,1.252,387,1.093,398,1.252,405,1.252,406,1.662,408,1.252,409,1.252,414,1.662,422,1.252,423,1.252,431,1.942,438,1.662,439,2.316,440,2.578,457,2.206,460,2.316,464,2.316,466,4.582,467,2.885,468,3.831,469,3.678,470,3.831,471,3.076,472,3.299,473,3.076,474,3.453,475,3.453,476,2.885,477,2.885,478,3.076,479,3.831,480,2.885,481,3.831,482,3.831,483,3.076,484,3.076,485,2.885,486,2.885,487,2.885,488,2.885,489,2.885,490,2.885,491,2.885,492,2.885,493,2.885,494,2.885,495,2.885,496,2.885,497,2.885,498,3.831,499,2.885,500,3.831,501,3.831,502,3.831,503,3.831,504,3.831,505,2.885,506,2.885,507,3.831,508,3.831,509,2.885,510,2.885,511,2.885,512,4.301,513,2.885,514,2.885,515,2.885,516,2.885,517,2.885,518,2.885,519,2.885,520,2.885,521,2.885,522,2.885,523,2.885,524,2.885,525,2.885,526,2.885,527,2.885]],["title/changelog.html",[528,1.572,529,1.572,530,1.875]],["body/changelog.html",[0,0.169,1,0.655,2,0.566,5,0.366,7,0.509,11,1.773,12,0.922,13,0.757,14,0.921,16,0.655,17,0.492,18,0.743,19,0.87,20,0.492,21,0.492,24,0.492,25,0.87,30,0.04,34,0.311,35,0.582,36,0.026,37,0.026,42,0.798,43,0.877,47,1.687,48,0.998,58,1.143,61,1.672,71,0.686,80,1.364,84,1.143,88,0.943,89,0.649,93,0.649,112,0.649,126,0.566,148,0.922,158,0.921,165,0.998,181,0.649,183,1.364,187,1.393,188,0.998,190,0.998,192,1.473,193,0.566,194,1.19,196,0.366,197,0.492,200,1.393,201,0.743,202,1.563,203,2.141,206,1.143,209,1.143,210,0.649,211,0.743,212,2.097,215,0.743,216,0.743,217,1.781,218,0.998,219,0.743,220,0.743,224,1.916,225,0.743,226,1.782,227,0.743,229,0.743,231,1.143,234,1.393,235,0.743,237,1.285,238,0.743,241,0.566,242,0.649,247,0.743,248,0.743,249,1.143,250,0.998,259,0.998,286,1.393,349,1.751,357,0.649,375,0.743,376,1.738,377,1.143,388,1.856,428,1.375,438,1.848,440,1.773,441,2.577,453,0.854,457,0.987,469,1.375,471,2.893,472,2.424,473,2.577,474,1.375,475,3.122,478,2.115,483,2.577,484,1.375,530,1.375,531,1.713,532,4.834,533,1.713,534,1.713,535,3.21,536,1.713,537,2.115,538,1.713,539,1.713,540,1.375,541,3.889,542,4.887,543,5.37,544,5.37,545,1.713,546,1.713,547,1.713,548,1.713,549,1.713,550,1.713,551,4.834,552,4.773,553,3.889,554,4.415,555,4.051,556,3.635,557,3.348,558,3.047,559,3.889,560,4.277,561,1.713,562,1.713,563,3.21,564,1.713,565,1.713,566,3.21,567,1.713,568,1.713,569,1.713,570,1.713,571,4.415,572,4.528,573,3.21,574,1.713,575,1.713,576,3.603,577,5.105,578,1.375,579,1.713,580,2.634,581,1.713,582,1.713,583,1.713,584,2.634,585,2.634,586,1.713,587,2.634,588,1.713,589,4.106,590,2.634,591,1.713,592,3.21,593,1.713,594,1.713,595,1.375,596,1.713,597,2.634,598,1.713,599,1.713,600,1.713,601,1.713,602,5.323,603,1.713,604,1.713,605,4.528,606,1.713,607,1.713,608,4.106,609,4.106,610,1.713,611,1.713,612,1.713,613,1.713,614,1.713,615,3.889,616,3.603,617,3.21,618,1.713,619,1.713,620,1.713,621,1.713,622,3.889,623,3.21,624,1.713,625,2.634,626,3.603,627,1.713,628,1.713,629,4.277,630,3.21,631,1.375,632,2.893,633,1.713,634,1.713,635,1.713,636,1.713,637,1.375,638,1.713,639,3.603,640,2.634,641,1.713,642,1.713,643,1.713,644,3.603,645,2.634,646,2.893,647,3.603,648,1.713,649,1.713,650,1.713,651,1.713,652,3.21,653,1.713,654,1.713,655,1.713,656,1.713,657,3.889,658,1.713,659,2.634,660,1.713,661,1.713,662,1.713,663,2.634,664,1.713,665,1.713,666,1.713,667,1.375,668,1.713,669,3.889,670,1.713,671,1.713,672,1.713,673,3.889,674,1.713,675,1.713,676,1.713,677,1.713,678,1.713,679,2.634,680,2.115,681,1.713,682,1.713,683,4.277,684,3.21,685,1.713,686,1.713,687,1.713,688,1.713,689,2.634,690,1.713,691,1.713,692,2.634,693,2.634,694,1.713,695,1.713,696,4.106,697,1.713,698,1.713,699,5.105,700,3.21,701,1.713,702,1.713,703,3.603,704,1.713,705,1.713,706,3.21,707,1.713,708,1.713,709,1.713,710,1.713,711,1.713,712,1.713,713,1.713,714,1.713,715,1.713,716,3.603,717,1.713,718,1.713,719,1.713,720,3.889,721,3.21,722,2.634,723,2.634,724,3.603,725,2.634,726,2.634,727,1.713,728,1.713,729,2.634,730,3.603,731,1.713,732,1.713,733,1.713,734,3.889,735,1.713,736,2.634,737,1.713,738,1.713,739,1.713,740,1.713,741,1.713,742,1.713,743,1.713,744,1.713,745,1.713,746,1.713,747,1.713,748,1.713,749,2.634,750,1.713,751,1.713,752,1.713,753,1.713,754,1.713,755,2.634,756,1.713,757,1.713,758,1.713,759,2.634,760,1.713,761,1.713,762,1.713,763,1.713,764,2.115,765,1.713,766,1.713,767,1.713,768,1.713,769,3.21,770,1.713,771,1.713,772,1.713,773,1.713,774,1.375,775,1.713,776,1.713,777,1.713,778,1.713,779,1.713,780,2.634,781,3.21,782,1.713,783,1.713,784,1.713,785,1.713,786,2.634,787,1.713,788,1.713,789,1.713,790,1.713,791,1.713,792,2.634,793,1.713,794,1.713,795,1.713,796,1.713,797,2.634,798,1.713,799,1.713,800,1.713,801,1.375,802,2.634,803,1.713,804,2.634,805,1.713,806,1.713,807,1.713,808,1.713,809,1.713,810,1.713,811,1.713,812,1.713,813,1.713,814,1.713,815,1.713,816,1.713,817,1.713,818,1.713,819,1.713,820,1.713,821,1.713,822,2.634,823,1.713,824,1.713,825,1.713,826,1.713,827,1.713,828,1.713,829,3.21,830,1.713,831,1.713,832,1.713,833,1.713,834,1.713,835,1.713,836,1.713,837,1.713,838,1.713,839,4.024,840,2.634,841,1.375,842,1.713,843,1.713,844,1.713,845,1.713,846,1.713,847,1.713,848,1.713,849,1.713,850,2.634,851,1.713,852,1.713,853,3.21,854,1.713,855,1.713,856,1.713,857,1.713,858,1.713,859,2.634,860,1.713,861,1.713,862,1.713,863,1.713,864,3.603,865,1.375,866,1.713,867,1.713,868,1.713,869,4.106,870,1.713,871,1.713,872,1.713,873,1.713,874,1.713,875,1.713,876,1.713,877,1.713,878,1.713,879,1.713,880,3.889,881,1.713,882,1.375,883,1.713,884,1.713,885,1.375,886,2.634,887,1.713,888,1.713,889,1.713,890,1.713,891,1.713,892,3.889,893,1.713,894,1.713,895,1.713,896,3.21,897,1.713,898,1.713,899,1.713,900,1.713,901,1.713,902,1.713,903,1.375,904,1.713,905,1.713,906,1.713,907,1.713,908,1.713,909,1.713,910,1.713,911,1.713,912,1.713,913,1.713,914,1.713,915,4.106,916,1.713,917,2.577,918,1.375,919,2.634,920,1.713,921,2.634,922,1.713,923,1.713,924,1.713,925,1.713,926,1.713,927,1.713,928,1.713,929,1.713,930,1.713,931,1.713,932,3.21,933,1.713,934,2.634,935,2.634,936,1.713,937,1.713,938,1.713,939,1.713,940,1.713,941,1.713,942,1.713,943,1.713,944,1.713,945,1.713,946,1.713,947,1.713,948,1.713,949,2.634,950,1.713,951,1.713,952,1.713,953,1.713,954,2.634,955,1.713,956,1.713,957,1.713,958,1.713,959,1.713,960,1.713,961,2.634,962,1.713,963,1.713,964,1.713,965,1.713,966,1.713,967,1.713,968,1.713,969,1.713,970,1.713,971,1.713,972,1.713,973,1.713,974,1.713,975,1.713,976,1.713,977,1.713,978,2.115,979,1.713,980,1.713,981,1.713,982,1.713,983,1.713,984,1.713,985,1.713,986,1.713,987,1.713,988,1.713,989,1.713,990,1.713,991,1.713,992,2.634,993,1.713,994,1.713,995,3.21,996,1.713,997,1.713,998,1.713,999,1.713,1000,1.713,1001,1.713,1002,1.713,1003,1.713,1004,1.713,1005,1.713,1006,1.713,1007,1.713,1008,1.713,1009,1.713,1010,1.713,1011,1.713,1012,1.713,1013,1.713,1014,1.713,1015,1.713,1016,1.713,1017,1.713,1018,1.713,1019,1.713,1020,1.713,1021,1.713,1022,1.713,1023,1.713]],["title/dependencies.html",[558,1.572,1024,2.229]],["body/dependencies.html",[30,0.05,36,0.048,37,0.048,54,1.244,646,3.475,1024,2.913,1025,4.329]],["title/miscellaneous/functions.html",[1026,1.345,1027,2.66]],["body/miscellaneous/functions.html",[1,1.342,6,0.713,7,0.387,14,0.713,15,0.713,18,2.223,28,1.233,29,1.274,30,0.053,34,0.929,36,0.045,37,0.045,39,1.488,45,1.761,71,1.173,86,1.761,87,1.761,92,2.018,93,1.488,111,2.018,112,1.761,148,1.337,164,1.705,165,1.761,172,2.018,173,2.018,174,2.018,368,1.705,387,1.94,431,3.447,437,4.112,1026,2.263,1027,3.155,1028,4.112,1029,4.652,1030,3.93,1031,3.93]],["title/index.html",[15,0.424,528,1.572,529,1.572]],["body/index.html",[4,0.9,7,0.502,12,0.961,13,1.211,14,0.906,17,1.326,19,1.525,20,1.326,21,1.326,24,1.393,25,1.525,30,0.055,35,0.607,36,0.041,37,0.041,42,1.205,43,0.714,54,1.211,75,1.392,88,0.714,114,2.102,133,1.829,158,0.966,162,1.266,163,1.266,193,1.104,194,1.104,196,0.9,210,1.266,218,1.266,243,1.266,263,1.266,349,1.596,357,1.748,376,1.65,452,2.25,453,2.1,456,2.684,459,3.383,472,3.524,555,2.684,556,2.684,557,2.836,637,3.383,667,2.684,680,3.383,764,2.684,774,3.383,801,3.89,841,3.705,882,2.684,903,2.684,917,3.705,918,3.383,978,2.684,1024,2.25,1032,4.214,1033,3.343,1034,3.343,1035,4.214,1036,3.705,1037,4.845,1038,1.925,1039,2.684,1040,2.684,1041,5.1,1042,3.343,1043,4.214,1044,3.343,1045,3.343,1046,3.343,1047,3.343,1048,3.343,1049,3.343,1050,3.343,1051,4.214,1052,3.343,1053,3.343,1054,3.343,1055,3.343,1056,3.343,1057,4.214,1058,3.343,1059,4.214,1060,3.343,1061,3.343,1062,4.214,1063,3.343,1064,4.214,1065,3.343,1066,3.343,1067,4.214,1068,4.615,1069,3.343,1070,3.343,1071,3.343,1072,3.343,1073,3.343,1074,3.343,1075,3.343,1076,3.343,1077,3.343,1078,3.343,1079,3.343,1080,3.343,1081,3.343,1082,3.343,1083,3.343,1084,3.343,1085,3.343,1086,5.1,1087,3.343,1088,3.343,1089,3.343,1090,3.343,1091,3.343,1092,3.343,1093,4.214,1094,3.343,1095,3.343,1096,3.343,1097,4.615,1098,3.343,1099,3.343,1100,3.343,1101,3.343,1102,3.343,1103,3.343,1104,3.343,1105,2.25]],["title/license.html",[528,1.572,529,1.572,1038,1.345]],["body/license.html",[30,0.045,36,0.045,37,0.045,57,1.49,60,1.49,88,0.84,557,3.132,578,3.158,595,3.737,631,3.158,839,3.158,885,3.158,1036,3.158,1038,2.265,1105,3.132,1106,4.957,1107,3.934,1108,3.158,1109,3.158,1110,4.654,1111,3.934,1112,3.934,1113,3.934,1114,3.934,1115,3.934,1116,3.934,1117,5.428,1118,3.934,1119,3.934,1120,4.957,1121,3.934,1122,4.654,1123,3.934,1124,3.934,1125,3.934,1126,3.934,1127,3.934,1128,3.934,1129,3.934,1130,4.654,1131,3.934,1132,3.934,1133,3.934,1134,3.934,1135,3.934,1136,4.654,1137,4.654,1138,3.934,1139,3.934,1140,3.934,1141,3.934,1142,3.934,1143,3.934,1144,3.934,1145,3.934,1146,3.934,1147,3.934,1148,3.934,1149,3.934,1150,3.934,1151,3.934,1152,3.934,1153,3.934,1154,3.934,1155,3.934,1156,3.934,1157,3.934,1158,3.934,1159,3.934,1160,3.934,1161,3.934,1162,3.934,1163,3.934,1164,3.934,1165,3.934,1166,3.934,1167,3.934]],["title/modules.html",[454,2.506]],["body/modules.html",[30,0.048,36,0.048,37,0.048,453,2.162,454,2.92,1168,4.339]],["title/overview.html",[1169,2.99]],["body/overview.html",[2,1.424,30,0.048,36,0.048,37,0.048,131,2.129,132,1.87,196,0.921,438,2.482,452,2.9,632,3.46,1169,3.46]],["title/properties.html",[16,0.824,558,1.572]],["body/properties.html",[7,0.513,10,1.807,13,1.197,14,0.756,16,1.036,30,0.054,36,0.047,37,0.047,43,0.89,243,1.577,376,1.59,537,3.343,540,3.343,865,3.343,1038,2.398,1039,3.343,1040,3.343,1105,2.802,1108,3.343,1109,3.343,1170,4.164,1171,4.164,1172,4.812,1173,4.164,1174,4.164,1175,4.164,1176,4.164,1177,4.164,1178,4.164,1179,4.164]],["title/miscellaneous/variables.html",[1026,1.345,1180,2.66]],["body/miscellaneous/variables.html",[6,0.733,7,0.398,14,0.733,15,0.733,28,1.176,29,1.005,30,0.054,34,0.938,36,0.046,37,0.046,39,1.53,126,1.707,148,1.162,149,1.754,150,1.754,151,1.754,152,1.754,153,1.754,154,1.754,155,2.052,156,1.754,157,1.754,158,0.984,159,1.754,160,1.754,161,1.754,162,1.53,163,1.53,180,2.052,181,1.53,182,2.052,183,1.53,184,2.052,185,1.754,237,1.707,1026,2.327,1028,4.149,1180,3.244]]],"invertedIndex":[["",{"_index":30,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":114,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"index.html":{}}}],["0.0.1",{"_index":999,"title":{},"body":{"changelog.html":{}}}],["0.0.2",{"_index":994,"title":{},"body":{"changelog.html":{}}}],["0.0.3",{"_index":991,"title":{},"body":{"changelog.html":{}}}],["0.1.0",{"_index":933,"title":{},"body":{"changelog.html":{}}}],["0.2.0",{"_index":925,"title":{},"body":{"changelog.html":{}}}],["0.2.1",{"_index":922,"title":{},"body":{"changelog.html":{}}}],["0.3.0",{"_index":906,"title":{},"body":{"changelog.html":{}}}],["0.3.1",{"_index":901,"title":{},"body":{"changelog.html":{}}}],["0.3.2",{"_index":898,"title":{},"body":{"changelog.html":{}}}],["0.3.3",{"_index":891,"title":{},"body":{"changelog.html":{}}}],["0.4.0",{"_index":879,"title":{},"body":{"changelog.html":{}}}],["0.4.1",{"_index":873,"title":{},"body":{"changelog.html":{}}}],["0.5.0",{"_index":855,"title":{},"body":{"changelog.html":{}}}],["0.5.1",{"_index":852,"title":{},"body":{"changelog.html":{}}}],["0.5.2",{"_index":849,"title":{},"body":{"changelog.html":{}}}],["0.5.3",{"_index":843,"title":{},"body":{"changelog.html":{}}}],["0.5.4",{"_index":838,"title":{},"body":{"changelog.html":{}}}],["0.5.5",{"_index":832,"title":{},"body":{"changelog.html":{}}}],["0.5.6",{"_index":828,"title":{},"body":{"changelog.html":{}}}],["0.5.7",{"_index":825,"title":{},"body":{"changelog.html":{}}}],["0.6.0",{"_index":821,"title":{},"body":{"changelog.html":{}}}],["0.6.1",{"_index":818,"title":{},"body":{"changelog.html":{}}}],["0.7.0",{"_index":807,"title":{},"body":{"changelog.html":{}}}],["0.7.2",{"_index":796,"title":{},"body":{"changelog.html":{}}}],["0.8.0",{"_index":791,"title":{},"body":{"changelog.html":{}}}],["0.8.1",{"_index":785,"title":{},"body":{"changelog.html":{}}}],["01",{"_index":639,"title":{},"body":{"changelog.html":{}}}],["02",{"_index":572,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":683,"title":{},"body":{"changelog.html":{}}}],["032ea5a",{"_index":1010,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":797,"title":{},"body":{"changelog.html":{}}}],["0440bbd",{"_index":702,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":629,"title":{},"body":{"changelog.html":{}}}],["053fb0e",{"_index":1004,"title":{},"body":{"changelog.html":{}}}],["05f7f7e",{"_index":787,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":605,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":622,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":571,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":696,"title":{},"body":{"changelog.html":{}}}],["0959a12",{"_index":1013,"title":{},"body":{"changelog.html":{}}}],["0a5bf11",{"_index":924,"title":{},"body":{"changelog.html":{}}}],["0ab7d40",{"_index":826,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":131,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"overview.html":{}}}],["1.0.0",{"_index":779,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":777,"title":{},"body":{"changelog.html":{}}}],["1.1.1",{"_index":773,"title":{},"body":{"changelog.html":{}}}],["1.1.2",{"_index":767,"title":{},"body":{"changelog.html":{}}}],["1.2.0",{"_index":763,"title":{},"body":{"changelog.html":{}}}],["1.2.1",{"_index":758,"title":{},"body":{"changelog.html":{}}}],["1.2.2",{"_index":752,"title":{},"body":{"changelog.html":{}}}],["1.2.3",{"_index":747,"title":{},"body":{"changelog.html":{}}}],["1.2.4",{"_index":745,"title":{},"body":{"changelog.html":{}}}],["1.2.5",{"_index":735,"title":{},"body":{"changelog.html":{}}}],["10",{"_index":224,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["100",{"_index":637,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["10051cd",{"_index":766,"title":{},"body":{"changelog.html":{}}}],["106",{"_index":641,"title":{},"body":{"changelog.html":{}}}],["10bfc51",{"_index":549,"title":{},"body":{"changelog.html":{}}}],["10px",{"_index":223,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["11",{"_index":551,"title":{},"body":{"changelog.html":{}}}],["1185f3a",{"_index":671,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":542,"title":{},"body":{"changelog.html":{}}}],["121621",{"_index":1062,"title":{},"body":{"index.html":{}}}],["125",{"_index":603,"title":{},"body":{"changelog.html":{}}}],["126",{"_index":612,"title":{},"body":{"changelog.html":{}}}],["129",{"_index":598,"title":{},"body":{"changelog.html":{}}}],["13",{"_index":892,"title":{},"body":{"changelog.html":{}}}],["132",{"_index":548,"title":{},"body":{"changelog.html":{}}}],["14",{"_index":573,"title":{},"body":{"changelog.html":{}}}],["14.19.0",{"_index":1084,"title":{},"body":{"index.html":{}}}],["149c1a4",{"_index":936,"title":{},"body":{"changelog.html":{}}}],["15",{"_index":553,"title":{},"body":{"changelog.html":{}}}],["15.0",{"_index":1039,"title":{},"body":{"index.html":{},"properties.html":{}}}],["15.0.0",{"_index":1025,"title":{},"body":{"dependencies.html":{}}}],["150px",{"_index":1055,"title":{},"body":{"index.html":{}}}],["16",{"_index":792,"title":{},"body":{"changelog.html":{}}}],["16.9.0",{"_index":1085,"title":{},"body":{"index.html":{}}}],["180ab35",{"_index":574,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":692,"title":{},"body":{"changelog.html":{}}}],["1af705a",{"_index":969,"title":{},"body":{"changelog.html":{}}}],["1d15bb4",{"_index":771,"title":{},"body":{"changelog.html":{}}}],["1px",{"_index":1061,"title":{},"body":{"index.html":{}}}],["2",{"_index":132,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"overview.html":{}}}],["2.0.0",{"_index":698,"title":{},"body":{"changelog.html":{}}}],["20",{"_index":868,"title":{},"body":{"changelog.html":{}}}],["200px",{"_index":1046,"title":{},"body":{"index.html":{}}}],["2016",{"_index":839,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2017",{"_index":699,"title":{},"body":{"changelog.html":{}}}],["2018",{"_index":673,"title":{},"body":{"changelog.html":{}}}],["2019",{"_index":644,"title":{},"body":{"changelog.html":{}}}],["2020",{"_index":615,"title":{},"body":{"changelog.html":{}}}],["2021",{"_index":576,"title":{},"body":{"changelog.html":{}}}],["2022",{"_index":541,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":616,"title":{},"body":{"changelog.html":{}}}],["210decc",{"_index":660,"title":{},"body":{"changelog.html":{}}}],["21eca11",{"_index":601,"title":{},"body":{"changelog.html":{}}}],["22",{"_index":630,"title":{},"body":{"changelog.html":{}}}],["22af52f",{"_index":1017,"title":{},"body":{"changelog.html":{}}}],["23",{"_index":689,"title":{},"body":{"changelog.html":{}}}],["23fc6e5",{"_index":756,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":623,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":829,"title":{},"body":{"changelog.html":{}}}],["25cfe50",{"_index":746,"title":{},"body":{"changelog.html":{}}}],["25d6fa3",{"_index":687,"title":{},"body":{"changelog.html":{}}}],["26",{"_index":700,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":848,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":657,"title":{},"body":{"changelog.html":{}}}],["29",{"_index":856,"title":{},"body":{"changelog.html":{}}}],["2a4b102",{"_index":790,"title":{},"body":{"changelog.html":{}}}],["2f6ac2d",{"_index":670,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":972,"title":{},"body":{"changelog.html":{}}}],["3.0.0",{"_index":695,"title":{},"body":{"changelog.html":{}}}],["3.1.0",{"_index":691,"title":{},"body":{"changelog.html":{}}}],["3.2.0",{"_index":688,"title":{},"body":{"changelog.html":{}}}],["3.2.1",{"_index":682,"title":{},"body":{"changelog.html":{}}}],["3.2.2",{"_index":672,"title":{},"body":{"changelog.html":{}}}],["3.2.3",{"_index":662,"title":{},"body":{"changelog.html":{}}}],["3.2.4",{"_index":656,"title":{},"body":{"changelog.html":{}}}],["3.2.5",{"_index":649,"title":{},"body":{"changelog.html":{}}}],["3.2.6",{"_index":643,"title":{},"body":{"changelog.html":{}}}],["3.3.0",{"_index":638,"title":{},"body":{"changelog.html":{}}}],["3.3.1",{"_index":634,"title":{},"body":{"changelog.html":{}}}],["3.3.2",{"_index":628,"title":{},"body":{"changelog.html":{}}}],["3.3.3",{"_index":621,"title":{},"body":{"changelog.html":{}}}],["3.3.4",{"_index":614,"title":{},"body":{"changelog.html":{}}}],["3.3.5",{"_index":607,"title":{},"body":{"changelog.html":{}}}],["3.4.0",{"_index":604,"title":{},"body":{"changelog.html":{}}}],["30",{"_index":584,"title":{},"body":{"changelog.html":{}}}],["300ac10",{"_index":993,"title":{},"body":{"changelog.html":{}}}],["300px",{"_index":1054,"title":{},"body":{"index.html":{}}}],["31",{"_index":834,"title":{},"body":{"changelog.html":{}}}],["33",{"_index":837,"title":{},"body":{"changelog.html":{}}}],["34342aa",{"_index":738,"title":{},"body":{"changelog.html":{}}}],["36",{"_index":831,"title":{},"body":{"changelog.html":{}}}],["3633040",{"_index":795,"title":{},"body":{"changelog.html":{}}}],["37fc88e",{"_index":694,"title":{},"body":{"changelog.html":{}}}],["39",{"_index":827,"title":{},"body":{"changelog.html":{}}}],["3c2c930",{"_index":561,"title":{},"body":{"changelog.html":{}}}],["3ce508d",{"_index":817,"title":{},"body":{"changelog.html":{}}}],["4",{"_index":781,"title":{},"body":{"changelog.html":{}}}],["4.0",{"_index":783,"title":{},"body":{"changelog.html":{}}}],["4.0.0",{"_index":583,"title":{},"body":{"changelog.html":{}}}],["40",{"_index":824,"title":{},"body":{"changelog.html":{}}}],["41",{"_index":820,"title":{},"body":{"changelog.html":{}}}],["4b20cde",{"_index":806,"title":{},"body":{"changelog.html":{}}}],["4c59b05",{"_index":965,"title":{},"body":{"changelog.html":{}}}],["4c665d2",{"_index":782,"title":{},"body":{"changelog.html":{}}}],["4da938d",{"_index":977,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":703,"title":{},"body":{"changelog.html":{}}}],["5.0.0",{"_index":575,"title":{},"body":{"changelog.html":{}}}],["5.5",{"_index":719,"title":{},"body":{"changelog.html":{}}}],["50",{"_index":185,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["514851f",{"_index":842,"title":{},"body":{"changelog.html":{}}}],["520abce",{"_index":819,"title":{},"body":{"changelog.html":{}}}],["53",{"_index":776,"title":{},"body":{"changelog.html":{}}}],["534bdf6",{"_index":636,"title":{},"body":{"changelog.html":{}}}],["54",{"_index":772,"title":{},"body":{"changelog.html":{}}}],["54be6b7",{"_index":778,"title":{},"body":{"changelog.html":{}}}],["5571069",{"_index":863,"title":{},"body":{"changelog.html":{}}}],["560bcb1",{"_index":690,"title":{},"body":{"changelog.html":{}}}],["56e463b",{"_index":681,"title":{},"body":{"changelog.html":{}}}],["58c954e",{"_index":594,"title":{},"body":{"changelog.html":{}}}],["59078e2",{"_index":953,"title":{},"body":{"changelog.html":{}}}],["5d6a576",{"_index":704,"title":{},"body":{"changelog.html":{}}}],["5f7f468",{"_index":858,"title":{},"body":{"changelog.html":{}}}],["5px",{"_index":1067,"title":{},"body":{"index.html":{}}}],["6",{"_index":632,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["6.0.0",{"_index":570,"title":{},"body":{"changelog.html":{}}}],["6.0.1",{"_index":565,"title":{},"body":{"changelog.html":{}}}],["6.0.2",{"_index":562,"title":{},"body":{"changelog.html":{}}}],["60c2e08",{"_index":966,"title":{},"body":{"changelog.html":{}}}],["62",{"_index":762,"title":{},"body":{"changelog.html":{}}}],["65",{"_index":757,"title":{},"body":{"changelog.html":{}}}],["66",{"_index":750,"title":{},"body":{"changelog.html":{}}}],["66f2289",{"_index":633,"title":{},"body":{"changelog.html":{}}}],["68",{"_index":739,"title":{},"body":{"changelog.html":{}}}],["68dc84f",{"_index":878,"title":{},"body":{"changelog.html":{}}}],["697c52c",{"_index":854,"title":{},"body":{"changelog.html":{}}}],["7.0.0",{"_index":550,"title":{},"body":{"changelog.html":{}}}],["7.0.1",{"_index":540,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["70",{"_index":744,"title":{},"body":{"changelog.html":{}}}],["71d5a05",{"_index":743,"title":{},"body":{"changelog.html":{}}}],["72",{"_index":741,"title":{},"body":{"changelog.html":{}}}],["74424ba",{"_index":971,"title":{},"body":{"changelog.html":{}}}],["75ce122",{"_index":833,"title":{},"body":{"changelog.html":{}}}],["767bd1b",{"_index":569,"title":{},"body":{"changelog.html":{}}}],["79",{"_index":712,"title":{},"body":{"changelog.html":{}}}],["7b1280e",{"_index":998,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":663,"title":{},"body":{"changelog.html":{}}}],["80",{"_index":713,"title":{},"body":{"changelog.html":{}}}],["8000",{"_index":1095,"title":{},"body":{"index.html":{}}}],["81134ee",{"_index":655,"title":{},"body":{"changelog.html":{}}}],["81fe0b4",{"_index":946,"title":{},"body":{"changelog.html":{}}}],["820612e",{"_index":803,"title":{},"body":{"changelog.html":{}}}],["8232e66",{"_index":800,"title":{},"body":{"changelog.html":{}}}],["83",{"_index":661,"title":{},"body":{"changelog.html":{}}}],["858b3f8",{"_index":905,"title":{},"body":{"changelog.html":{}}}],["862249f",{"_index":606,"title":{},"body":{"changelog.html":{}}}],["86e366c",{"_index":648,"title":{},"body":{"changelog.html":{}}}],["8e3f108",{"_index":813,"title":{},"body":{"changelog.html":{}}}],["9",{"_index":645,"title":{},"body":{"changelog.html":{}}}],["9236e02",{"_index":851,"title":{},"body":{"changelog.html":{}}}],["927235e",{"_index":866,"title":{},"body":{"changelog.html":{}}}],["930de54",{"_index":620,"title":{},"body":{"changelog.html":{}}}],["93a5c4e",{"_index":836,"title":{},"body":{"changelog.html":{}}}],["94dc48d",{"_index":664,"title":{},"body":{"changelog.html":{}}}],["9557c0a",{"_index":914,"title":{},"body":{"changelog.html":{}}}],["9597986",{"_index":867,"title":{},"body":{"changelog.html":{}}}],["99d2f66",{"_index":823,"title":{},"body":{"changelog.html":{}}}],["9]*)px",{"_index":130,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["9c76aac",{"_index":909,"title":{},"body":{"changelog.html":{}}}],["9f9c54a",{"_index":959,"title":{},"body":{"changelog.html":{}}}],["a0323e9",{"_index":761,"title":{},"body":{"changelog.html":{}}}],["a056154",{"_index":751,"title":{},"body":{"changelog.html":{}}}],["a74f9e2",{"_index":805,"title":{},"body":{"changelog.html":{}}}],["a8e5cd3",{"_index":1006,"title":{},"body":{"changelog.html":{}}}],["aa169c7",{"_index":830,"title":{},"body":{"changelog.html":{}}}],["above",{"_index":631,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["absolute",{"_index":133,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"index.html":{}}}],["action",{"_index":1160,"title":{},"body":{"license.html":{}}}],["active",{"_index":181,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["add",{"_index":388,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["af7abf7",{"_index":707,"title":{},"body":{"changelog.html":{}}}],["align",{"_index":1049,"title":{},"body":{"index.html":{}}}],["allow",{"_index":203,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["allownegativeresizes",{"_index":233,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["allows",{"_index":1040,"title":{},"body":{"index.html":{},"properties.html":{}}}],["always",{"_index":685,"title":{},"body":{"changelog.html":{}}}],["amount",{"_index":960,"title":{},"body":{"changelog.html":{}}}],["and/or",{"_index":1128,"title":{},"body":{"license.html":{}}}],["angular",{"_index":376,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["angular/common",{"_index":56,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["angular/core",{"_index":54,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"dependencies.html":{},"index.html":{}}}],["angular2",{"_index":865,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["any).eventlisteners[type",{"_index":522,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["aot",{"_index":850,"title":{},"body":{"changelog.html":{}}}],["api",{"_index":568,"title":{},"body":{"changelog.html":{}}}],["app",{"_index":918,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["applications",{"_index":765,"title":{},"body":{"changelog.html":{}}}],["applying",{"_index":928,"title":{},"body":{"changelog.html":{}}}],["apps",{"_index":1071,"title":{},"body":{"index.html":{}}}],["arising",{"_index":1164,"title":{},"body":{"license.html":{}}}],["associated",{"_index":1118,"title":{},"body":{"license.html":{}}}],["author",{"_index":1179,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":1153,"title":{},"body":{"license.html":{}}}],["auto",{"_index":841,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["b77c9fc",{"_index":794,"title":{},"body":{"changelog.html":{}}}],["bac87e3",{"_index":1023,"title":{},"body":{"changelog.html":{}}}],["back",{"_index":759,"title":{},"body":{"changelog.html":{}}}],["background",{"_index":1056,"title":{},"body":{"index.html":{}}}],["be5d727",{"_index":775,"title":{},"body":{"changelog.html":{}}}],["before",{"_index":200,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["begin",{"_index":240,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["begun",{"_index":244,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["behaviour",{"_index":990,"title":{},"body":{"changelog.html":{}}}],["being",{"_index":861,"title":{},"body":{"changelog.html":{}}}],["between",{"_index":214,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["bf497d2",{"_index":1002,"title":{},"body":{"changelog.html":{}}}],["boolean",{"_index":208,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["booleans",{"_index":986,"title":{},"body":{"changelog.html":{}}}],["bootstrap",{"_index":1072,"title":{},"body":{"index.html":{}}}],["border",{"_index":1059,"title":{},"body":{"index.html":{}}}],["bottom",{"_index":17,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["bottomleft",{"_index":151,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["bottomright",{"_index":152,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["bounding",{"_index":11,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{}}}],["boundingrect",{"_index":138,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.bottom",{"_index":143,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.height",{"_index":140,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.left",{"_index":144,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.right",{"_index":145,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.top",{"_index":142,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.width",{"_index":141,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrectangle",{"_index":1,"title":{"interfaces/BoundingRectangle.html":{}},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["box",{"_index":1064,"title":{},"body":{"index.html":{}}}],["breaking",{"_index":552,"title":{},"body":{"changelog.html":{}}}],["broken",{"_index":923,"title":{},"body":{"changelog.html":{}}}],["browse",{"_index":1168,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":374,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["browsers",{"_index":952,"title":{},"body":{"changelog.html":{}}}],["bug",{"_index":543,"title":{},"body":{"changelog.html":{}}}],["bugs",{"_index":1174,"title":{},"body":{"properties.html":{}}}],["build",{"_index":559,"title":{},"body":{"changelog.html":{}}}],["bundle",{"_index":997,"title":{},"body":{"changelog.html":{}}}],["bundling",{"_index":710,"title":{},"body":{"changelog.html":{}}}],["c",{"_index":1107,"title":{},"body":{"license.html":{}}}],["c4519a1",{"_index":711,"title":{},"body":{"changelog.html":{}}}],["c60b3f5",{"_index":955,"title":{},"body":{"changelog.html":{}}}],["c76be59",{"_index":948,"title":{},"body":{"changelog.html":{}}}],["c7e3de6",{"_index":697,"title":{},"body":{"changelog.html":{}}}],["c85a28d",{"_index":613,"title":{},"body":{"changelog.html":{}}}],["c973e74",{"_index":564,"title":{},"body":{"changelog.html":{}}}],["call",{"_index":937,"title":{},"body":{"changelog.html":{}}}],["called",{"_index":199,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["calling",{"_index":546,"title":{},"body":{"changelog.html":{}}}],["camel",{"_index":911,"title":{},"body":{"changelog.html":{}}}],["cancel",{"_index":206,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["cancelable",{"_index":545,"title":{},"body":{"changelog.html":{}}}],["canvas",{"_index":596,"title":{},"body":{"changelog.html":{}}}],["case",{"_index":190,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["cbe088f",{"_index":897,"title":{},"body":{"changelog.html":{}}}],["center",{"_index":1051,"title":{},"body":{"index.html":{}}}],["change",{"_index":617,"title":{},"body":{"changelog.html":{}}}],["changed",{"_index":724,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":530,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":532,"title":{},"body":{"changelog.html":{}}}],["changing",{"_index":640,"title":{},"body":{"changelog.html":{}}}],["charge",{"_index":1114,"title":{},"body":{"license.html":{}}}],["check",{"_index":375,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["claim",{"_index":1156,"title":{},"body":{"license.html":{}}}],["class",{"_index":196,"title":{"classes/PointerEventListeners.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{},"overview.html":{}}}],["classes",{"_index":428,"title":{},"body":{"classes/PointerEventListeners.html":{},"changelog.html":{}}}],["cli",{"_index":600,"title":{},"body":{"changelog.html":{}}}],["clientx",{"_index":86,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{}}}],["clienty",{"_index":87,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{}}}],["clone",{"_index":927,"title":{},"body":{"changelog.html":{}}}],["cloned",{"_index":749,"title":{},"body":{"changelog.html":{}}}],["clonednode",{"_index":275,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["closes",{"_index":602,"title":{},"body":{"changelog.html":{}}}],["co",{"_index":938,"title":{},"body":{"changelog.html":{}}}],["col",{"_index":162,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["color",{"_index":1057,"title":{},"body":{"index.html":{}}}],["commit",{"_index":538,"title":{},"body":{"changelog.html":{}}}],["compatibility",{"_index":659,"title":{},"body":{"changelog.html":{}}}],["compilation",{"_index":580,"title":{},"body":{"changelog.html":{}}}],["completely",{"_index":957,"title":{},"body":{"changelog.html":{}}}],["component",{"_index":680,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["con",{"_index":964,"title":{},"body":{"changelog.html":{}}}],["conditions",{"_index":1135,"title":{},"body":{"license.html":{}}}],["configs",{"_index":733,"title":{},"body":{"changelog.html":{}}}],["configured",{"_index":793,"title":{},"body":{"changelog.html":{}}}],["connection",{"_index":1166,"title":{},"body":{"license.html":{}}}],["console.log('element",{"_index":1070,"title":{},"body":{"index.html":{}}}],["const",{"_index":94,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["constructor",{"_index":254,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["constructor(renderer",{"_index":398,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["contain",{"_index":984,"title":{},"body":{"changelog.html":{}}}],["contains",{"_index":481,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["content",{"_index":1053,"title":{},"body":{"index.html":{}}}],["contents",{"_index":1034,"title":{},"body":{"index.html":{}}}],["continually",{"_index":1102,"title":{},"body":{"index.html":{}}}],["contract",{"_index":1161,"title":{},"body":{"license.html":{}}}],["coordinate",{"_index":38,"title":{"interfaces/Coordinate.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["coords",{"_index":306,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["copies",{"_index":1130,"title":{},"body":{"license.html":{}}}],["copy",{"_index":595,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["copyright",{"_index":1106,"title":{},"body":{"license.html":{}}}],["core",{"_index":876,"title":{},"body":{"changelog.html":{}}}],["corepack",{"_index":1087,"title":{},"body":{"index.html":{}}}],["corners",{"_index":1022,"title":{},"body":{"changelog.html":{}}}],["correct",{"_index":563,"title":{},"body":{"changelog.html":{}}}],["create",{"_index":926,"title":{},"body":{"changelog.html":{}}}],["css",{"_index":625,"title":{},"body":{"changelog.html":{}}}],["cssclasses",{"_index":808,"title":{},"body":{"changelog.html":{}}}],["current",{"_index":1090,"title":{},"body":{"index.html":{}}}],["currentrect",{"_index":274,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize",{"_index":269,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize!.currentrect",{"_index":343,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize!.edges",{"_index":329,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize!.startingrect",{"_index":328,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.clonednode",{"_index":279,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.clonednode!.scrollleft",{"_index":365,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.clonednode!.scrolltop",{"_index":363,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.edges.bottom",{"_index":304,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.edges.left",{"_index":296,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.edges.right",{"_index":299,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.edges.top",{"_index":301,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.startingrect",{"_index":364,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.startingrect.height}px",{"_index":360,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.startingrect.left}px",{"_index":358,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.startingrect.top}px",{"_index":359,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.startingrect.width}px",{"_index":361,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["cursor",{"_index":349,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["cursorprecision",{"_index":814,"title":{},"body":{"changelog.html":{}}}],["cursors",{"_index":165,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["cursors.bottomleft",{"_index":168,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["cursors.bottomright",{"_index":169,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["cursors.leftorright",{"_index":170,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["cursors.topleft",{"_index":166,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["cursors.toporbottom",{"_index":171,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["cursors.topright",{"_index":167,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["customised",{"_index":822,"title":{},"body":{"changelog.html":{}}}],["d5b18cc",{"_index":900,"title":{},"body":{"changelog.html":{}}}],["d5ea756",{"_index":847,"title":{},"body":{"changelog.html":{}}}],["d65c257",{"_index":599,"title":{},"body":{"changelog.html":{}}}],["d664038",{"_index":962,"title":{},"body":{"changelog.html":{}}}],["d9ad08c",{"_index":582,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":1157,"title":{},"body":{"license.html":{}}}],["dash",{"_index":912,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":1119,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1167,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":456,"title":{},"body":{"modules/ResizableModule.html":{},"index.html":{}}}],["dedc3bb",{"_index":931,"title":{},"body":{"changelog.html":{}}}],["deepclonenode",{"_index":82,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["deepclonenode(this.elm.nativeelement",{"_index":354,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["default",{"_index":237,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["default_resize_cursors",{"_index":155,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":228,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["defined",{"_index":32,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Edges.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"directives/ResizeHandleDirective.html":{}}}],["delete",{"_index":523,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["demo",{"_index":917,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["depend",{"_index":811,"title":{},"body":{"changelog.html":{}}}],["dependencies",{"_index":1024,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["dependency",{"_index":647,"title":{},"body":{"changelog.html":{}}}],["deprecate",{"_index":665,"title":{},"body":{"changelog.html":{}}}],["deprecated",{"_index":593,"title":{},"body":{"changelog.html":{}}}],["description",{"_index":10,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Edges.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"properties.html":{}}}],["destroy",{"_index":253,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["destroyed",{"_index":846,"title":{},"body":{"changelog.html":{}}}],["destroying",{"_index":678,"title":{},"body":{"changelog.html":{}}}],["detection",{"_index":618,"title":{},"body":{"changelog.html":{}}}],["dev",{"_index":1089,"title":{},"body":{"index.html":{}}}],["development",{"_index":1037,"title":{},"body":{"index.html":{}}}],["device",{"_index":81,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["devices",{"_index":611,"title":{},"body":{"changelog.html":{}}}],["di",{"_index":515,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["dimensions",{"_index":232,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["directive",{"_index":43,"title":{"directives/ResizableDirective.html":{},"directives/ResizeHandleDirective.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["directives",{"_index":438,"title":{},"body":{"directives/ResizableDirective.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"overview.html":{}}}],["directory",{"_index":1091,"title":{},"body":{"index.html":{}}}],["disable",{"_index":949,"title":{},"body":{"changelog.html":{}}}],["disableresize",{"_index":956,"title":{},"body":{"changelog.html":{}}}],["disabling",{"_index":958,"title":{},"body":{"changelog.html":{}}}],["display",{"_index":1047,"title":{},"body":{"index.html":{}}}],["dist",{"_index":904,"title":{},"body":{"changelog.html":{}}}],["distribute",{"_index":1126,"title":{},"body":{"license.html":{}}}],["document",{"_index":380,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["documentation",{"_index":1036,"title":{},"body":{"index.html":{},"license.html":{}}}],["documented",{"_index":534,"title":{},"body":{"changelog.html":{}}}],["doesn't",{"_index":378,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["don't",{"_index":674,"title":{},"body":{"changelog.html":{}}}],["dont",{"_index":853,"title":{},"body":{"changelog.html":{}}}],["drag",{"_index":471,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["dragged",{"_index":243,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"index.html":{},"properties.html":{}}}],["dragging",{"_index":483,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["draghandle",{"_index":768,"title":{},"body":{"changelog.html":{}}}],["drop",{"_index":907,"title":{},"body":{"changelog.html":{}}}],["dynamically",{"_index":736,"title":{},"body":{"changelog.html":{}}}],["e.g",{"_index":222,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["e722a86",{"_index":1012,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":201,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["eb314fd",{"_index":944,"title":{},"body":{"changelog.html":{}}}],["edf56db",{"_index":627,"title":{},"body":{"changelog.html":{}}}],["edge",{"_index":961,"title":{},"body":{"changelog.html":{}}}],["edges",{"_index":71,"title":{"interfaces/Edges.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["edges.bottom",{"_index":102,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["edges.interface",{"_index":465,"title":{},"body":{"interfaces/ResizeEvent.html":{}}}],["edges.left",{"_index":104,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["edges.right",{"_index":106,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["edges.top",{"_index":100,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["edgesdiff",{"_index":175,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["edgesdiff[edge",{"_index":177,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["edited",{"_index":816,"title":{},"body":{"changelog.html":{}}}],["effect",{"_index":213,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["effects",{"_index":950,"title":{},"body":{"changelog.html":{}}}],["element",{"_index":14,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["element#readme",{"_index":1173,"title":{},"body":{"properties.html":{}}}],["element.git",{"_index":1178,"title":{},"body":{"properties.html":{}}}],["element.js",{"_index":726,"title":{},"body":{"changelog.html":{}}}],["element.nativeelement.getboundingclientrect",{"_index":139,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.offsetheight",{"_index":134,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.offsetleft",{"_index":137,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.offsettop",{"_index":136,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.offsetwidth",{"_index":135,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.scrollleft",{"_index":147,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.scrolltop",{"_index":146,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.style",{"_index":117,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.umd.js",{"_index":728,"title":{},"body":{"changelog.html":{}}}],["element/bundles/angular",{"_index":727,"title":{},"body":{"changelog.html":{}}}],["element/dist/umd/angular",{"_index":725,"title":{},"body":{"changelog.html":{}}}],["element/docs",{"_index":1080,"title":{},"body":{"index.html":{}}}],["element/issues",{"_index":1175,"title":{},"body":{"properties.html":{}}}],["element/src/lib/interfaces/bounding",{"_index":8,"title":{},"body":{"interfaces/BoundingRectangle.html":{}}}],["element/src/lib/interfaces/edges.interface.ts",{"_index":425,"title":{},"body":{"interfaces/Edges.html":{}}}],["element/src/lib/interfaces/edges.interface.ts:8",{"_index":427,"title":{},"body":{"interfaces/Edges.html":{}}}],["element/src/lib/interfaces/resize",{"_index":462,"title":{},"body":{"interfaces/ResizeEvent.html":{}}}],["element/src/lib/resizable.directive.ts",{"_index":39,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["element/src/lib/resizable.directive.ts:213",{"_index":448,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["element/src/lib/resizable.directive.ts:218",{"_index":443,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["element/src/lib/resizable.directive.ts:225",{"_index":447,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["element/src/lib/resizable.directive.ts:230",{"_index":446,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["element/src/lib/resizable.directive.ts:235",{"_index":444,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["element/src/lib/resizable.directive.ts:240",{"_index":442,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["element/src/lib/resizable.directive.ts:245",{"_index":445,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["element/src/lib/resizable.directive.ts:250",{"_index":450,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["element/src/lib/resizable.directive.ts:255",{"_index":451,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["element/src/lib/resizable.directive.ts:260",{"_index":449,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["element/src/lib/resizable.directive.ts:670",{"_index":432,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["element/src/lib/resizable.directive.ts:672",{"_index":433,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["element/src/lib/resizable.directive.ts:674",{"_index":434,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["element/src/lib/resizable.directive.ts:678",{"_index":436,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["element/src/lib/resizable.directive.ts:689",{"_index":430,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["element/src/lib/resizable.module.ts",{"_index":455,"title":{},"body":{"modules/ResizableModule.html":{}}}],["element/src/lib/resize",{"_index":466,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["elementref",{"_index":45,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{}}}],["elements",{"_index":192,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["elementthen",{"_index":1044,"title":{},"body":{"index.html":{}}}],["elm",{"_index":258,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["emitted",{"_index":686,"title":{},"body":{"changelog.html":{}}}],["enable",{"_index":210,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["enableghostresize",{"_index":218,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["enableresizestyling",{"_index":932,"title":{},"body":{"changelog.html":{}}}],["enableresizestyling]=\"true",{"_index":981,"title":{},"body":{"changelog.html":{}}}],["ensure",{"_index":684,"title":{},"body":{"changelog.html":{}}}],["entry",{"_index":722,"title":{},"body":{"changelog.html":{}}}],["environment",{"_index":1082,"title":{},"body":{"index.html":{}}}],["errors",{"_index":676,"title":{},"body":{"changelog.html":{}}}],["event",{"_index":88,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["event.cancelable",{"_index":270,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["event.changedtouches[0].clientx",{"_index":422,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.changedtouches[0].clienty",{"_index":423,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.clientx",{"_index":405,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.clienty",{"_index":406,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.edges",{"_index":982,"title":{},"body":{"changelog.html":{}}}],["event.interface",{"_index":77,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["event.interface.ts",{"_index":463,"title":{},"body":{"interfaces/ResizeEvent.html":{}}}],["event.preventdefault",{"_index":271,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.targettouches[0].clientx",{"_index":415,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["event.targettouches[0].clienty",{"_index":416,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["event.touches[0].clientx",{"_index":408,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.touches[0].clienty",{"_index":409,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["eventemitter",{"_index":49,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["eventlisteners",{"_index":486,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["eventname).pipe",{"_index":527,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["events",{"_index":217,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{}}}],["example",{"_index":188,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["existing",{"_index":624,"title":{},"body":{"changelog.html":{}}}],["export",{"_index":35,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["exportas",{"_index":195,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["exported",{"_index":916,"title":{},"body":{"changelog.html":{}}}],["exports",{"_index":458,"title":{},"body":{"modules/ResizableModule.html":{}}}],["expose",{"_index":566,"title":{},"body":{"changelog.html":{}}}],["express",{"_index":1144,"title":{},"body":{"license.html":{}}}],["f24a746",{"_index":740,"title":{},"body":{"changelog.html":{}}}],["f3fe12a",{"_index":883,"title":{},"body":{"changelog.html":{}}}],["f440c87",{"_index":1021,"title":{},"body":{"changelog.html":{}}}],["fa73345",{"_index":930,"title":{},"body":{"changelog.html":{}}}],["false",{"_index":205,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["favour",{"_index":668,"title":{},"body":{"changelog.html":{}}}],["fb5599b",{"_index":642,"title":{},"body":{"changelog.html":{}}}],["fd4140",{"_index":1058,"title":{},"body":{"index.html":{}}}],["fe49114",{"_index":996,"title":{},"body":{"changelog.html":{}}}],["features",{"_index":577,"title":{},"body":{"changelog.html":{}}}],["ffad2ca",{"_index":913,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["files",{"_index":885,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["filter",{"_index":65,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["filter(([previouscoords",{"_index":316,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["filter((edges",{"_index":344,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["filter((newboundingrect",{"_index":330,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["find",{"_index":1074,"title":{},"body":{"index.html":{}}}],["find((value",{"_index":125,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["firefox",{"_index":770,"title":{},"body":{"changelog.html":{}}}],["fires",{"_index":947,"title":{},"body":{"changelog.html":{}}}],["fit",{"_index":970,"title":{},"body":{"changelog.html":{}}}],["fitness",{"_index":1149,"title":{},"body":{"license.html":{}}}],["fix",{"_index":769,"title":{},"body":{"changelog.html":{}}}],["fixed",{"_index":230,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["fixes",{"_index":544,"title":{},"body":{"changelog.html":{}}}],["flex",{"_index":1048,"title":{},"body":{"index.html":{}}}],["flicker",{"_index":1009,"title":{},"body":{"changelog.html":{}}}],["following",{"_index":1134,"title":{},"body":{"license.html":{}}}],["free",{"_index":1113,"title":{},"body":{"license.html":{}}}],["fromevent",{"_index":485,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["fromevent(this.element.nativeelement",{"_index":526,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["full",{"_index":591,"title":{},"body":{"changelog.html":{}}}],["function",{"_index":91,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["functions",{"_index":1027,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":1133,"title":{},"body":{"license.html":{}}}],["generated",{"_index":1077,"title":{},"body":{"index.html":{}}}],["getdiff(movecoords",{"_index":288,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getdiff(newcoords",{"_index":315,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getdiff(previouscoords",{"_index":314,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getedgesdiff",{"_index":172,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["getedgesdiff(__namedparameters",{"_index":1030,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getelementrect",{"_index":111,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["getelementrect(element",{"_index":1031,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getgrid",{"_index":305,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getgrid(newcoords",{"_index":319,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getinstance",{"_index":396,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getinstance(renderer",{"_index":435,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["getnewboundingrectangle",{"_index":92,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["getnewboundingrectangle(startingrect",{"_index":368,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["getresizecursor",{"_index":1029,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getresizecursor(currentresize.edges",{"_index":350,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getresizecursor(edges",{"_index":164,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["getresizecursors",{"_index":284,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getsnapgrid",{"_index":293,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getting",{"_index":528,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["ghost",{"_index":183,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["ghostelementpositioning",{"_index":112,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["git+https://github.com/mattlewis92/angular",{"_index":1177,"title":{},"body":{"properties.html":{}}}],["gives",{"_index":809,"title":{},"body":{"changelog.html":{}}}],["global",{"_index":714,"title":{},"body":{"changelog.html":{}}}],["globally",{"_index":742,"title":{},"body":{"changelog.html":{}}}],["granted",{"_index":1112,"title":{},"body":{"license.html":{}}}],["grid",{"_index":220,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["guidelines",{"_index":539,"title":{},"body":{"changelog.html":{}}}],["handle",{"_index":472,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["handle.directive",{"_index":461,"title":{},"body":{"modules/ResizableModule.html":{}}}],["handle.directive.ts",{"_index":467,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["handle.directive.ts:40",{"_index":480,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["handle.directive.ts:44",{"_index":477,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["handle.directive.ts:52",{"_index":476,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["handlers",{"_index":753,"title":{},"body":{"changelog.html":{}}}],["handles",{"_index":669,"title":{},"body":{"changelog.html":{}}}],["height",{"_index":19,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["here",{"_index":1079,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":1111,"title":{},"body":{"license.html":{}}}],["hidden",{"_index":246,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["higher",{"_index":554,"title":{},"body":{"changelog.html":{}}}],["holders",{"_index":1154,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":1171,"title":{},"body":{"properties.html":{}}}],["host",{"_index":679,"title":{},"body":{"changelog.html":{}}}],["html",{"_index":189,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["htmlelement",{"_index":276,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["https://github.com/mattlewis92/angular",{"_index":1172,"title":{},"body":{"properties.html":{}}}],["https://mattlewis92.github.io/angular",{"_index":1032,"title":{},"body":{"index.html":{}}}],["ie11",{"_index":760,"title":{},"body":{"changelog.html":{}}}],["immediately",{"_index":677,"title":{},"body":{"changelog.html":{}}}],["implementation",{"_index":1016,"title":{},"body":{"changelog.html":{}}}],["implements",{"_index":198,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["implied",{"_index":1145,"title":{},"body":{"license.html":{}}}],["import",{"_index":42,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["imports",{"_index":903,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["improve",{"_index":693,"title":{},"body":{"changelog.html":{}}}],["improvements",{"_index":609,"title":{},"body":{"changelog.html":{}}}],["include",{"_index":875,"title":{},"body":{"changelog.html":{}}}],["included",{"_index":1138,"title":{},"body":{"license.html":{}}}],["including",{"_index":1122,"title":{},"body":{"license.html":{}}}],["index",{"_index":15,"title":{"index.html":{}},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":26,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Edges.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{}}}],["inherit",{"_index":283,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["initial",{"_index":1014,"title":{},"body":{"changelog.html":{}}}],["initialise",{"_index":651,"title":{},"body":{"changelog.html":{}}}],["initialrectangle",{"_index":173,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["initialrectangle[edge",{"_index":179,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["inject",{"_index":52,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["inject(platform_id",{"_index":255,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["input",{"_index":48,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["inputs",{"_index":440,"title":{},"body":{"directives/ResizableDirective.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["inside",{"_index":469,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["install",{"_index":1041,"title":{},"body":{"index.html":{}}}],["installation",{"_index":1035,"title":{},"body":{"index.html":{}}}],["instance",{"_index":395,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["instances",{"_index":789,"title":{},"body":{"changelog.html":{}}}],["instead",{"_index":589,"title":{},"body":{"changelog.html":{}}}],["interface",{"_index":0,"title":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{}},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{},"overview.html":{}}}],["interfaces/bounding",{"_index":73,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["interfaces/edges.interface",{"_index":72,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["interfaces/resize",{"_index":76,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["is_touch_device",{"_index":78,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["isplatformbrowser",{"_index":55,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["isplatformbrowser(this.platformid",{"_index":381,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["items",{"_index":1050,"title":{},"body":{"index.html":{}}}],["ivy",{"_index":579,"title":{},"body":{"changelog.html":{}}}],["js",{"_index":877,"title":{},"body":{"changelog.html":{}}}],["justify",{"_index":1052,"title":{},"body":{"index.html":{}}}],["keep",{"_index":835,"title":{},"body":{"changelog.html":{}}}],["key",{"_index":27,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Edges.html":{},"directives/ResizeHandleDirective.html":{}}}],["keywords",{"_index":1170,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":1143,"title":{},"body":{"license.html":{}}}],["know",{"_index":379,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["last",{"_index":940,"title":{},"body":{"changelog.html":{}}}],["lazily",{"_index":650,"title":{},"body":{"changelog.html":{}}}],["left",{"_index":20,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["leftorright",{"_index":153,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["lettable",{"_index":705,"title":{},"body":{"changelog.html":{}}}],["level",{"_index":666,"title":{},"body":{"changelog.html":{}}}],["lewis",{"_index":1109,"title":{},"body":{"license.html":{},"properties.html":{}}}],["liability",{"_index":1158,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1155,"title":{},"body":{"license.html":{}}}],["library",{"_index":720,"title":{},"body":{"changelog.html":{}}}],["license",{"_index":1038,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["limitation",{"_index":1123,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1146,"title":{},"body":{"license.html":{}}}],["listen",{"_index":610,"title":{},"body":{"changelog.html":{}}}],["listener",{"_index":786,"title":{},"body":{"changelog.html":{}}}],["listeners",{"_index":652,"title":{},"body":{"changelog.html":{}}}],["listenonthehost(eventname",{"_index":525,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["local",{"_index":1088,"title":{},"body":{"index.html":{}}}],["located",{"_index":479,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["locked",{"_index":221,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["longer",{"_index":716,"title":{},"body":{"changelog.html":{}}}],["main",{"_index":810,"title":{},"body":{"changelog.html":{}}}],["make",{"_index":187,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["map",{"_index":62,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["map(([previouscoords",{"_index":311,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["map((property",{"_index":123,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["margin",{"_index":1063,"title":{},"body":{"index.html":{}}}],["matching",{"_index":37,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(coords.clientx",{"_index":307,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["math.ceil(coords.clienty",{"_index":308,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["math.round(newcoords.clientx",{"_index":324,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["math.round(newcoords.clienty",{"_index":325,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["matt",{"_index":1108,"title":{},"body":{"license.html":{},"properties.html":{}}}],["merchantability",{"_index":1148,"title":{},"body":{"license.html":{}}}],["merge",{"_index":60,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"license.html":{}}}],["merge(this.pointereventlisteners.pointerdown",{"_index":264,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["merge(this.pointereventlisteners.pointerup",{"_index":272,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["mergemap",{"_index":63,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["mergemap((startcoords",{"_index":287,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["metadata",{"_index":439,"title":{},"body":{"directives/ResizableDirective.html":{},"directives/ResizeHandleDirective.html":{}}}],["methods",{"_index":429,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["migrate",{"_index":587,"title":{},"body":{"changelog.html":{}}}],["milliseconds",{"_index":236,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["miscellaneous",{"_index":1026,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":992,"title":{},"body":{"changelog.html":{}}}],["mit",{"_index":1105,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["mode",{"_index":581,"title":{},"body":{"changelog.html":{}}}],["modified",{"_index":717,"title":{},"body":{"changelog.html":{}}}],["modify",{"_index":1125,"title":{},"body":{"license.html":{}}}],["module",{"_index":452,"title":{"modules/ResizableModule.html":{}},"body":{"index.html":{},"overview.html":{}}}],["modules",{"_index":454,"title":{"modules.html":{}},"body":{"modules/ResizableModule.html":{},"modules.html":{}}}],["mouse",{"_index":226,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["mouse_move_throttle_ms",{"_index":184,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["mousedown",{"_index":249,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["mousedrag",{"_index":286,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["mouseevent",{"_index":89,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["mousemove",{"_index":250,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["mousemove$.pipe(pairwise",{"_index":310,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["mousemove$.pipe(take(1)).pipe(map((coords",{"_index":309,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["mousemoveevent",{"_index":508,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["mousemoveevent.clientx",{"_index":509,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["mousemoveevent.clienty",{"_index":510,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["mousemovethrottlems",{"_index":238,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["mouseup",{"_index":248,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["mouseup$.pipe(takeuntil(this.destroy$)).subscribe",{"_index":369,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["mousing",{"_index":1019,"title":{},"body":{"changelog.html":{}}}],["move",{"_index":234,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["movecoords.clientx",{"_index":289,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["movecoords.clienty",{"_index":291,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["moz",{"_index":121,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["ms",{"_index":120,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["multiple",{"_index":1000,"title":{},"body":{"changelog.html":{}}}],["mwl",{"_index":915,"title":{},"body":{"changelog.html":{}}}],["mwlresizable",{"_index":194,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["mwlresizehandle",{"_index":473,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["mycomponent",{"_index":1068,"title":{},"body":{"index.html":{}}}],["mymodule",{"_index":1073,"title":{},"body":{"index.html":{}}}],["name",{"_index":387,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{}}}],["ne",{"_index":159,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["need",{"_index":731,"title":{},"body":{"changelog.html":{}}}],["needed",{"_index":654,"title":{},"body":{"changelog.html":{}}}],["negative",{"_index":231,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["nesting",{"_index":968,"title":{},"body":{"changelog.html":{}}}],["new",{"_index":242,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["newboundingrect",{"_index":95,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.bottom",{"_index":103,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.height",{"_index":108,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.height}px",{"_index":336,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.left",{"_index":105,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.left}px",{"_index":339,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.right",{"_index":107,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.top",{"_index":101,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.top}px",{"_index":338,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.width",{"_index":109,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.width}px",{"_index":337,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newcoords",{"_index":312,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newgrid",{"_index":318,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newgrid.x",{"_index":321,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newgrid.y",{"_index":323,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newrectangle",{"_index":174,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["newrectangle[edge",{"_index":178,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["ng",{"_index":708,"title":{},"body":{"changelog.html":{}}}],["ng4",{"_index":780,"title":{},"body":{"changelog.html":{}}}],["ngmodule",{"_index":459,"title":{},"body":{"modules/ResizableModule.html":{},"index.html":{}}}],["ngondestroy",{"_index":373,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["ngoninit",{"_index":262,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["ngzone",{"_index":51,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["node",{"_index":84,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["node.js",{"_index":1083,"title":{},"body":{"index.html":{}}}],["node_modules/angular",{"_index":870,"title":{},"body":{"changelog.html":{}}}],["node_modules/angular2",{"_index":886,"title":{},"body":{"changelog.html":{}}}],["noninfringement",{"_index":1152,"title":{},"body":{"license.html":{}}}],["notable",{"_index":531,"title":{},"body":{"changelog.html":{}}}],["notice",{"_index":1136,"title":{},"body":{"license.html":{}}}],["now",{"_index":555,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["npm",{"_index":1043,"title":{},"body":{"index.html":{}}}],["null",{"_index":277,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["number",{"_index":29,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["numbers",{"_index":985,"title":{},"body":{"changelog.html":{}}}],["nw",{"_index":157,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["o",{"_index":122,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["object",{"_index":241,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["object.freeze",{"_index":156,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["object.keys(edges).foreach((edge",{"_index":176,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["object.keys(edges).length",{"_index":345,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["object.keys(this.eventlisteners).foreach((type",{"_index":521,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["observable",{"_index":58,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["observables",{"_index":845,"title":{},"body":{"changelog.html":{}}}],["observer",{"_index":59,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["observer.next",{"_index":404,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["obtaining",{"_index":1116,"title":{},"body":{"license.html":{}}}],["offline",{"_index":881,"title":{},"body":{"changelog.html":{}}}],["old",{"_index":989,"title":{},"body":{"changelog.html":{}}}],["once",{"_index":1100,"title":{},"body":{"index.html":{}}}],["ondestroy",{"_index":50,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["oninit",{"_index":46,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["onmousedown",{"_index":499,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["onmousemove",{"_index":518,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["onmouseup(clientx",{"_index":513,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["onresize",{"_index":920,"title":{},"body":{"changelog.html":{}}}],["onresizeend",{"_index":921,"title":{},"body":{"changelog.html":{}}}],["onresizeend(event",{"_index":1069,"title":{},"body":{"index.html":{}}}],["onresizestart",{"_index":919,"title":{},"body":{"changelog.html":{}}}],["operator",{"_index":902,"title":{},"body":{"changelog.html":{}}}],["operators",{"_index":706,"title":{},"body":{"changelog.html":{}}}],["opt",{"_index":963,"title":{},"body":{"changelog.html":{}}}],["option",{"_index":667,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["optional",{"_index":18,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Edges.html":{},"classes/PointerEventListeners.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["ordinates",{"_index":939,"title":{},"body":{"changelog.html":{}}}],["otherwise",{"_index":1163,"title":{},"body":{"license.html":{}}}],["out",{"_index":1165,"title":{},"body":{"license.html":{}}}],["output",{"_index":47,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["outputs",{"_index":441,"title":{},"body":{"directives/ResizableDirective.html":{},"changelog.html":{}}}],["outside",{"_index":755,"title":{},"body":{"changelog.html":{}}}],["over",{"_index":1020,"title":{},"body":{"changelog.html":{}}}],["overview",{"_index":1169,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":558,"title":{"dependencies.html":{},"properties.html":{}},"body":{"changelog.html":{}}}],["packagr",{"_index":709,"title":{},"body":{"changelog.html":{}}}],["pairwise",{"_index":66,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["parameters",{"_index":431,"title":{},"body":{"classes/PointerEventListeners.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":482,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["part",{"_index":567,"title":{},"body":{"changelog.html":{}}}],["partial",{"_index":227,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["particular",{"_index":1150,"title":{},"body":{"license.html":{}}}],["passed",{"_index":464,"title":{},"body":{"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{}}}],["path",{"_index":884,"title":{},"body":{"changelog.html":{}}}],["peer",{"_index":646,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["peerdependencies",{"_index":893,"title":{},"body":{"changelog.html":{}}}],["performance",{"_index":608,"title":{},"body":{"changelog.html":{}}}],["permission",{"_index":1110,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1131,"title":{},"body":{"license.html":{}}}],["person",{"_index":1115,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1132,"title":{},"body":{"license.html":{}}}],["pipe",{"_index":268,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pipe(filter",{"_index":327,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pipe(share",{"_index":410,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pipe(takeuntil(merge(mouseup",{"_index":326,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["place",{"_index":186,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["placed",{"_index":468,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["platform_id",{"_index":53,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["platformid",{"_index":256,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["please",{"_index":588,"title":{},"body":{"changelog.html":{}}}],["pnpm",{"_index":1086,"title":{},"body":{"index.html":{}}}],["point",{"_index":723,"title":{},"body":{"changelog.html":{}}}],["pointerdown",{"_index":391,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointereventcoordinate",{"_index":85,"title":{"interfaces/PointerEventCoordinate.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointereventlisteners",{"_index":252,"title":{"classes/PointerEventListeners.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointereventlisteners.getinstance",{"_index":261,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointereventlisteners.instance",{"_index":397,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointermove",{"_index":392,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointerup",{"_index":393,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pojo",{"_index":945,"title":{},"body":{"changelog.html":{}}}],["port",{"_index":1094,"title":{},"body":{"index.html":{}}}],["portions",{"_index":1140,"title":{},"body":{"license.html":{}}}],["position",{"_index":357,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["positioning",{"_index":229,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["post",{"_index":895,"title":{},"body":{"changelog.html":{}}}],["precision",{"_index":815,"title":{},"body":{"changelog.html":{}}}],["prefix",{"_index":908,"title":{},"body":{"changelog.html":{}}}],["prepare",{"_index":1081,"title":{},"body":{"index.html":{}}}],["pressed",{"_index":239,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["prevent",{"_index":859,"title":{},"body":{"changelog.html":{}}}],["preventdefault",{"_index":547,"title":{},"body":{"changelog.html":{}}}],["previous",{"_index":934,"title":{},"body":{"changelog.html":{}}}],["previouscoords",{"_index":313,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["previousgrid",{"_index":317,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["previousgrid.x",{"_index":320,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["previousgrid.y",{"_index":322,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["private",{"_index":251,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["project",{"_index":533,"title":{},"body":{"changelog.html":{}}}],["projects/.../resizable.directive.ts",{"_index":1028,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["projects/angular",{"_index":6,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["propagate",{"_index":204,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["properties",{"_index":16,"title":{"properties.html":{}},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{},"properties.html":{}}}],["prototype",{"_index":715,"title":{},"body":{"changelog.html":{}}}],["provide",{"_index":974,"title":{},"body":{"changelog.html":{}}}],["provided",{"_index":1141,"title":{},"body":{"license.html":{}}}],["public",{"_index":247,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["publish",{"_index":578,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["purpose",{"_index":1151,"title":{},"body":{"license.html":{}}}],["rc5",{"_index":896,"title":{},"body":{"changelog.html":{}}}],["rc6",{"_index":899,"title":{},"body":{"changelog.html":{}}}],["re",{"_index":979,"title":{},"body":{"changelog.html":{}}}],["readme",{"_index":590,"title":{},"body":{"changelog.html":{}}}],["rectangle",{"_index":12,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{},"index.html":{}}}],["rectangle.interface",{"_index":74,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{}}}],["rectangle.interface.ts",{"_index":9,"title":{},"body":{"interfaces/BoundingRectangle.html":{}}}],["rectangle.interface.ts:12",{"_index":33,"title":{},"body":{"interfaces/BoundingRectangle.html":{}}}],["reference",{"_index":478,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["register",{"_index":804,"title":{},"body":{"changelog.html":{}}}],["relative",{"_index":1045,"title":{},"body":{"index.html":{}}}],["relax",{"_index":798,"title":{},"body":{"changelog.html":{}}}],["release",{"_index":1103,"title":{},"body":{"index.html":{}}}],["released",{"_index":245,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["releaselicense",{"_index":1104,"title":{},"body":{"index.html":{}}}],["reload",{"_index":1096,"title":{},"body":{"index.html":{}}}],["remove",{"_index":592,"title":{},"body":{"changelog.html":{}}}],["removed",{"_index":586,"title":{},"body":{"changelog.html":{}}}],["removeghostelement",{"_index":278,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["rename",{"_index":864,"title":{},"body":{"changelog.html":{}}}],["renamed",{"_index":869,"title":{},"body":{"changelog.html":{}}}],["renderer",{"_index":257,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["renderer.listen",{"_index":403,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["renderer2",{"_index":44,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["repo",{"_index":1092,"title":{},"body":{"index.html":{}}}],["repository",{"_index":1176,"title":{},"body":{"properties.html":{}}}],["required",{"_index":556,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["reset",{"_index":840,"title":{},"body":{"changelog.html":{}}}],["resizable",{"_index":7,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["resizable.directive",{"_index":460,"title":{},"body":{"modules/ResizableModule.html":{},"directives/ResizeHandleDirective.html":{}}}],["resizable.js",{"_index":890,"title":{},"body":{"changelog.html":{}}}],["resizable.jsafter",{"_index":888,"title":{},"body":{"changelog.html":{}}}],["resizable/angular2",{"_index":887,"title":{},"body":{"changelog.html":{}}}],["resizable/dist/umd/angular2",{"_index":889,"title":{},"body":{"changelog.html":{}}}],["resizablecontainer",{"_index":474,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["resizabledirective",{"_index":197,"title":{"directives/ResizableDirective.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["resizablemodule",{"_index":453,"title":{"modules/ResizableModule.html":{}},"body":{"modules/ResizableModule.html":{},"changelog.html":{},"index.html":{},"modules.html":{}}}],["resize",{"_index":158,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["resize)=\"onresize($event)\"after",{"_index":871,"title":{},"body":{"changelog.html":{}}}],["resize_active_class",{"_index":180,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["resize_ghost_element_class",{"_index":182,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["resizeable",{"_index":954,"title":{},"body":{"changelog.html":{}}}],["resizecursorprecision",{"_index":585,"title":{},"body":{"changelog.html":{}}}],["resizecursors",{"_index":148,"title":{"interfaces/ResizeCursors.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["resized",{"_index":13,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["resizeedges",{"_index":475,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["resizeedges]={top",{"_index":988,"title":{},"body":{"changelog.html":{}}}],["resizeend",{"_index":216,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["resizeevent",{"_index":75,"title":{"interfaces/ResizeEvent.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"index.html":{}}}],["resizehandle",{"_index":734,"title":{},"body":{"changelog.html":{}}}],["resizehandledirective",{"_index":457,"title":{"directives/ResizeHandleDirective.html":{}},"body":{"modules/ResizableModule.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["resizehandles",{"_index":967,"title":{},"body":{"changelog.html":{}}}],["resizesnapgrid",{"_index":225,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["resizestart",{"_index":215,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["resizing",{"_index":212,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["resizing)=\"onresizing($event",{"_index":872,"title":{},"body":{"changelog.html":{}}}],["restore",{"_index":658,"title":{},"body":{"changelog.html":{}}}],["restriction",{"_index":1121,"title":{},"body":{"license.html":{}}}],["results",{"_index":36,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":110,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["returns",{"_index":437,"title":{},"body":{"classes/PointerEventListeners.html":{},"miscellaneous/functions.html":{}}}],["rezize",{"_index":802,"title":{},"body":{"changelog.html":{}}}],["right",{"_index":21,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["rights",{"_index":1124,"title":{},"body":{"license.html":{}}}],["row",{"_index":163,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":801,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["rxjs",{"_index":61,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["rxjs/operators",{"_index":70,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["scroll",{"_index":748,"title":{},"body":{"changelog.html":{}}}],["scrollleft",{"_index":22,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["scrolltop",{"_index":23,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["se",{"_index":161,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["seamless",{"_index":784,"title":{},"body":{"changelog.html":{}}}],["see",{"_index":535,"title":{},"body":{"changelog.html":{}}}],["selected",{"_index":862,"title":{},"body":{"changelog.html":{}}}],["selector",{"_index":193,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["selectors",{"_index":910,"title":{},"body":{"changelog.html":{}}}],["sell",{"_index":1129,"title":{},"body":{"license.html":{}}}],["server",{"_index":1093,"title":{},"body":{"index.html":{}}}],["set",{"_index":209,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["setelementclass(elm",{"_index":386,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["setting",{"_index":980,"title":{},"body":{"changelog.html":{}}}],["shall",{"_index":1137,"title":{},"body":{"license.html":{}}}],["share",{"_index":68,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["shared",{"_index":788,"title":{},"body":{"changelog.html":{}}}],["show",{"_index":1018,"title":{},"body":{"changelog.html":{}}}],["shown",{"_index":737,"title":{},"body":{"changelog.html":{}}}],["sibling",{"_index":191,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["sizing",{"_index":1065,"title":{},"body":{"index.html":{}}}],["snap",{"_index":219,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["snapgrid",{"_index":294,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["snapgrid.x",{"_index":297,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["snapgrid.y",{"_index":302,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["software",{"_index":1117,"title":{},"body":{"license.html":{}}}],["solid",{"_index":1060,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"index.html":{}}}],["specify",{"_index":987,"title":{},"body":{"changelog.html":{}}}],["standard",{"_index":536,"title":{},"body":{"changelog.html":{}}}],["start",{"_index":774,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["startcoords.clientx",{"_index":290,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["startcoords.clienty",{"_index":292,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["started",{"_index":529,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["starting",{"_index":935,"title":{},"body":{"changelog.html":{}}}],["startingrect",{"_index":93,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["startingrect.bottom",{"_index":97,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["startingrect.left",{"_index":98,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["startingrect.right",{"_index":99,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["startingrect.top",{"_index":96,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["state",{"_index":812,"title":{},"body":{"changelog.html":{}}}],["static",{"_index":394,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["string",{"_index":28,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["style",{"_index":116,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["style[property",{"_index":124,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["styles",{"_index":978,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["styling",{"_index":929,"title":{},"body":{"changelog.html":{}}}],["subject",{"_index":57,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"license.html":{}}}],["sublicense",{"_index":1127,"title":{},"body":{"license.html":{}}}],["subscribe((edges",{"_index":346,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["subscribe((event",{"_index":496,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["subscribe((newboundingrect",{"_index":334,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["subscribers",{"_index":619,"title":{},"body":{"changelog.html":{}}}],["substantial",{"_index":1139,"title":{},"body":{"license.html":{}}}],["suffix",{"_index":701,"title":{},"body":{"changelog.html":{}}}],["support",{"_index":880,"title":{},"body":{"changelog.html":{}}}],["sw",{"_index":160,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["sync",{"_index":1007,"title":{},"body":{"changelog.html":{}}}],["system.js",{"_index":729,"title":{},"body":{"changelog.html":{}}}],["table",{"_index":1033,"title":{},"body":{"index.html":{}}}],["take",{"_index":67,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["takeuntil",{"_index":64,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["takeuntil(this.destroy",{"_index":333,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["tap",{"_index":69,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["template",{"_index":882,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["temporary",{"_index":211,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["test",{"_index":1099,"title":{},"body":{"index.html":{}}}],["test:watch",{"_index":1101,"title":{},"body":{"index.html":{}}}],["testing",{"_index":1098,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1097,"title":{},"body":{"index.html":{}}}],["text",{"_index":860,"title":{},"body":{"changelog.html":{}}}],["this.allownegativeresizes",{"_index":331,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.destroy$.next",{"_index":385,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["this.element.nativeelement",{"_index":502,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.elm",{"_index":347,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.elm.nativeelement",{"_index":356,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.elm.nativeelement.parentelement.appendchild",{"_index":355,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.elm.nativeelement.parentelement.removechild",{"_index":280,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.enableghostresize",{"_index":353,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.eventlisteners.mousemove",{"_index":507,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.eventlisteners.touchmove",{"_index":500,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.eventlisteners[type",{"_index":524,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.ghostelementpositioning",{"_index":348,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.listenonthehost('mousedown').subscribe((event",{"_index":488,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.listenonthehost('mouseup').subscribe((event",{"_index":490,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.listenonthehost('touchcancel",{"_index":495,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.listenonthehost('touchend",{"_index":494,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.listenonthehost('touchstart').subscribe((event",{"_index":492,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.mousedown",{"_index":265,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mousedown.complete",{"_index":382,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mousemove",{"_index":267,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mousemove.complete",{"_index":384,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mouseup",{"_index":273,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mouseup.complete",{"_index":383,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.onmousedown",{"_index":493,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.onmousedown(event",{"_index":489,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.onmousemove",{"_index":504,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.onmouseup",{"_index":497,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.onmouseup(event.clientx",{"_index":491,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.pointerdown",{"_index":399,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointereventlisteners",{"_index":260,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointereventlisteners.pointermove",{"_index":266,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointermove",{"_index":411,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointerup",{"_index":417,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.addclass",{"_index":362,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.addclass(elm.nativeelement",{"_index":389,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.listen",{"_index":501,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.renderer.removeclass(elm.nativeelement",{"_index":390,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.removeclass(this.elm.nativeelement",{"_index":370,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.setstyle",{"_index":335,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.setstyle(document.body",{"_index":351,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.setstyle(this.elm.nativeelement",{"_index":281,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizable.mousedown.next",{"_index":511,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.resizable.mousemove.next",{"_index":519,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.resizable.mouseup.next",{"_index":514,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.resizablecontainer",{"_index":517,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.resizabledirective",{"_index":516,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.resizecursors",{"_index":285,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizeedges",{"_index":512,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.resizeend.emit",{"_index":372,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizeend.observers.length",{"_index":371,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizesnapgrid.bottom",{"_index":303,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizesnapgrid.left",{"_index":295,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizesnapgrid.right",{"_index":298,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizesnapgrid.top",{"_index":300,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizestart.emit",{"_index":367,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizestart.observers.length",{"_index":366,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizing.emit",{"_index":342,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizing.observers.length",{"_index":340,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.setelementclass(this.elm",{"_index":352,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.unsubscribeeventlisteners",{"_index":498,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.validateresize",{"_index":332,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.zone.run",{"_index":341,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.zone.runoutsideangular",{"_index":487,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["throttle",{"_index":235,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["through",{"_index":1042,"title":{},"body":{"index.html":{}}}],["throw",{"_index":675,"title":{},"body":{"changelog.html":{}}}],["times",{"_index":1001,"title":{},"body":{"changelog.html":{}}}],["top",{"_index":24,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["topleft",{"_index":149,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["toporbottom",{"_index":154,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["topright",{"_index":150,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["tort",{"_index":1162,"title":{},"body":{"license.html":{}}}],["touch",{"_index":80,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["touchcancel",{"_index":424,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["touchend",{"_index":421,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["touchevent",{"_index":90,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["touchmove",{"_index":414,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["touchmoveevent",{"_index":503,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["touchmoveevent.targettouches[0].clientx",{"_index":505,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["touchmoveevent.targettouches[0].clienty",{"_index":506,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["touchstart",{"_index":407,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["transform",{"_index":119,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["transform.includes('translate",{"_index":127,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["transform.replace",{"_index":128,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["transformproperties",{"_index":118,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["transforms",{"_index":626,"title":{},"body":{"changelog.html":{}}}],["translate3?d",{"_index":129,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["translate3d",{"_index":635,"title":{},"body":{"changelog.html":{}}}],["translatex",{"_index":113,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["translatey",{"_index":115,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["trigger",{"_index":484,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["triggered",{"_index":426,"title":{},"body":{"interfaces/Edges.html":{}}}],["triggers",{"_index":754,"title":{},"body":{"changelog.html":{}}}],["true",{"_index":202,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["type",{"_index":34,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":995,"title":{},"body":{"changelog.html":{}}}],["typescript",{"_index":1011,"title":{},"body":{"changelog.html":{}}}],["typings",{"_index":874,"title":{},"body":{"changelog.html":{}}}],["ui",{"_index":1008,"title":{},"body":{"changelog.html":{}}}],["umd",{"_index":721,"title":{},"body":{"changelog.html":{}}}],["uncancelled",{"_index":1005,"title":{},"body":{"changelog.html":{}}}],["undefined",{"_index":31,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["universal",{"_index":377,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["unsubscribe",{"_index":844,"title":{},"body":{"changelog.html":{}}}],["unsubscribeeventlisteners",{"_index":520,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["unsubscribemousedown",{"_index":400,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribemousemove",{"_index":412,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribemouseup",{"_index":418,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribetouchcancel",{"_index":420,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribetouchend",{"_index":419,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribetouchmove",{"_index":413,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribetouchstart",{"_index":401,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["until",{"_index":653,"title":{},"body":{"changelog.html":{}}}],["up",{"_index":942,"title":{},"body":{"changelog.html":{}}}],["update",{"_index":732,"title":{},"body":{"changelog.html":{}}}],["upgrade",{"_index":560,"title":{},"body":{"changelog.html":{}}}],["use",{"_index":557,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":470,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["useful",{"_index":1075,"title":{},"body":{"index.html":{}}}],["user",{"_index":1003,"title":{},"body":{"changelog.html":{}}}],["users",{"_index":730,"title":{},"body":{"changelog.html":{}}}],["using",{"_index":597,"title":{},"body":{"changelog.html":{}}}],["util/clone",{"_index":83,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["util/is",{"_index":79,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["valid",{"_index":941,"title":{},"body":{"changelog.html":{}}}],["validate",{"_index":973,"title":{},"body":{"changelog.html":{}}}],["validated",{"_index":976,"title":{},"body":{"changelog.html":{}}}],["validateresize",{"_index":207,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["value",{"_index":126,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":983,"title":{},"body":{"changelog.html":{}}}],["variables",{"_index":1180,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":537,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["versions",{"_index":894,"title":{},"body":{"changelog.html":{}}}],["via",{"_index":857,"title":{},"body":{"changelog.html":{}}}],["view",{"_index":1076,"title":{},"body":{"index.html":{}}}],["viewed",{"_index":1078,"title":{},"body":{"index.html":{}}}],["visibility",{"_index":282,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["void",{"_index":263,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"index.html":{}}}],["w",{"_index":943,"title":{},"body":{"changelog.html":{}}}],["warning",{"_index":799,"title":{},"body":{"changelog.html":{}}}],["warranties",{"_index":1147,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1142,"title":{},"body":{"license.html":{}}}],["way",{"_index":975,"title":{},"body":{"changelog.html":{}}}],["webkit",{"_index":951,"title":{},"body":{"changelog.html":{}}}],["whether",{"_index":1159,"title":{},"body":{"license.html":{}}}],["width",{"_index":25,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["wip",{"_index":1015,"title":{},"body":{"changelog.html":{}}}],["within",{"_index":764,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["without",{"_index":1120,"title":{},"body":{"license.html":{}}}],["work",{"_index":1066,"title":{},"body":{"index.html":{}}}],["x",{"_index":40,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["y",{"_index":41,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["yourself",{"_index":718,"title":{},"body":{"changelog.html":{}}}],["zone",{"_index":259,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["zone.runoutsideangular",{"_index":402,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/BoundingRectangle.html":{"url":"interfaces/BoundingRectangle.html","title":"interface - BoundingRectangle","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BoundingRectangle\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-resizable-element/src/lib/interfaces/bounding-rectangle.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                The bounding rectangle of the resized element\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            bottom\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            height\n                                        \n                                \n                                \n                                        \n                                            left\n                                        \n                                \n                                \n                                        \n                                            right\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            scrollLeft\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            scrollTop\n                                        \n                                \n                                \n                                        \n                                            top\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            width\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    number | undefined\n\n                    \n                \n                        \n                            \n                                Defined in projects/angular-resizable-element/src/lib/interfaces/bounding-rectangle.interface.ts:12\n                            \n                        \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bottom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bottom:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        left\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        left:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        right\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        right:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scrollLeft\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scrollLeft:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scrollTop\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scrollTop:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        top\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        top:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface BoundingRectangle {\n  top: number;\n  bottom: number;\n  left: number;\n  right: number;\n  height?: number;\n  width?: number;\n  scrollTop?: number;\n  scrollLeft?: number;\n  [key: string]: number | undefined;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Coordinate.html":{"url":"interfaces/Coordinate.html","title":"interface - Coordinate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Coordinate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-resizable-element/src/lib/resizable.directive.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone,\n  Inject,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Subject, Observable, Observer, merge } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  filter,\n  pairwise,\n  take,\n  share,\n  tap,\n} from 'rxjs/operators';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\nimport { IS_TOUCH_DEVICE } from './util/is-touch-device';\nimport { deepCloneNode } from './util/clone-node';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction getNewBoundingRectangle(\n  startingRect: BoundingRectangle,\n  edges: Edges,\n  clientX: number,\n  clientY: number\n): BoundingRectangle {\n  const newBoundingRect: BoundingRectangle = {\n    top: startingRect.top,\n    bottom: startingRect.bottom,\n    left: startingRect.left,\n    right: startingRect.right,\n  };\n\n  if (edges.top) {\n    newBoundingRect.top += clientY;\n  }\n  if (edges.bottom) {\n    newBoundingRect.bottom += clientY;\n  }\n  if (edges.left) {\n    newBoundingRect.left += clientX;\n  }\n  if (edges.right) {\n    newBoundingRect.right += clientX;\n  }\n  newBoundingRect.height = newBoundingRect.bottom - newBoundingRect.top;\n  newBoundingRect.width = newBoundingRect.right - newBoundingRect.left;\n\n  return newBoundingRect;\n}\n\nfunction getElementRect(\n  element: ElementRef,\n  ghostElementPositioning: string\n): BoundingRectangle {\n  let translateX = 0;\n  let translateY = 0;\n  const style = element.nativeElement.style;\n  const transformProperties = [\n    'transform',\n    '-ms-transform',\n    '-moz-transform',\n    '-o-transform',\n  ];\n  const transform = transformProperties\n    .map((property) => style[property])\n    .find((value) => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(\n      /.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/,\n      '$1'\n    );\n    translateY = transform.replace(\n      /.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/,\n      '$2'\n    );\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX,\n    };\n  } else {\n    const boundingRect: BoundingRectangle =\n      element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft,\n    };\n  }\n}\n\nexport interface ResizeCursors {\n  topLeft: string;\n  topRight: string;\n  bottomLeft: string;\n  bottomRight: string;\n  leftOrRight: string;\n  topOrBottom: string;\n}\n\nconst DEFAULT_RESIZE_CURSORS: ResizeCursors = Object.freeze({\n  topLeft: 'nw-resize',\n  topRight: 'ne-resize',\n  bottomLeft: 'sw-resize',\n  bottomRight: 'se-resize',\n  leftOrRight: 'col-resize',\n  topOrBottom: 'row-resize',\n});\n\nfunction getResizeCursor(edges: Edges, cursors: ResizeCursors): string {\n  if (edges.left && edges.top) {\n    return cursors.topLeft;\n  } else if (edges.right && edges.top) {\n    return cursors.topRight;\n  } else if (edges.left && edges.bottom) {\n    return cursors.bottomLeft;\n  } else if (edges.right && edges.bottom) {\n    return cursors.bottomRight;\n  } else if (edges.left || edges.right) {\n    return cursors.leftOrRight;\n  } else if (edges.top || edges.bottom) {\n    return cursors.topOrBottom;\n  } else {\n    return '';\n  }\n}\n\nfunction getEdgesDiff({\n  edges,\n  initialRectangle,\n  newRectangle,\n}: {\n  edges: Edges;\n  initialRectangle: BoundingRectangle;\n  newRectangle: BoundingRectangle;\n}): Edges {\n  const edgesDiff: Edges = {};\n  Object.keys(edges).forEach((edge) => {\n    edgesDiff[edge] = (newRectangle[edge] || 0) - (initialRectangle[edge] || 0);\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * \n * \n * ```\n * Or in case they are sibling elements:\n * ```html\n * \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizable]',\n  exportAs: 'mwlResizable',\n})\nexport class ResizableDirective implements OnInit, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: Partial = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Allow elements to be resized to negative dimensions\n   */\n  @Input() allowNegativeResizes: boolean = false;\n\n  /**\n   * The mouse move throttle in milliseconds, default: 50 ms\n   */\n  @Input() mouseMoveThrottleMS: number = MOUSE_MOVE_THROTTLE_MS;\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private destroy$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: any,\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    const mousedown$: Observable = merge(this.pointerEventListeners.pointerDown, this.mousedown);\n\n    const mousemove$ = merge(\n      this.pointerEventListeners.pointerMove,\n      this.mousemove\n    ).pipe(\n      tap(({ event }) => {\n        if (currentResize && event.cancelable) {\n          event.preventDefault();\n        }\n      }),\n      share()\n    );\n\n    const mouseup$ = merge(this.pointerEventListeners.pointerUp, this.mouseup);\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const getResizeCursors = (): ResizeCursors => {\n      return {\n        ...DEFAULT_RESIZE_CURSORS,\n        ...this.resizeCursors,\n      };\n    };\n\n    const mousedrag: Observable = mousedown$\n      .pipe(\n        mergeMap((startCoords) => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY,\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y),\n            };\n          }\n\n          return (\n            merge(\n              mousemove$.pipe(take(1)).pipe(map((coords) => [, coords])),\n              mousemove$.pipe(pairwise())\n            ) as Observable\n          )\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords),\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y,\n                };\n              })\n            )\n            .pipe(takeUntil(merge(mouseup$, mousedown$)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return (\n            this.allowNegativeResizes ||\n            !!(\n              newBoundingRect.height &&\n              newBoundingRect.width &&\n              newBoundingRect.height > 0 &&\n              newBoundingRect.width > 0\n            )\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect,\n                }),\n              })\n            : true;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        if (this.resizing.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizing.emit({\n              edges: getEdgesDiff({\n                edges: currentResize!.edges,\n                initialRectangle: currentResize!.startingRect,\n                newRectangle: newBoundingRect,\n              }),\n              rectangle: newBoundingRect,\n            });\n          });\n        }\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    mousedown$\n      .pipe(\n        map(({ edges }) => {\n          return edges || {};\n        }),\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect,\n        };\n        const resizeCursors = getResizeCursors();\n        const cursor = getResizeCursor(currentResize.edges, resizeCursors);\n        this.renderer.setStyle(document.body, 'cursor', cursor);\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, true);\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = deepCloneNode(this.elm.nativeElement);\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        if (this.resizeStart.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizeStart.emit({\n              edges: getEdgesDiff({\n                edges,\n                initialRectangle: startingRect,\n                newRectangle: startingRect,\n              }),\n              rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0),\n            });\n          });\n        }\n      });\n\n    mouseup$.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        if (this.resizeEnd.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizeEnd.emit({\n              edges: getEdgesDiff({\n                edges: currentResize!.edges,\n                initialRectangle: currentResize!.startingRect,\n                newRectangle: currentResize!.currentRect,\n              }),\n              rectangle: currentResize!.currentRect,\n            });\n          });\n        }\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    // browser check for angular universal, because it doesn't know what document is\n    if (isPlatformBrowser(this.platformId)) {\n      this.renderer.setStyle(document.body, 'cursor', '');\n    }\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.destroy$.next();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable;\n\n  public pointerMove: Observable;\n\n  public pointerUp: Observable;\n\n  private static instance: PointerEventListeners;\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event,\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchStart = renderer.listen(\n              'document',\n              'touchstart',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.touches[0].clientX,\n                  clientY: event.touches[0].clientY,\n                  event,\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchStart!();\n          }\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event,\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchMove = renderer.listen(\n              'document',\n              'touchmove',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.targetTouches[0].clientX,\n                  clientY: event.targetTouches[0].clientY,\n                  event,\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchMove!();\n          }\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: (() => void) | undefined;\n        let unsubscribeTouchCancel: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event,\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchEnd = renderer.listen(\n              'document',\n              'touchend',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.changedTouches[0].clientX,\n                  clientY: event.changedTouches[0].clientY,\n                  event,\n                });\n              }\n            );\n\n            unsubscribeTouchCancel = renderer.listen(\n              'document',\n              'touchcancel',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.changedTouches[0].clientX,\n                  clientY: event.changedTouches[0].clientY,\n                  event,\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchEnd!();\n            unsubscribeTouchCancel!();\n          }\n        };\n      }\n    ).pipe(share());\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Edges.html":{"url":"interfaces/Edges.html","title":"interface - Edges","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Edges\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-resizable-element/src/lib/interfaces/edges.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                The edges that the resize event were triggered on\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            bottom\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            left\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            right\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            top\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    boolean | number | undefined\n\n                    \n                \n                        \n                            \n                                Defined in projects/angular-resizable-element/src/lib/interfaces/edges.interface.ts:8\n                            \n                        \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bottom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bottom:     boolean | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        left\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        left:     boolean | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        right\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        right:     boolean | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        top\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        top:     boolean | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Edges {\n  top?: boolean | number;\n  bottom?: boolean | number;\n  left?: boolean | number;\n  right?: boolean | number;\n  [key: string]: boolean | number | undefined;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PointerEventCoordinate.html":{"url":"interfaces/PointerEventCoordinate.html","title":"interface - PointerEventCoordinate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PointerEventCoordinate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-resizable-element/src/lib/resizable.directive.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            clientX\n                                        \n                                \n                                \n                                        \n                                            clientY\n                                        \n                                \n                                \n                                        \n                                            event\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clientX\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clientX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clientY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clientY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        event\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        event:     MouseEvent | TouchEvent\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MouseEvent | TouchEvent\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone,\n  Inject,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Subject, Observable, Observer, merge } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  filter,\n  pairwise,\n  take,\n  share,\n  tap,\n} from 'rxjs/operators';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\nimport { IS_TOUCH_DEVICE } from './util/is-touch-device';\nimport { deepCloneNode } from './util/clone-node';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction getNewBoundingRectangle(\n  startingRect: BoundingRectangle,\n  edges: Edges,\n  clientX: number,\n  clientY: number\n): BoundingRectangle {\n  const newBoundingRect: BoundingRectangle = {\n    top: startingRect.top,\n    bottom: startingRect.bottom,\n    left: startingRect.left,\n    right: startingRect.right,\n  };\n\n  if (edges.top) {\n    newBoundingRect.top += clientY;\n  }\n  if (edges.bottom) {\n    newBoundingRect.bottom += clientY;\n  }\n  if (edges.left) {\n    newBoundingRect.left += clientX;\n  }\n  if (edges.right) {\n    newBoundingRect.right += clientX;\n  }\n  newBoundingRect.height = newBoundingRect.bottom - newBoundingRect.top;\n  newBoundingRect.width = newBoundingRect.right - newBoundingRect.left;\n\n  return newBoundingRect;\n}\n\nfunction getElementRect(\n  element: ElementRef,\n  ghostElementPositioning: string\n): BoundingRectangle {\n  let translateX = 0;\n  let translateY = 0;\n  const style = element.nativeElement.style;\n  const transformProperties = [\n    'transform',\n    '-ms-transform',\n    '-moz-transform',\n    '-o-transform',\n  ];\n  const transform = transformProperties\n    .map((property) => style[property])\n    .find((value) => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(\n      /.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/,\n      '$1'\n    );\n    translateY = transform.replace(\n      /.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/,\n      '$2'\n    );\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX,\n    };\n  } else {\n    const boundingRect: BoundingRectangle =\n      element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft,\n    };\n  }\n}\n\nexport interface ResizeCursors {\n  topLeft: string;\n  topRight: string;\n  bottomLeft: string;\n  bottomRight: string;\n  leftOrRight: string;\n  topOrBottom: string;\n}\n\nconst DEFAULT_RESIZE_CURSORS: ResizeCursors = Object.freeze({\n  topLeft: 'nw-resize',\n  topRight: 'ne-resize',\n  bottomLeft: 'sw-resize',\n  bottomRight: 'se-resize',\n  leftOrRight: 'col-resize',\n  topOrBottom: 'row-resize',\n});\n\nfunction getResizeCursor(edges: Edges, cursors: ResizeCursors): string {\n  if (edges.left && edges.top) {\n    return cursors.topLeft;\n  } else if (edges.right && edges.top) {\n    return cursors.topRight;\n  } else if (edges.left && edges.bottom) {\n    return cursors.bottomLeft;\n  } else if (edges.right && edges.bottom) {\n    return cursors.bottomRight;\n  } else if (edges.left || edges.right) {\n    return cursors.leftOrRight;\n  } else if (edges.top || edges.bottom) {\n    return cursors.topOrBottom;\n  } else {\n    return '';\n  }\n}\n\nfunction getEdgesDiff({\n  edges,\n  initialRectangle,\n  newRectangle,\n}: {\n  edges: Edges;\n  initialRectangle: BoundingRectangle;\n  newRectangle: BoundingRectangle;\n}): Edges {\n  const edgesDiff: Edges = {};\n  Object.keys(edges).forEach((edge) => {\n    edgesDiff[edge] = (newRectangle[edge] || 0) - (initialRectangle[edge] || 0);\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * \n * \n * ```\n * Or in case they are sibling elements:\n * ```html\n * \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizable]',\n  exportAs: 'mwlResizable',\n})\nexport class ResizableDirective implements OnInit, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: Partial = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Allow elements to be resized to negative dimensions\n   */\n  @Input() allowNegativeResizes: boolean = false;\n\n  /**\n   * The mouse move throttle in milliseconds, default: 50 ms\n   */\n  @Input() mouseMoveThrottleMS: number = MOUSE_MOVE_THROTTLE_MS;\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private destroy$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: any,\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    const mousedown$: Observable = merge(this.pointerEventListeners.pointerDown, this.mousedown);\n\n    const mousemove$ = merge(\n      this.pointerEventListeners.pointerMove,\n      this.mousemove\n    ).pipe(\n      tap(({ event }) => {\n        if (currentResize && event.cancelable) {\n          event.preventDefault();\n        }\n      }),\n      share()\n    );\n\n    const mouseup$ = merge(this.pointerEventListeners.pointerUp, this.mouseup);\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const getResizeCursors = (): ResizeCursors => {\n      return {\n        ...DEFAULT_RESIZE_CURSORS,\n        ...this.resizeCursors,\n      };\n    };\n\n    const mousedrag: Observable = mousedown$\n      .pipe(\n        mergeMap((startCoords) => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY,\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y),\n            };\n          }\n\n          return (\n            merge(\n              mousemove$.pipe(take(1)).pipe(map((coords) => [, coords])),\n              mousemove$.pipe(pairwise())\n            ) as Observable\n          )\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords),\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y,\n                };\n              })\n            )\n            .pipe(takeUntil(merge(mouseup$, mousedown$)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return (\n            this.allowNegativeResizes ||\n            !!(\n              newBoundingRect.height &&\n              newBoundingRect.width &&\n              newBoundingRect.height > 0 &&\n              newBoundingRect.width > 0\n            )\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect,\n                }),\n              })\n            : true;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        if (this.resizing.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizing.emit({\n              edges: getEdgesDiff({\n                edges: currentResize!.edges,\n                initialRectangle: currentResize!.startingRect,\n                newRectangle: newBoundingRect,\n              }),\n              rectangle: newBoundingRect,\n            });\n          });\n        }\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    mousedown$\n      .pipe(\n        map(({ edges }) => {\n          return edges || {};\n        }),\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect,\n        };\n        const resizeCursors = getResizeCursors();\n        const cursor = getResizeCursor(currentResize.edges, resizeCursors);\n        this.renderer.setStyle(document.body, 'cursor', cursor);\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, true);\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = deepCloneNode(this.elm.nativeElement);\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        if (this.resizeStart.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizeStart.emit({\n              edges: getEdgesDiff({\n                edges,\n                initialRectangle: startingRect,\n                newRectangle: startingRect,\n              }),\n              rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0),\n            });\n          });\n        }\n      });\n\n    mouseup$.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        if (this.resizeEnd.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizeEnd.emit({\n              edges: getEdgesDiff({\n                edges: currentResize!.edges,\n                initialRectangle: currentResize!.startingRect,\n                newRectangle: currentResize!.currentRect,\n              }),\n              rectangle: currentResize!.currentRect,\n            });\n          });\n        }\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    // browser check for angular universal, because it doesn't know what document is\n    if (isPlatformBrowser(this.platformId)) {\n      this.renderer.setStyle(document.body, 'cursor', '');\n    }\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.destroy$.next();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable;\n\n  public pointerMove: Observable;\n\n  public pointerUp: Observable;\n\n  private static instance: PointerEventListeners;\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event,\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchStart = renderer.listen(\n              'document',\n              'touchstart',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.touches[0].clientX,\n                  clientY: event.touches[0].clientY,\n                  event,\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchStart!();\n          }\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event,\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchMove = renderer.listen(\n              'document',\n              'touchmove',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.targetTouches[0].clientX,\n                  clientY: event.targetTouches[0].clientY,\n                  event,\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchMove!();\n          }\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: (() => void) | undefined;\n        let unsubscribeTouchCancel: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event,\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchEnd = renderer.listen(\n              'document',\n              'touchend',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.changedTouches[0].clientX,\n                  clientY: event.changedTouches[0].clientY,\n                  event,\n                });\n              }\n            );\n\n            unsubscribeTouchCancel = renderer.listen(\n              'document',\n              'touchcancel',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.changedTouches[0].clientX,\n                  clientY: event.changedTouches[0].clientY,\n                  event,\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchEnd!();\n            unsubscribeTouchCancel!();\n          }\n        };\n      }\n    ).pipe(share());\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PointerEventListeners.html":{"url":"classes/PointerEventListeners.html","title":"class - PointerEventListeners","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PointerEventListeners\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-resizable-element/src/lib/resizable.directive.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                pointerDown\n                            \n                            \n                                    Public\n                                pointerMove\n                            \n                            \n                                    Public\n                                pointerUp\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getInstance\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(renderer: Renderer2, zone: NgZone)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-resizable-element/src/lib/resizable.directive.ts:689\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                        Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        zone\n                                                  \n                                                        \n                                                                        NgZone\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pointerDown\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-resizable-element/src/lib/resizable.directive.ts:670\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pointerMove\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-resizable-element/src/lib/resizable.directive.ts:672\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pointerUp\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-resizable-element/src/lib/resizable.directive.ts:674\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getInstance\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInstance(renderer: Renderer2, zone: NgZone)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-resizable-element/src/lib/resizable.directive.ts:678\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                Renderer2\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    zone\n                                    \n                                                NgZone\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PointerEventListeners\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone,\n  Inject,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Subject, Observable, Observer, merge } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  filter,\n  pairwise,\n  take,\n  share,\n  tap,\n} from 'rxjs/operators';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\nimport { IS_TOUCH_DEVICE } from './util/is-touch-device';\nimport { deepCloneNode } from './util/clone-node';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction getNewBoundingRectangle(\n  startingRect: BoundingRectangle,\n  edges: Edges,\n  clientX: number,\n  clientY: number\n): BoundingRectangle {\n  const newBoundingRect: BoundingRectangle = {\n    top: startingRect.top,\n    bottom: startingRect.bottom,\n    left: startingRect.left,\n    right: startingRect.right,\n  };\n\n  if (edges.top) {\n    newBoundingRect.top += clientY;\n  }\n  if (edges.bottom) {\n    newBoundingRect.bottom += clientY;\n  }\n  if (edges.left) {\n    newBoundingRect.left += clientX;\n  }\n  if (edges.right) {\n    newBoundingRect.right += clientX;\n  }\n  newBoundingRect.height = newBoundingRect.bottom - newBoundingRect.top;\n  newBoundingRect.width = newBoundingRect.right - newBoundingRect.left;\n\n  return newBoundingRect;\n}\n\nfunction getElementRect(\n  element: ElementRef,\n  ghostElementPositioning: string\n): BoundingRectangle {\n  let translateX = 0;\n  let translateY = 0;\n  const style = element.nativeElement.style;\n  const transformProperties = [\n    'transform',\n    '-ms-transform',\n    '-moz-transform',\n    '-o-transform',\n  ];\n  const transform = transformProperties\n    .map((property) => style[property])\n    .find((value) => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(\n      /.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/,\n      '$1'\n    );\n    translateY = transform.replace(\n      /.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/,\n      '$2'\n    );\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX,\n    };\n  } else {\n    const boundingRect: BoundingRectangle =\n      element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft,\n    };\n  }\n}\n\nexport interface ResizeCursors {\n  topLeft: string;\n  topRight: string;\n  bottomLeft: string;\n  bottomRight: string;\n  leftOrRight: string;\n  topOrBottom: string;\n}\n\nconst DEFAULT_RESIZE_CURSORS: ResizeCursors = Object.freeze({\n  topLeft: 'nw-resize',\n  topRight: 'ne-resize',\n  bottomLeft: 'sw-resize',\n  bottomRight: 'se-resize',\n  leftOrRight: 'col-resize',\n  topOrBottom: 'row-resize',\n});\n\nfunction getResizeCursor(edges: Edges, cursors: ResizeCursors): string {\n  if (edges.left && edges.top) {\n    return cursors.topLeft;\n  } else if (edges.right && edges.top) {\n    return cursors.topRight;\n  } else if (edges.left && edges.bottom) {\n    return cursors.bottomLeft;\n  } else if (edges.right && edges.bottom) {\n    return cursors.bottomRight;\n  } else if (edges.left || edges.right) {\n    return cursors.leftOrRight;\n  } else if (edges.top || edges.bottom) {\n    return cursors.topOrBottom;\n  } else {\n    return '';\n  }\n}\n\nfunction getEdgesDiff({\n  edges,\n  initialRectangle,\n  newRectangle,\n}: {\n  edges: Edges;\n  initialRectangle: BoundingRectangle;\n  newRectangle: BoundingRectangle;\n}): Edges {\n  const edgesDiff: Edges = {};\n  Object.keys(edges).forEach((edge) => {\n    edgesDiff[edge] = (newRectangle[edge] || 0) - (initialRectangle[edge] || 0);\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * \n * \n * ```\n * Or in case they are sibling elements:\n * ```html\n * \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizable]',\n  exportAs: 'mwlResizable',\n})\nexport class ResizableDirective implements OnInit, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: Partial = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Allow elements to be resized to negative dimensions\n   */\n  @Input() allowNegativeResizes: boolean = false;\n\n  /**\n   * The mouse move throttle in milliseconds, default: 50 ms\n   */\n  @Input() mouseMoveThrottleMS: number = MOUSE_MOVE_THROTTLE_MS;\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private destroy$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: any,\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    const mousedown$: Observable = merge(this.pointerEventListeners.pointerDown, this.mousedown);\n\n    const mousemove$ = merge(\n      this.pointerEventListeners.pointerMove,\n      this.mousemove\n    ).pipe(\n      tap(({ event }) => {\n        if (currentResize && event.cancelable) {\n          event.preventDefault();\n        }\n      }),\n      share()\n    );\n\n    const mouseup$ = merge(this.pointerEventListeners.pointerUp, this.mouseup);\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const getResizeCursors = (): ResizeCursors => {\n      return {\n        ...DEFAULT_RESIZE_CURSORS,\n        ...this.resizeCursors,\n      };\n    };\n\n    const mousedrag: Observable = mousedown$\n      .pipe(\n        mergeMap((startCoords) => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY,\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y),\n            };\n          }\n\n          return (\n            merge(\n              mousemove$.pipe(take(1)).pipe(map((coords) => [, coords])),\n              mousemove$.pipe(pairwise())\n            ) as Observable\n          )\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords),\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y,\n                };\n              })\n            )\n            .pipe(takeUntil(merge(mouseup$, mousedown$)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return (\n            this.allowNegativeResizes ||\n            !!(\n              newBoundingRect.height &&\n              newBoundingRect.width &&\n              newBoundingRect.height > 0 &&\n              newBoundingRect.width > 0\n            )\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect,\n                }),\n              })\n            : true;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        if (this.resizing.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizing.emit({\n              edges: getEdgesDiff({\n                edges: currentResize!.edges,\n                initialRectangle: currentResize!.startingRect,\n                newRectangle: newBoundingRect,\n              }),\n              rectangle: newBoundingRect,\n            });\n          });\n        }\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    mousedown$\n      .pipe(\n        map(({ edges }) => {\n          return edges || {};\n        }),\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect,\n        };\n        const resizeCursors = getResizeCursors();\n        const cursor = getResizeCursor(currentResize.edges, resizeCursors);\n        this.renderer.setStyle(document.body, 'cursor', cursor);\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, true);\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = deepCloneNode(this.elm.nativeElement);\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        if (this.resizeStart.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizeStart.emit({\n              edges: getEdgesDiff({\n                edges,\n                initialRectangle: startingRect,\n                newRectangle: startingRect,\n              }),\n              rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0),\n            });\n          });\n        }\n      });\n\n    mouseup$.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        if (this.resizeEnd.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizeEnd.emit({\n              edges: getEdgesDiff({\n                edges: currentResize!.edges,\n                initialRectangle: currentResize!.startingRect,\n                newRectangle: currentResize!.currentRect,\n              }),\n              rectangle: currentResize!.currentRect,\n            });\n          });\n        }\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    // browser check for angular universal, because it doesn't know what document is\n    if (isPlatformBrowser(this.platformId)) {\n      this.renderer.setStyle(document.body, 'cursor', '');\n    }\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.destroy$.next();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable;\n\n  public pointerMove: Observable;\n\n  public pointerUp: Observable;\n\n  private static instance: PointerEventListeners;\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event,\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchStart = renderer.listen(\n              'document',\n              'touchstart',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.touches[0].clientX,\n                  clientY: event.touches[0].clientY,\n                  event,\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchStart!();\n          }\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event,\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchMove = renderer.listen(\n              'document',\n              'touchmove',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.targetTouches[0].clientX,\n                  clientY: event.targetTouches[0].clientY,\n                  event,\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchMove!();\n          }\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: (() => void) | undefined;\n        let unsubscribeTouchCancel: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event,\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchEnd = renderer.listen(\n              'document',\n              'touchend',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.changedTouches[0].clientX,\n                  clientY: event.changedTouches[0].clientY,\n                  event,\n                });\n              }\n            );\n\n            unsubscribeTouchCancel = renderer.listen(\n              'document',\n              'touchcancel',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.changedTouches[0].clientX,\n                  clientY: event.changedTouches[0].clientY,\n                  event,\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchEnd!();\n            unsubscribeTouchCancel!();\n          }\n        };\n      }\n    ).pipe(share());\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/ResizableDirective.html":{"url":"directives/ResizableDirective.html","title":"directive - ResizableDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  ResizableDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-resizable-element/src/lib/resizable.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Place this on an element to make it resizable. For example:\n\nOr in case they are sibling elements:\n\n\n            \n\n\n            \n                Implements\n            \n            \n                            OnInit\n                            OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [mwlResizable]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                allowNegativeResizes\n                            \n                            \n                                enableGhostResize\n                            \n                            \n                                ghostElementPositioning\n                            \n                            \n                                mouseMoveThrottleMS\n                            \n                            \n                                resizeCursors\n                            \n                            \n                                resizeSnapGrid\n                            \n                            \n                                validateResize\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                resizeEnd\n                            \n                            \n                                resizeStart\n                            \n                            \n                                resizing\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        allowNegativeResizes\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-resizable-element/src/lib/resizable.directive.ts:240\n                            \n                        \n                \n                    \n                        Allow elements to be resized to negative dimensions\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        enableGhostResize\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-resizable-element/src/lib/resizable.directive.ts:218\n                            \n                        \n                \n                    \n                        Set to true to enable a temporary resizing effect of the element in between the resizeStart and resizeEnd events.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostElementPositioning\n                    \n                \n                \n                    \n                        Type :     \"fixed\" | \"absolute\"\n\n                    \n                \n                \n                    \n                        Default value : 'fixed'\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-resizable-element/src/lib/resizable.directive.ts:235\n                            \n                        \n                \n                    \n                        Define the positioning of the ghost element (can be fixed or absolute)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        mouseMoveThrottleMS\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : MOUSE_MOVE_THROTTLE_MS\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-resizable-element/src/lib/resizable.directive.ts:245\n                            \n                        \n                \n                    \n                        The mouse move throttle in milliseconds, default: 50 ms\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        resizeCursors\n                    \n                \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Default value : DEFAULT_RESIZE_CURSORS\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-resizable-element/src/lib/resizable.directive.ts:230\n                            \n                        \n                \n                    \n                        The mouse cursors that will be set on the resize edges\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        resizeSnapGrid\n                    \n                \n                \n                    \n                        Type :         Edges\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-resizable-element/src/lib/resizable.directive.ts:225\n                            \n                        \n                \n                    \n                        A snap grid that resize events will be locked to.\ne.g. to only allow the element to be resized every 10px set it to {left: 10, right: 10}\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        validateResize\n                    \n                \n                \n                    \n                        Type :         function\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-resizable-element/src/lib/resizable.directive.ts:213\n                            \n                        \n                \n                    \n                        A function that will be called before each resize event. Return true to allow the resize event to propagate or false to cancel it\n\n                    \n                \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        resizeEnd\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-resizable-element/src/lib/resizable.directive.ts:260\n                            \n                        \n                \n                    \n                        Called after the mouse is released after a resize event. $event is a ResizeEvent object.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        resizeStart\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-resizable-element/src/lib/resizable.directive.ts:250\n                            \n                        \n                \n                    \n                        Called when the mouse is pressed and a resize event is about to begin. $event is a ResizeEvent object.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        resizing\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-resizable-element/src/lib/resizable.directive.ts:255\n                            \n                        \n                \n                    \n                        Called as the mouse is dragged after a resize event has begun. $event is a ResizeEvent object.\n\n                    \n                \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone,\n  Inject,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Subject, Observable, Observer, merge } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  filter,\n  pairwise,\n  take,\n  share,\n  tap,\n} from 'rxjs/operators';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\nimport { IS_TOUCH_DEVICE } from './util/is-touch-device';\nimport { deepCloneNode } from './util/clone-node';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction getNewBoundingRectangle(\n  startingRect: BoundingRectangle,\n  edges: Edges,\n  clientX: number,\n  clientY: number\n): BoundingRectangle {\n  const newBoundingRect: BoundingRectangle = {\n    top: startingRect.top,\n    bottom: startingRect.bottom,\n    left: startingRect.left,\n    right: startingRect.right,\n  };\n\n  if (edges.top) {\n    newBoundingRect.top += clientY;\n  }\n  if (edges.bottom) {\n    newBoundingRect.bottom += clientY;\n  }\n  if (edges.left) {\n    newBoundingRect.left += clientX;\n  }\n  if (edges.right) {\n    newBoundingRect.right += clientX;\n  }\n  newBoundingRect.height = newBoundingRect.bottom - newBoundingRect.top;\n  newBoundingRect.width = newBoundingRect.right - newBoundingRect.left;\n\n  return newBoundingRect;\n}\n\nfunction getElementRect(\n  element: ElementRef,\n  ghostElementPositioning: string\n): BoundingRectangle {\n  let translateX = 0;\n  let translateY = 0;\n  const style = element.nativeElement.style;\n  const transformProperties = [\n    'transform',\n    '-ms-transform',\n    '-moz-transform',\n    '-o-transform',\n  ];\n  const transform = transformProperties\n    .map((property) => style[property])\n    .find((value) => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(\n      /.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/,\n      '$1'\n    );\n    translateY = transform.replace(\n      /.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/,\n      '$2'\n    );\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX,\n    };\n  } else {\n    const boundingRect: BoundingRectangle =\n      element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft,\n    };\n  }\n}\n\nexport interface ResizeCursors {\n  topLeft: string;\n  topRight: string;\n  bottomLeft: string;\n  bottomRight: string;\n  leftOrRight: string;\n  topOrBottom: string;\n}\n\nconst DEFAULT_RESIZE_CURSORS: ResizeCursors = Object.freeze({\n  topLeft: 'nw-resize',\n  topRight: 'ne-resize',\n  bottomLeft: 'sw-resize',\n  bottomRight: 'se-resize',\n  leftOrRight: 'col-resize',\n  topOrBottom: 'row-resize',\n});\n\nfunction getResizeCursor(edges: Edges, cursors: ResizeCursors): string {\n  if (edges.left && edges.top) {\n    return cursors.topLeft;\n  } else if (edges.right && edges.top) {\n    return cursors.topRight;\n  } else if (edges.left && edges.bottom) {\n    return cursors.bottomLeft;\n  } else if (edges.right && edges.bottom) {\n    return cursors.bottomRight;\n  } else if (edges.left || edges.right) {\n    return cursors.leftOrRight;\n  } else if (edges.top || edges.bottom) {\n    return cursors.topOrBottom;\n  } else {\n    return '';\n  }\n}\n\nfunction getEdgesDiff({\n  edges,\n  initialRectangle,\n  newRectangle,\n}: {\n  edges: Edges;\n  initialRectangle: BoundingRectangle;\n  newRectangle: BoundingRectangle;\n}): Edges {\n  const edgesDiff: Edges = {};\n  Object.keys(edges).forEach((edge) => {\n    edgesDiff[edge] = (newRectangle[edge] || 0) - (initialRectangle[edge] || 0);\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * \n * \n * ```\n * Or in case they are sibling elements:\n * ```html\n * \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizable]',\n  exportAs: 'mwlResizable',\n})\nexport class ResizableDirective implements OnInit, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: Partial = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Allow elements to be resized to negative dimensions\n   */\n  @Input() allowNegativeResizes: boolean = false;\n\n  /**\n   * The mouse move throttle in milliseconds, default: 50 ms\n   */\n  @Input() mouseMoveThrottleMS: number = MOUSE_MOVE_THROTTLE_MS;\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private destroy$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: any,\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    const mousedown$: Observable = merge(this.pointerEventListeners.pointerDown, this.mousedown);\n\n    const mousemove$ = merge(\n      this.pointerEventListeners.pointerMove,\n      this.mousemove\n    ).pipe(\n      tap(({ event }) => {\n        if (currentResize && event.cancelable) {\n          event.preventDefault();\n        }\n      }),\n      share()\n    );\n\n    const mouseup$ = merge(this.pointerEventListeners.pointerUp, this.mouseup);\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const getResizeCursors = (): ResizeCursors => {\n      return {\n        ...DEFAULT_RESIZE_CURSORS,\n        ...this.resizeCursors,\n      };\n    };\n\n    const mousedrag: Observable = mousedown$\n      .pipe(\n        mergeMap((startCoords) => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY,\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y),\n            };\n          }\n\n          return (\n            merge(\n              mousemove$.pipe(take(1)).pipe(map((coords) => [, coords])),\n              mousemove$.pipe(pairwise())\n            ) as Observable\n          )\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords),\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y,\n                };\n              })\n            )\n            .pipe(takeUntil(merge(mouseup$, mousedown$)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return (\n            this.allowNegativeResizes ||\n            !!(\n              newBoundingRect.height &&\n              newBoundingRect.width &&\n              newBoundingRect.height > 0 &&\n              newBoundingRect.width > 0\n            )\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect,\n                }),\n              })\n            : true;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        if (this.resizing.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizing.emit({\n              edges: getEdgesDiff({\n                edges: currentResize!.edges,\n                initialRectangle: currentResize!.startingRect,\n                newRectangle: newBoundingRect,\n              }),\n              rectangle: newBoundingRect,\n            });\n          });\n        }\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    mousedown$\n      .pipe(\n        map(({ edges }) => {\n          return edges || {};\n        }),\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect,\n        };\n        const resizeCursors = getResizeCursors();\n        const cursor = getResizeCursor(currentResize.edges, resizeCursors);\n        this.renderer.setStyle(document.body, 'cursor', cursor);\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, true);\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = deepCloneNode(this.elm.nativeElement);\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        if (this.resizeStart.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizeStart.emit({\n              edges: getEdgesDiff({\n                edges,\n                initialRectangle: startingRect,\n                newRectangle: startingRect,\n              }),\n              rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0),\n            });\n          });\n        }\n      });\n\n    mouseup$.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        if (this.resizeEnd.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizeEnd.emit({\n              edges: getEdgesDiff({\n                edges: currentResize!.edges,\n                initialRectangle: currentResize!.startingRect,\n                newRectangle: currentResize!.currentRect,\n              }),\n              rectangle: currentResize!.currentRect,\n            });\n          });\n        }\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    // browser check for angular universal, because it doesn't know what document is\n    if (isPlatformBrowser(this.platformId)) {\n      this.renderer.setStyle(document.body, 'cursor', '');\n    }\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.destroy$.next();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable;\n\n  public pointerMove: Observable;\n\n  public pointerUp: Observable;\n\n  private static instance: PointerEventListeners;\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event,\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchStart = renderer.listen(\n              'document',\n              'touchstart',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.touches[0].clientX,\n                  clientY: event.touches[0].clientY,\n                  event,\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchStart!();\n          }\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event,\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchMove = renderer.listen(\n              'document',\n              'touchmove',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.targetTouches[0].clientX,\n                  clientY: event.targetTouches[0].clientY,\n                  event,\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchMove!();\n          }\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: (() => void) | undefined;\n        let unsubscribeTouchCancel: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event,\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchEnd = renderer.listen(\n              'document',\n              'touchend',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.changedTouches[0].clientX,\n                  clientY: event.changedTouches[0].clientY,\n                  event,\n                });\n              }\n            );\n\n            unsubscribeTouchCancel = renderer.listen(\n              'document',\n              'touchcancel',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.changedTouches[0].clientX,\n                  clientY: event.changedTouches[0].clientY,\n                  event,\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchEnd!();\n            unsubscribeTouchCancel!();\n          }\n        };\n      }\n    ).pipe(share());\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ResizableModule.html":{"url":"modules/ResizableModule.html","title":"module - ResizableModule","body":"\n                   \n\n\n\n\n    Modules\n    ResizableModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/angular-resizable-element/src/lib/resizable.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ResizableDirective\n                        \n                        \n                            ResizeHandleDirective\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ResizableDirective\n                        \n                        \n                            ResizeHandleDirective\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { ResizableDirective } from './resizable.directive';\nimport { ResizeHandleDirective } from './resize-handle.directive';\n\n@NgModule({\n  declarations: [ResizableDirective, ResizeHandleDirective],\n  exports: [ResizableDirective, ResizeHandleDirective],\n})\nexport class ResizableModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResizeCursors.html":{"url":"interfaces/ResizeCursors.html","title":"interface - ResizeCursors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ResizeCursors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-resizable-element/src/lib/resizable.directive.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            bottomLeft\n                                        \n                                \n                                \n                                        \n                                            bottomRight\n                                        \n                                \n                                \n                                        \n                                            leftOrRight\n                                        \n                                \n                                \n                                        \n                                            topLeft\n                                        \n                                \n                                \n                                        \n                                            topOrBottom\n                                        \n                                \n                                \n                                        \n                                            topRight\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bottomLeft\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bottomLeft:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bottomRight\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bottomRight:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        leftOrRight\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        leftOrRight:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topLeft\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        topLeft:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topOrBottom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        topOrBottom:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topRight\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        topRight:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone,\n  Inject,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Subject, Observable, Observer, merge } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  filter,\n  pairwise,\n  take,\n  share,\n  tap,\n} from 'rxjs/operators';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\nimport { IS_TOUCH_DEVICE } from './util/is-touch-device';\nimport { deepCloneNode } from './util/clone-node';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction getNewBoundingRectangle(\n  startingRect: BoundingRectangle,\n  edges: Edges,\n  clientX: number,\n  clientY: number\n): BoundingRectangle {\n  const newBoundingRect: BoundingRectangle = {\n    top: startingRect.top,\n    bottom: startingRect.bottom,\n    left: startingRect.left,\n    right: startingRect.right,\n  };\n\n  if (edges.top) {\n    newBoundingRect.top += clientY;\n  }\n  if (edges.bottom) {\n    newBoundingRect.bottom += clientY;\n  }\n  if (edges.left) {\n    newBoundingRect.left += clientX;\n  }\n  if (edges.right) {\n    newBoundingRect.right += clientX;\n  }\n  newBoundingRect.height = newBoundingRect.bottom - newBoundingRect.top;\n  newBoundingRect.width = newBoundingRect.right - newBoundingRect.left;\n\n  return newBoundingRect;\n}\n\nfunction getElementRect(\n  element: ElementRef,\n  ghostElementPositioning: string\n): BoundingRectangle {\n  let translateX = 0;\n  let translateY = 0;\n  const style = element.nativeElement.style;\n  const transformProperties = [\n    'transform',\n    '-ms-transform',\n    '-moz-transform',\n    '-o-transform',\n  ];\n  const transform = transformProperties\n    .map((property) => style[property])\n    .find((value) => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(\n      /.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/,\n      '$1'\n    );\n    translateY = transform.replace(\n      /.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/,\n      '$2'\n    );\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX,\n    };\n  } else {\n    const boundingRect: BoundingRectangle =\n      element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft,\n    };\n  }\n}\n\nexport interface ResizeCursors {\n  topLeft: string;\n  topRight: string;\n  bottomLeft: string;\n  bottomRight: string;\n  leftOrRight: string;\n  topOrBottom: string;\n}\n\nconst DEFAULT_RESIZE_CURSORS: ResizeCursors = Object.freeze({\n  topLeft: 'nw-resize',\n  topRight: 'ne-resize',\n  bottomLeft: 'sw-resize',\n  bottomRight: 'se-resize',\n  leftOrRight: 'col-resize',\n  topOrBottom: 'row-resize',\n});\n\nfunction getResizeCursor(edges: Edges, cursors: ResizeCursors): string {\n  if (edges.left && edges.top) {\n    return cursors.topLeft;\n  } else if (edges.right && edges.top) {\n    return cursors.topRight;\n  } else if (edges.left && edges.bottom) {\n    return cursors.bottomLeft;\n  } else if (edges.right && edges.bottom) {\n    return cursors.bottomRight;\n  } else if (edges.left || edges.right) {\n    return cursors.leftOrRight;\n  } else if (edges.top || edges.bottom) {\n    return cursors.topOrBottom;\n  } else {\n    return '';\n  }\n}\n\nfunction getEdgesDiff({\n  edges,\n  initialRectangle,\n  newRectangle,\n}: {\n  edges: Edges;\n  initialRectangle: BoundingRectangle;\n  newRectangle: BoundingRectangle;\n}): Edges {\n  const edgesDiff: Edges = {};\n  Object.keys(edges).forEach((edge) => {\n    edgesDiff[edge] = (newRectangle[edge] || 0) - (initialRectangle[edge] || 0);\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * \n * \n * ```\n * Or in case they are sibling elements:\n * ```html\n * \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizable]',\n  exportAs: 'mwlResizable',\n})\nexport class ResizableDirective implements OnInit, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: Partial = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Allow elements to be resized to negative dimensions\n   */\n  @Input() allowNegativeResizes: boolean = false;\n\n  /**\n   * The mouse move throttle in milliseconds, default: 50 ms\n   */\n  @Input() mouseMoveThrottleMS: number = MOUSE_MOVE_THROTTLE_MS;\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private destroy$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: any,\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    const mousedown$: Observable = merge(this.pointerEventListeners.pointerDown, this.mousedown);\n\n    const mousemove$ = merge(\n      this.pointerEventListeners.pointerMove,\n      this.mousemove\n    ).pipe(\n      tap(({ event }) => {\n        if (currentResize && event.cancelable) {\n          event.preventDefault();\n        }\n      }),\n      share()\n    );\n\n    const mouseup$ = merge(this.pointerEventListeners.pointerUp, this.mouseup);\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const getResizeCursors = (): ResizeCursors => {\n      return {\n        ...DEFAULT_RESIZE_CURSORS,\n        ...this.resizeCursors,\n      };\n    };\n\n    const mousedrag: Observable = mousedown$\n      .pipe(\n        mergeMap((startCoords) => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY,\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y),\n            };\n          }\n\n          return (\n            merge(\n              mousemove$.pipe(take(1)).pipe(map((coords) => [, coords])),\n              mousemove$.pipe(pairwise())\n            ) as Observable\n          )\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords),\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y,\n                };\n              })\n            )\n            .pipe(takeUntil(merge(mouseup$, mousedown$)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return (\n            this.allowNegativeResizes ||\n            !!(\n              newBoundingRect.height &&\n              newBoundingRect.width &&\n              newBoundingRect.height > 0 &&\n              newBoundingRect.width > 0\n            )\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect,\n                }),\n              })\n            : true;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        if (this.resizing.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizing.emit({\n              edges: getEdgesDiff({\n                edges: currentResize!.edges,\n                initialRectangle: currentResize!.startingRect,\n                newRectangle: newBoundingRect,\n              }),\n              rectangle: newBoundingRect,\n            });\n          });\n        }\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    mousedown$\n      .pipe(\n        map(({ edges }) => {\n          return edges || {};\n        }),\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect,\n        };\n        const resizeCursors = getResizeCursors();\n        const cursor = getResizeCursor(currentResize.edges, resizeCursors);\n        this.renderer.setStyle(document.body, 'cursor', cursor);\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, true);\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = deepCloneNode(this.elm.nativeElement);\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        if (this.resizeStart.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizeStart.emit({\n              edges: getEdgesDiff({\n                edges,\n                initialRectangle: startingRect,\n                newRectangle: startingRect,\n              }),\n              rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0),\n            });\n          });\n        }\n      });\n\n    mouseup$.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        if (this.resizeEnd.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizeEnd.emit({\n              edges: getEdgesDiff({\n                edges: currentResize!.edges,\n                initialRectangle: currentResize!.startingRect,\n                newRectangle: currentResize!.currentRect,\n              }),\n              rectangle: currentResize!.currentRect,\n            });\n          });\n        }\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    // browser check for angular universal, because it doesn't know what document is\n    if (isPlatformBrowser(this.platformId)) {\n      this.renderer.setStyle(document.body, 'cursor', '');\n    }\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.destroy$.next();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable;\n\n  public pointerMove: Observable;\n\n  public pointerUp: Observable;\n\n  private static instance: PointerEventListeners;\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event,\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchStart = renderer.listen(\n              'document',\n              'touchstart',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.touches[0].clientX,\n                  clientY: event.touches[0].clientY,\n                  event,\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchStart!();\n          }\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event,\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchMove = renderer.listen(\n              'document',\n              'touchmove',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.targetTouches[0].clientX,\n                  clientY: event.targetTouches[0].clientY,\n                  event,\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchMove!();\n          }\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: (() => void) | undefined;\n        let unsubscribeTouchCancel: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event,\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchEnd = renderer.listen(\n              'document',\n              'touchend',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.changedTouches[0].clientX,\n                  clientY: event.changedTouches[0].clientY,\n                  event,\n                });\n              }\n            );\n\n            unsubscribeTouchCancel = renderer.listen(\n              'document',\n              'touchcancel',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.changedTouches[0].clientX,\n                  clientY: event.changedTouches[0].clientY,\n                  event,\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchEnd!();\n            unsubscribeTouchCancel!();\n          }\n        };\n      }\n    ).pipe(share());\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResizeEvent.html":{"url":"interfaces/ResizeEvent.html","title":"interface - ResizeEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ResizeEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-resizable-element/src/lib/interfaces/resize-event.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                The $event object that is passed to the resize events\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            edges\n                                        \n                                \n                                \n                                        \n                                            rectangle\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        edges\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        edges:         Edges\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Edges\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rectangle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rectangle:         BoundingRectangle\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BoundingRectangle\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BoundingRectangle } from './bounding-rectangle.interface';\nimport { Edges } from './edges.interface';\n\n/**\n * The `$event` object that is passed to the resize events\n */\nexport interface ResizeEvent {\n  rectangle: BoundingRectangle;\n  edges: Edges;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/ResizeHandleDirective.html":{"url":"directives/ResizeHandleDirective.html","title":"directive - ResizeHandleDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  ResizeHandleDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-resizable-element/src/lib/resize-handle.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                An element placed inside a mwlResizable directive to be used as a drag and resize handle\nFor example\n\n  \nOr in case they are sibling elements:\n\n\n            \n\n\n            \n                Implements\n            \n            \n                            OnInit\n                            OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [mwlResizeHandle]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                resizableContainer\n                            \n                            \n                                resizeEdges\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(renderer: Renderer2, element: ElementRef, zone: NgZone, resizableDirective: ResizableDirective)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-resizable-element/src/lib/resize-handle.directive.ts:52\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                        Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        element\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        zone\n                                                  \n                                                        \n                                                                        NgZone\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        resizableDirective\n                                                  \n                                                        \n                                                                        ResizableDirective\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        resizableContainer\n                    \n                \n                \n                    \n                        Type :         ResizableDirective\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-resizable-element/src/lib/resize-handle.directive.ts:44\n                            \n                        \n                \n                    \n                        Reference to ResizableDirective in case if handle is not located inside of element with ResizableDirective\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        resizeEdges\n                    \n                \n                \n                    \n                        Type :         Edges\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-resizable-element/src/lib/resize-handle.directive.ts:40\n                            \n                        \n                \n                    \n                        The Edges object that contains the edges of the parent element that dragging the handle will trigger a resize on\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  Input,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  OnDestroy,\n  NgZone,\n  Optional,\n} from '@angular/core';\nimport { fromEvent, merge, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { ResizableDirective } from './resizable.directive';\nimport { Edges } from './interfaces/edges.interface';\nimport { IS_TOUCH_DEVICE } from './util/is-touch-device';\n\n/**\n * An element placed inside a `mwlResizable` directive to be used as a drag and resize handle\n *\n * For example\n *\n * ```html\n * \n *   \n * \n * ```\n * Or in case they are sibling elements:\n * ```html\n * \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizeHandle]',\n})\nexport class ResizeHandleDirective implements OnInit, OnDestroy {\n  /**\n   * The `Edges` object that contains the edges of the parent element that dragging the handle will trigger a resize on\n   */\n  @Input() resizeEdges: Edges = {};\n  /**\n   * Reference to ResizableDirective in case if handle is not located inside of element with ResizableDirective\n   */\n  @Input() resizableContainer: ResizableDirective;\n\n  private eventListeners: {\n    touchmove?: () => void;\n    mousemove?: () => void;\n    [key: string]: (() => void) | undefined;\n  } = {};\n\n  private destroy$ = new Subject();\n\n  constructor(\n    private renderer: Renderer2,\n    private element: ElementRef,\n    private zone: NgZone,\n    @Optional() private resizableDirective: ResizableDirective\n  ) {}\n\n  ngOnInit(): void {\n    this.zone.runOutsideAngular(() => {\n      this.listenOnTheHost('mousedown').subscribe((event) => {\n        this.onMousedown(event, event.clientX, event.clientY);\n      });\n\n      this.listenOnTheHost('mouseup').subscribe((event) => {\n        this.onMouseup(event.clientX, event.clientY);\n      });\n\n      if (IS_TOUCH_DEVICE) {\n        this.listenOnTheHost('touchstart').subscribe((event) => {\n          this.onMousedown(\n            event,\n            event.touches[0].clientX,\n            event.touches[0].clientY\n          );\n        });\n\n        merge(\n          this.listenOnTheHost('touchend'),\n          this.listenOnTheHost('touchcancel')\n        ).subscribe((event) => {\n          this.onMouseup(\n            event.changedTouches[0].clientX,\n            event.changedTouches[0].clientY\n          );\n        });\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.unsubscribeEventListeners();\n  }\n\n  /**\n   * @hidden\n   */\n  onMousedown(\n    event: MouseEvent | TouchEvent,\n    clientX: number,\n    clientY: number\n  ): void {\n    event.preventDefault();\n    if (!this.eventListeners.touchmove) {\n      this.eventListeners.touchmove = this.renderer.listen(\n        this.element.nativeElement,\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          this.onMousemove(\n            touchMoveEvent,\n            touchMoveEvent.targetTouches[0].clientX,\n            touchMoveEvent.targetTouches[0].clientY\n          );\n        }\n      );\n    }\n    if (!this.eventListeners.mousemove) {\n      this.eventListeners.mousemove = this.renderer.listen(\n        this.element.nativeElement,\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.onMousemove(\n            mouseMoveEvent,\n            mouseMoveEvent.clientX,\n            mouseMoveEvent.clientY\n          );\n        }\n      );\n    }\n    this.resizable.mousedown.next({\n      clientX,\n      clientY,\n      edges: this.resizeEdges,\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  onMouseup(clientX: number, clientY: number): void {\n    this.unsubscribeEventListeners();\n    this.resizable.mouseup.next({\n      clientX,\n      clientY,\n      edges: this.resizeEdges,\n    });\n  }\n\n  // directive might be passed from DI or as an input\n  private get resizable(): ResizableDirective {\n    return this.resizableDirective || this.resizableContainer;\n  }\n\n  private onMousemove(\n    event: MouseEvent | TouchEvent,\n    clientX: number,\n    clientY: number\n  ): void {\n    this.resizable.mousemove.next({\n      clientX,\n      clientY,\n      edges: this.resizeEdges,\n      event,\n    });\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListeners).forEach((type) => {\n      (this as any).eventListeners[type]();\n      delete this.eventListeners[type];\n    });\n  }\n\n  private listenOnTheHost(eventName: string) {\n    return fromEvent(this.element.nativeElement, eventName).pipe(\n      takeUntil(this.destroy$)\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n7.0.1 (2022-12-12)\nBug Fixes\n\ncheck if event is cancelable before calling preventDefault (#132) (10bfc51)\n\n7.0.0 (2022-12-11)\n⚠ BREAKING CHANGES\n\nangular 15 or higher is now required to use this package\n\nbuild\n\nupgrade to angular 15 (3c2c930)\n\n6.0.2 (2022-12-11)\nBug Fixes\n\nresizable: correct type for resizeCursors input to make all properties optional (c973e74)\n\n6.0.1 (2022-12-11)\nBug Fixes\n\nexpose ResizeCursors interface as part of the public api (767bd1b)\n\n6.0.0 (2022-08-02)\n⚠ BREAKING CHANGES\n\nangular 14 or higher is now required to use this package\n\nbuild\n\nupgrade to angular 14 (180ab35)\n\n5.0.0 (2021-12-11)\n⚠ BREAKING CHANGES\n\nangular 12 or higher is now required to use this package\n\nFeatures\n\npublish package in ivy partial compilation mode (d9ad08c)\n\n4.0.0 (2021-08-30)\n⚠ BREAKING CHANGES\n\nmwlResizable: the resizeEdges and resizeCursorPrecision inputs have been removed from the mwlResizable directive.\n\nTo migrate, please use the mwlResizeHandle directive instead (see the readme for a full example)\n\nangular 10 or higher is now required to use this package\n\nFeatures\n\nmwlResizable: remove deprecated resizeEdges and resizeCursorPrecision inputs (58c954e)\n\nBug Fixes\n\ncopy canvas when using enableGhostResize (#129) (d65c257)\n\nbuild\n\nmigrate to the angular cli (21eca11), closes #125\n\n\n3.4.0 (2021-06-02)\nFeatures\n\nmwlResizeHandle: add resizableContainer input (862249f)\n\n\n3.3.5 (2021-02-02)\nPerformance Improvements\n\nlisten to touch events only on touch devices (#126) (c85a28d)\n\n\n3.3.4 (2020-11-21)\nPerformance Improvements\n\nonly trigger change detection if there are output subscribers (930de54)\n\n\n3.3.3 (2020-07-24)\nBug Fixes\n\nhandle existing negative css transforms on resizable elements (edf56db)\n\n\n3.3.2 (2020-05-22)\nBug Fixes\n\nallow any angular version above 6 (66f2289)\n\n\n3.3.1 (2020-05-22)\nBug Fixes\n\nhandle translate3d transforms on resizable elements (534bdf6), closes #100\n\n\n3.3.0 (2020-01-14)\nFeatures\n\nallow changing mouseMoveThrottleMS (#106) (fb5599b)\n\n\n3.2.6 (2019-10-11)\nBug Fixes\n\nallow angular 9 peer dependency (86e366c)\n\n\n3.2.5 (2019-10-07)\nPerformance Improvements\n\nlazily initialise all mousemove listeners until needed (81134ee)\n\n\n3.2.4 (2019-02-28)\nBug Fixes\n\nrestore compatibility with universal (210decc), closes #83\n\n\n3.2.3 (2019-02-05)\nBug Fixes\n\nallow angular 8 peer dependency (94dc48d)\ndeprecate the top level resizeEdges option in favour of resize handles (2f6ac2d)\n\nPerformance Improvements\n\nremove mouse move listeners when only using resize handles (1185f3a)\n\n\n3.2.2 (2018-08-10)\nBug Fixes\n\ndon't throw errors when immediately destroying the host component (56e463b)\n\n\n3.2.1 (2018-08-03)\nBug Fixes\n\nensure all resizing events are always emitted (25d6fa3)\n\n\n3.2.0 (2018-07-23)\nFeatures\n\nallow negative resizing of elements (560bcb1)\n\n\n3.1.0 (2018-06-19)\nFeatures\n\nimprove default resize cursors (37fc88e)\n\n\n3.0.0 (2018-05-09)\nFeatures\n\nupgrade to angular 6 (c7e3de6)\n\nBREAKING CHANGES\n\nangular 6 and rxjs 6 or higher are now required to use this package\n\n\n2.0.0 (2017-12-26)\nFeatures\n\nexport directives with Directive suffix (0440bbd)\nupgrade to angular 5 (5d6a576)\nuse lettable rxjs operators (af7abf7)\nuse ng-packagr for bundling the package (c4519a1), closes #79 #80\n\nBREAKING CHANGES\n\nthe global observable prototype is now no longer modified by this package, you must\nimport rxjs operators yourself. Also rxjs 5.5 or higher is now required to use this library\nThe UMD entry point has changed from angular-resizable-element/dist/umd/angular-resizable-element.js to angular-resizable-element/bundles/angular-resizable-element.umd.js\n\nSystem.js users will need to update their configs\n\nangular 5 or higher is now required to use this package\nThe Resizable import is now ResizableDirective and ResizeHandle is now\nResizeHandleDirective\n\n\n1.2.5 (2017-12-26)\nBug Fixes\n\nresizeHandle: allow handles to be dynamically shown (34342aa), closes #68\nresize elements that have css transforms (f24a746), closes #72\nset the resize cursor globally when resizing (71d5a05), closes #70\n\n\n1.2.4 (2017-10-21)\nBug Fixes\n\nallow angular 5 peer dependency (25cfe50)\n\n\n1.2.3 (2017-09-28)\nBug Fixes\n\nAdd startingRect scroll position to cloned node. (#66) (a056154)\n\n\n1.2.2 (2017-08-28)\nBug Fixes\n\nensure mouse event handlers are triggers outside of the angular zone (23fc6e5), closes #65\n\n\n1.2.1 (2017-08-06)\nBug Fixes\n\ncursor: change the cursor back to default on IE11 (a0323e9), closes #62\n\n\n1.2.0 (2017-06-12)\nFeatures\n\nexport Edges and BoundingRectangle interfaces for use within applications (10051cd)\n\n\n1.1.2 (2017-06-10)\nBug Fixes\n\ndragHandle: fix drag handles on firefox (1d15bb4), closes #54\n\n\n1.1.1 (2017-05-21)\nBug Fixes\n\nset ghost element width and height on resize start (be5d727), closes #53\n\n\n1.1.0 (2017-05-12)\nFeatures\n\nadd a class to the ghost element (54be6b7)\n\n\n1.0.0 (2017-03-24)\nFeatures\n\nng4: upgrade to angular 4 (4c665d2)\n\nBREAKING CHANGES\n\nng4: angular 4.0 or higher is now required to use this library. The\nupgrade should be seamless\nfor most users.\n\n\n0.8.1 (2017-03-23)\nPerformance Improvements\n\nthrottle mousemove listener events (05f7f7e)\nuse shared mouse event listeners across all resizable instances (2a4b102)\n\n\n0.8.0 (2017-03-16)\nFeatures\n\nghostElementPositioning: allow ghost element positioning to be configured (b77c9fc)\nexpose Resizable and ResizeHandle directives (3633040)\n\n\n0.7.2 (2017-03-04)\nBug Fixes\n\nrelax peer dependency warning to allow angular 4 (8232e66)\n\nPerformance Improvements\n\nrun all rezize events outside the angular zone (820612e)\nresizable: only register mouse move events when a rezize is active (a74f9e2)\nresizeHandle: dynamically register mouse move event listener (4b20cde)\n\n\n0.7.0 (2017-02-28)\nFeatures\n\ncssClasses: Gives classes to main element depend on state (8e3f108)\ncursorPrecision: allow cursor precision value to be edited (3ce508d)\n\n\n0.6.1 (2017-02-11)\nBug Fixes\n\nuniversal: remove MouseEvent reference (520abce), closes #41\n\n\n0.6.0 (2017-02-04)\nFeatures\n\nresizeCursors: allow resize cursors to be customised (99d2f66), closes #40\n\n\n0.5.7 (2017-01-30)\nBug Fixes\n\nuse correct touch event properties (0ab7d40), closes #39\n\n\n0.5.6 (2017-01-25)\nBug Fixes\n\nelement should resize on touch events (aa169c7), closes #36\n\n\n0.5.5 (2017-01-11)\nBug Fixes\n\nadd width and height to cloned node (75ce122), closes #31\nkeep cursor while resizing (93a5c4e), closes #33\n\n\n0.5.4 (2016-12-11)\nBug Fixes\n\ncursor: reset the cursor instead of changing it to auto (514851f)\n\n\n0.5.3 (2016-11-19)\nBug Fixes\n\nunsubscribe all observables when the component is destroyed (d5ea756), closes #27\n\n\n0.5.2 (2016-11-05)\nBug Fixes\n\naot: aot compatibility (9236e02)\n\n\n0.5.1 (2016-11-03)\nBug Fixes\n\ndont change the cursor when resizing an element (697c52c), closes #24\n\n\n0.5.0 (2016-10-29)\nBug Fixes\n\nfix resizing via a drag handle (5f7f468)\nprevent text from being selected when resizing an element (5571069), closes #22\n\nFeatures\n\nrename the library from angular2-resizable to angular-resizable-element (927235e), closes #21\nrename the resize output to resizing (9597986), closes #20\n\nBREAKING CHANGES\n\nThe library has been renamed to angular-resizable-element.\n\nThe UMD entry point has changed to\nnode_modules/angular-resizable-element/dist/umd/angular-resizable-element.js\nBefore\n\n(resize)=\"onResize($event)\"After:\n(resizing)=\"onResizing($event)\"\n0.4.1 (2016-09-28)\nBug Fixes\n\ntypings: dont include reference to core-js (68dc84f)\n\n\n0.4.0 (2016-09-25)\nFeatures\n\nbuild: support offline template compilation (f3fe12a)\n\nBREAKING CHANGES\n\nbuild: For System.js users the path to the UMD files has changed:\n\nBefore:\nnode_modules/angular2-resizable/angular2-resizable.jsAfter:\nnode_modules/angular2-resizable/dist/umd/angular2-resizable.js\n0.3.3 (2016-09-13)\nBug Fixes\n\npeerDependencies: allow any versions of angular post RC5 (cbe088f)\n\n\n0.3.2 (2016-09-03)\nFeatures\n\nangular: support RC6 (d5b18cc)\n\n\n0.3.1 (2016-08-25)\nBug Fixes\n\nrxjs: use correct rxjs operator imports in dist (858b3f8), closes #16\n\n\n0.3.0 (2016-08-12)\nFeatures\n\nevents: rename all outputs to drop the on prefix (9c76aac)\ndirective selectors are now camel case instead of dash case (ffad2ca)\nupgrade to angular RC5 (9557c0a)\n\nBREAKING CHANGES\n\nmwl-resizable is now mwlResizable and mwl-resize-handle is now mwlResizeHandle\nAngular RC5 is now required\n\nThe Resizable and ResizeHandle directives are now no longer exported. Instead you must use the ResizableModule. See the readme or the demo app for an example of how to do this.\n\nevents: The onResizeStart output has been renamed to resizeStart\n\nThe onResize output has been renamed to resize\nThe onResizeEnd output has been renamed to resizeEnd\n\n0.2.1 (2016-07-15)\nBug Fixes\n\ndemo: fix broken demo (0a5bf11)\n\n\n0.2.0 (2016-07-15)\nBug Fixes\n\ncreate a clone of the ghost element instead of applying styling to the host (fa73345), closes #15\nonly resize when the cursor is within the bounding rectangle (dedc3bb)\n\nBREAKING CHANGES\n\nenableResizeStyling has been renamed to enableGhostResize\n\n\n0.1.0 (2016-06-26)\nBug Fixes\n\nmousedrag: cancel the previous mousedrag observable when starting a new drag (149c1a4), closes #9\nonResizeEnd: call with co-ordinates of last valid resize rather than where the mouse up event w (eb314fd)\nonResizeStart: ensure the starting rectangle is a POJO rather than a bounding rectangle (81fe0b4)\ncancel mousedrag event when either a mouseup or mousedown event fires (c76be59)\ndisable dragging effects on resizable elements on webkit browsers (59078e2)\nrenamed directive selector from mwl-resizeable to mwl-resizable (c60b3f5)\n\nFeatures\n\ndisableResize: support completely disabling resizing an element (9f9c54a), closes #13\nexpose the amount each edge was resized on resize events (d664038), closes #11\nenableResizeStyling: make temporary resizing of the element opt-in by default so users can con (4c59b05), closes #5\nresizeEdges: allow the resize edges to be customised (60c2e08), closes #8\nresizeHandles: add support for nesting resize handles inside the element (1af705a), closes #10\nresizeSnapGrid: allow resizing to fit to a snap grid (74424ba), closes #3\nvalidate: provide a way for resize events to be validated (4da938d), closes #12\n\nBREAKING CHANGES\n\nenableResizeStyling: the element will no longer have its styles changed by default when dragging and\nresizing. You can now re-enable it by setting [enableResizeStyling]=\"true\" on the element.\nthe $event.edges object values now contain numbers instead of booleans\n\nrename the directive from mwl-resizeable to mwl-resizable\n\n\nresizeEdges: by default the element is no longer resizable.\n\nYou must specify [resizeEdges]={top: true, bottom: true, left: true, right: true} to get the old behaviour back\n\n0.0.3 (2016-06-13)\nBug Fixes\n\nimport missing rxjs operators (300ac10)\n\n\n0.0.2 (2016-06-13)\nBug Fixes\n\ntypes: export Edges and BoundingRectangle types (fe49114)\ndont bundle rxjs with the library (7b1280e)\n\n\n0.0.1 (2016-06-13)\nBug Fixes\n\nallow the element to be resized multiple times (bf497d2)\ndrag: disable user dragging (053fb0e)\nreset element styles on mousedown if there was a previous uncancelled resize (a8e5cd3)\noutputs: make outputs sync to prevent ui flicker (032ea5a)\ntypescript: add missing types (e722a86)\n\nFeatures\n\nimprove transforms, add resize events (0959a12)\ninitial WIP resizable implementation (22af52f)\nshow the cursor when mousing over the edge of the element (f440c87)\nsupport resizing from corners (bac87e3), closes #4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Peer dependencies\n    \n    \n        \n            @angular/core : >=15.0.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            getEdgesDiff   (projects/.../resizable.directive.ts)\n                        \n                        \n                            getElementRect   (projects/.../resizable.directive.ts)\n                        \n                        \n                            getNewBoundingRectangle   (projects/.../resizable.directive.ts)\n                        \n                        \n                            getResizeCursor   (projects/.../resizable.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-resizable-element/src/lib/resizable.directive.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getEdgesDiff\n                        \n                    \n                \n            \n            \n                \ngetEdgesDiff(__namedParameters: {edges: Edges, initialRectangle: BoundingRectangle, newRectangle: BoundingRectangle})\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edges\n                                    \n                                                Edges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    initialRectangle\n                                    \n                                                BoundingRectangle\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newRectangle\n                                    \n                                                BoundingRectangle\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Edges\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getElementRect\n                        \n                    \n                \n            \n            \n                \ngetElementRect(element: ElementRef, ghostElementPositioning: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    element\n                                    \n                                                ElementRef\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ghostElementPositioning\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BoundingRectangle\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNewBoundingRectangle\n                        \n                    \n                \n            \n            \n                \ngetNewBoundingRectangle(startingRect: BoundingRectangle, edges: Edges, clientX: number, clientY: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    startingRect\n                                    \n                                                BoundingRectangle\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    edges\n                                    \n                                                Edges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientX\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientY\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BoundingRectangle\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getResizeCursor\n                        \n                    \n                \n            \n            \n                \ngetResizeCursor(edges: Edges, cursors: ResizeCursors)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edges\n                                    \n                                                Edges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cursors\n                                    \n                                                ResizeCursors\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nangular resizable element\n\n\n\n\n\nDemo\nhttps://mattlewis92.github.io/angular-resizable-element/\nTable of contents\n\nAbout\nInstallation\nDocumentation\nDevelopment\nLicense\n\nAbout\nAn angular 15.0+ directive that allows an element to be dragged and resized\nInstallation\nInstall through npm:\nnpm install angular-resizable-elementThen use it in your app like so:\nimport { Component } from '@angular/core';\nimport { ResizeEvent } from 'angular-resizable-element';\n\n@Component({\n  selector: 'demo-app',\n  styles: [\n    `\n      .rectangle {\n        position: relative;\n        top: 200px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: 300px;\n        height: 150px;\n        background-color: #fd4140;\n        border: solid 1px #121621;\n        color: #121621;\n        margin: auto;\n      }\n\n      mwlResizable {\n        box-sizing: border-box; // required for the enableGhostResize option to work\n      }\n\n      .resize-handle-top,\n      .resize-handle-bottom {\n        position: absolute;\n        height: 5px;\n        cursor: row-resize;\n        width: 100%;\n      }\n\n      .resize-handle-top {\n        top: 0;\n      }\n\n      .resize-handle-bottom {\n        bottom: 0;\n      }\n\n      .resize-handle-left,\n      .resize-handle-right {\n        position: absolute;\n        height: 100%;\n        cursor: col-resize;\n        width: 5px;\n      }\n\n      .resize-handle-left {\n        left: 0;\n      }\n\n      .resize-handle-right {\n        right: 0;\n      }\n    `,\n  ],\n  template: `\n    \n      \n      \n      \n      \n    \n  `,\n})\nexport class MyComponent {\n  onResizeEnd(event: ResizeEvent): void {\n    console.log('Element was resized', event);\n  }\n}\n\n// now use within your apps module\nimport { NgModule } from '@angular/core';\nimport { ResizableModule } from 'angular-resizable-element';\n\n@NgModule({\n  declarations: [MyComponent],\n  imports: [ResizableModule],\n  bootstrap: [MyComponent],\n})\nclass MyModule {}You may also find it useful to view the demo source.\nDocumentation\nAll documentation is auto-generated from the source and can be viewed here:\nhttps://mattlewis92.github.io/angular-resizable-element/docs/\nDevelopment\nPrepare your environment\n\nInstall Node.js (>=14.19.0 or >=16.9.0)\nInstall pnpm: corepack enable\nInstall local dev dependencies: pnpm install while current directory is this repo\n\nDevelopment server\nRun pnpm start to start a development server on port 8000 with auto reload + tests.\nTesting\nRun pnpm test to run tests once or pnpm test:watch to continually run tests.\nRelease\npnpm releaseLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2016 Matt Lewis\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ResizableModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 7.0.1\n        \n            Description : An angular 15.0+ directive that allows an element to be dragged and resized\n        \n            Keywords : angular, angular2, resizable\n        \n            Homepage : https://github.com/mattlewis92/angular-resizable-element#readme\n        \n            Bugs : https://github.com/mattlewis92/angular-resizable-element/issues\n        \n            License : MIT\n        \n            Repository : git+https://github.com/mattlewis92/angular-resizable-element.git\n        \n            Author : Matt Lewis\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DEFAULT_RESIZE_CURSORS   (projects/.../resizable.directive.ts)\n                        \n                        \n                            MOUSE_MOVE_THROTTLE_MS   (projects/.../resizable.directive.ts)\n                        \n                        \n                            RESIZE_ACTIVE_CLASS   (projects/.../resizable.directive.ts)\n                        \n                        \n                            RESIZE_GHOST_ELEMENT_CLASS   (projects/.../resizable.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-resizable-element/src/lib/resizable.directive.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DEFAULT_RESIZE_CURSORS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResizeCursors\n\n                    \n                \n                \n                    \n                        Default value : Object.freeze({\n  topLeft: 'nw-resize',\n  topRight: 'ne-resize',\n  bottomLeft: 'sw-resize',\n  bottomRight: 'se-resize',\n  leftOrRight: 'col-resize',\n  topOrBottom: 'row-resize',\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MOUSE_MOVE_THROTTLE_MS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RESIZE_ACTIVE_CLASS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'resize-active'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RESIZE_GHOST_ELEMENT_CLASS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'resize-ghost-element'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
