var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/interfaces/BoundingRectangle.html",[0,0.15,1,0.736]],["body/interfaces/BoundingRectangle.html",[0,0.252,1,1.236,2,0.889,3,0.753,4,0.628,5,4.528,6,3.807,7,1.859,8,2.537,9,1.039,10,0.512,11,0.753,12,0.747,13,1.435,14,1.168,15,1.932,16,1.585,17,1.168,18,0.989,19,2.113,20,2.113,21,1.168,22,1.585,23,3.017,24,1.236,25,1.282,26,0.057,27,1.435,28,1.206,29,3.807,30,1.044,31,0.628,32,0.048,33,0.048]],["title/interfaces/Coordinate.html",[0,0.15,34,1.139]],["body/interfaces/Coordinate.html",[0,0.163,1,1.139,2,0.351,3,0.297,4,0.248,9,0.908,10,0.672,11,0.869,12,0.248,13,0.751,14,0.777,16,1.054,17,0.898,18,0.658,19,1.001,20,1.001,21,0.898,22,1.054,24,1.099,25,1.161,26,0.058,27,1.054,28,0.476,30,0.469,31,0.391,32,0.025,33,0.025,34,1.762,35,0.551,36,1.878,37,1.878,38,0.974,39,0.469,40,1.406,41,1.239,42,1.001,43,1.406,44,1.608,45,1.625,46,1.001,47,1.406,48,1.157,49,1.157,50,0.734,51,0.734,52,0.411,53,0.734,54,0.734,55,1.408,56,2.035,57,1.074,58,1.157,59,0.551,60,1.768,61,0.734,62,0.635,63,0.734,64,0.734,65,0.734,66,1.001,67,0.734,68,0.734,69,0.734,70,1.157,71,0.635,72,0.983,73,0.635,74,0.734,75,0.635,76,1.218,77,0.734,78,0.734,79,1.7,80,0.551,81,0.551,82,0.635,83,1.789,84,1.82,85,1.004,86,1.218,87,1.529,88,1.325,89,0.635,90,0.635,91,1.001,92,0.551,93,1.001,94,1.408,95,2.478,96,1.157,97,0.734,98,2.129,99,0.734,100,0.734,101,0.476,102,0.635,103,0.734,104,1.768,105,1.157,106,1.157,107,1.977,108,1.625,109,1.239,110,1.768,111,0.635,112,0.868,113,1.239,114,1.157,115,1.157,116,1.157,117,1.157,118,0.734,119,0.734,120,0.734,121,0.734,122,0.734,123,0.734,124,0.734,125,0.734,126,0.734,127,0.734,128,0.635,129,1.157,130,0.734,131,0.734,132,0.734,133,0.734,134,0.734,135,0.734,136,0.734,137,1.239,138,0.868,139,1.001,140,1.406,141,1.001,142,1.001,143,1.001,144,1.001,145,0.868,146,1.001,147,1.001,148,0.635,149,0.635,150,0.551,151,1.001,152,0.551,153,0.635,154,0.476,155,0.751,156,0.734,157,0.469,158,0.411,159,0.551,160,1.406,161,0.635,162,0.635,163,1.856,164,1.074,165,0.734,166,1.625,167,0.635,168,0.734,169,0.551,170,1.054,171,0.751,172,1.001,173,0.647,174,0.751,175,1.001,176,1.074,177,0.734,178,0.734,179,1.218,180,1.406,181,0.635,182,0.635,183,0.635,184,0.734,185,1.001,186,1.001,187,0.551,188,0.635,189,0.635,190,0.734,191,0.734,192,0.734,193,1.001,194,0.635,195,1.625,196,1.443,197,1.321,198,1.001,199,0.635,200,0.734,201,0.734,202,0.734,203,0.734,204,1.239,205,0.635,206,0.734,207,0.734,208,0.635,209,0.635,210,0.734,211,0.734,212,0.635,213,0.734,214,0.734,215,1.668,216,0.476,217,0.734,218,0.635,219,1.762,220,2.036,221,1.239,222,1.625,223,1.218,224,1.762,225,1.625,226,0.551,227,0.635,228,0.734,229,0.734,230,1.406,231,1.432,232,1.325,233,0.734,234,0.734,235,0.635,236,1.64,237,0.734,238,0.734,239,0.734,240,0.734,241,2.188,242,2.188,243,1.157,244,0.635,245,1.157,246,0.734,247,0.734,248,0.635,249,1.001,250,1.157,251,0.734,252,0.635,253,0.734,254,0.734,255,1.001,256,0.734,257,0.734,258,0.734,259,0.734,260,0.734,261,1.408,262,1.157,263,0.734,264,0.734,265,1.157,266,1.432,267,2.332,268,0.734,269,1.432,270,1.157,271,0.734,272,1.239,273,0.734,274,1.406,275,0.734,276,0.734,277,0.734,278,0.734,279,0.734,280,0.734,281,1.239,282,0.635,283,1.001,284,1.965,285,1.157,286,1.001,287,1.157,288,0.734,289,1.625,290,0.734,291,0.734,292,0.734,293,0.734,294,1.001,295,0.734,296,0.734,297,0.734,298,0.734,299,0.734,300,0.734,301,1.432,302,1.965,303,1.157,304,0.734,305,1.768,306,1.157,307,0.734,308,1.157,309,0.734,310,1.768,311,1.157,312,0.734,313,1.157,314,1.157,315,0.734,316,0.734,317,0.734,318,0.734,319,0.734,320,1.432,321,1.625,322,0.734,323,0.734,324,0.734,325,0.734,326,0.734,327,0.734,328,0.734,329,0.734,330,0.734,331,0.734,332,0.734,333,0.734,334,0.734,335,0.734,336,0.635,337,1.625,338,1.625,339,1.157,340,0.734,341,1.157,342,1.157,343,1.157,344,1.768,345,1.406,346,1.625,347,1.625,348,0.734,349,2.188,350,0.734,351,0.734,352,0.734,353,0.734,354,0.734,355,1.432,356,0.734,357,1.432,358,0.734,359,0.734,360,0.734,361,0.635,362,1.157,363,1.157,364,1.432,365,0.734,366,0.734,367,0.734,368,0.734,369,0.734,370,0.734,371,0.734,372,0.734,373,0.734,374,0.734,375,0.734,376,1.157,377,0.734,378,0.734,379,0.734,380,0.635,381,0.734,382,0.734,383,0.734,384,0.734,385,0.734,386,0.734,387,0.734,388,0.635,389,0.734,390,0.551,391,0.635,392,0.734,393,0.734,394,1.321,395,0.734,396,0.734,397,0.734,398,0.734,399,0.734,400,0.635,401,0.734,402,1.074,403,1.001,404,0.734,405,0.734,406,0.734,407,0.734,408,0.734,409,1.157,410,0.635,411,0.734,412,0.734,413,0.734,414,1.432,415,0.635,416,0.734,417,1.432,418,1.432,419,1.432,420,1.965,421,1.965,422,1.239,423,1.239,424,0.734,425,0.635,426,0.635,427,1.432,428,0.734,429,1.432,430,1.432,431,0.635,432,0.734,433,0.734,434,0.734,435,1.432,436,1.432,437,1.432,438,0.734,439,1.001,440,1.001,441,0.734]],["title/interfaces/Edges.html",[0,0.15,72,0.533]],["body/interfaces/Edges.html",[0,0.253,2,0.898,3,0.76,4,0.634,7,1.877,10,0.517,12,0.751,13,1.443,14,1.172,15,1.935,17,1.172,18,0.992,21,1.172,23,3.034,24,1.243,25,1.264,26,0.058,27,1.443,28,1.218,30,0.992,31,0.634,32,0.048,33,0.048,72,0.96,85,0.76,94,1.981,442,3.844,443,2.561,444,3.844]],["title/interfaces/PointerEventCoordinate.html",[0,0.15,82,1.139]],["body/interfaces/PointerEventCoordinate.html",[0,0.163,1,1.137,2,0.35,3,0.296,4,0.247,9,0.906,10,0.672,11,0.868,12,0.247,13,0.748,14,0.776,16,1.052,17,0.897,18,0.657,19,0.998,20,0.998,21,0.897,22,1.052,24,1.097,25,1.161,26,0.058,27,1.052,28,0.474,30,0.578,31,0.39,32,0.025,33,0.025,34,1.698,35,0.548,36,1.428,37,1.428,38,0.973,39,0.467,40,1.403,41,1.236,42,0.998,43,1.403,44,1.606,45,1.621,46,0.998,47,1.403,48,1.153,49,1.153,50,0.731,51,0.731,52,0.409,53,0.731,54,0.731,55,1.406,56,2.033,57,1.071,58,1.153,59,0.548,60,1.764,61,0.731,62,0.633,63,0.731,64,0.731,65,0.731,66,0.998,67,0.731,68,0.731,69,0.731,70,1.153,71,0.633,72,0.983,73,0.633,74,0.731,75,0.633,76,1.216,77,0.731,78,0.731,79,1.698,80,0.548,81,0.548,82,0.998,83,1.819,84,1.844,85,1.012,86,1.406,87,1.698,88,1.323,89,0.633,90,0.633,91,0.998,92,0.548,93,0.998,94,1.406,95,2.477,96,1.153,97,0.731,98,2.128,99,0.731,100,0.731,101,0.474,102,0.633,103,0.731,104,1.764,105,1.153,106,1.153,107,1.975,108,1.621,109,1.236,110,1.764,111,0.633,112,0.865,113,1.236,114,1.153,115,1.153,116,1.153,117,1.153,118,0.731,119,0.731,120,0.731,121,0.731,122,0.731,123,0.731,124,0.731,125,0.731,126,0.731,127,0.731,128,0.633,129,1.153,130,0.731,131,0.731,132,0.731,133,0.731,134,0.731,135,0.731,136,0.731,137,1.236,138,0.865,139,0.998,140,1.403,141,0.998,142,0.998,143,0.998,144,0.998,145,0.865,146,0.998,147,0.998,148,0.633,149,0.633,150,0.548,151,0.998,152,0.548,153,0.633,154,0.474,155,0.748,156,0.731,157,0.467,158,0.409,159,0.548,160,1.403,161,0.633,162,0.633,163,1.854,164,1.071,165,0.731,166,1.621,167,0.633,168,0.731,169,0.548,170,1.052,171,0.748,172,0.998,173,0.645,174,0.748,175,0.998,176,1.071,177,0.731,178,0.731,179,1.215,180,1.403,181,0.633,182,0.633,183,0.633,184,0.731,185,0.998,186,0.998,187,0.548,188,0.633,189,0.633,190,0.731,191,0.731,192,0.731,193,0.998,194,0.633,195,1.622,196,1.442,197,1.319,198,0.998,199,0.633,200,0.731,201,0.731,202,0.731,203,0.731,204,1.236,205,0.633,206,0.731,207,0.731,208,0.633,209,0.633,210,0.731,211,0.731,212,0.633,213,0.731,214,0.731,215,1.666,216,0.474,217,0.731,218,0.633,219,1.759,220,2.033,221,1.236,222,1.622,223,1.215,224,1.759,225,1.622,226,0.548,227,0.633,228,0.731,229,0.731,230,1.403,231,1.428,232,1.323,233,0.731,234,0.731,235,0.633,236,1.638,237,0.731,238,0.731,239,0.731,240,0.731,241,2.185,242,2.185,243,1.153,244,0.633,245,1.153,246,0.731,247,0.731,248,0.633,249,0.998,250,1.153,251,0.731,252,0.633,253,0.731,254,0.731,255,0.998,256,0.731,257,0.731,258,0.731,259,0.731,260,0.731,261,1.406,262,1.153,263,0.731,264,0.731,265,1.153,266,1.428,267,2.33,268,0.731,269,1.428,270,1.153,271,0.731,272,1.236,273,0.731,274,1.403,275,0.731,276,0.731,277,0.731,278,0.731,279,0.731,280,0.731,281,1.236,282,0.633,283,0.998,284,1.962,285,1.153,286,0.998,287,1.153,288,0.731,289,1.621,290,0.731,291,0.731,292,0.731,293,0.731,294,0.998,295,0.731,296,0.731,297,0.731,298,0.731,299,0.731,300,0.731,301,1.428,302,1.962,303,1.153,304,0.731,305,1.764,306,1.153,307,0.731,308,1.153,309,0.731,310,1.764,311,1.153,312,0.731,313,1.153,314,1.153,315,0.731,316,0.731,317,0.731,318,0.731,319,0.731,320,1.428,321,1.621,322,0.731,323,0.731,324,0.731,325,0.731,326,0.731,327,0.731,328,0.731,329,0.731,330,0.731,331,0.731,332,0.731,333,0.731,334,0.731,335,0.731,336,0.633,337,1.621,338,1.621,339,1.153,340,0.731,341,1.153,342,1.153,343,1.153,344,1.764,345,1.403,346,1.621,347,1.621,348,0.731,349,2.185,350,0.731,351,0.731,352,0.731,353,0.731,354,0.731,355,1.428,356,0.731,357,1.428,358,0.731,359,0.731,360,0.731,361,0.633,362,1.153,363,1.153,364,1.428,365,0.731,366,0.731,367,0.731,368,0.731,369,0.731,370,0.731,371,0.731,372,0.731,373,0.731,374,0.731,375,0.731,376,1.153,377,0.731,378,0.731,379,0.731,380,0.633,381,0.731,382,0.731,383,0.731,384,0.731,385,0.731,386,0.731,387,0.731,388,0.633,389,0.731,390,0.548,391,0.633,392,0.731,393,0.731,394,1.319,395,0.731,396,0.731,397,0.731,398,0.731,399,0.731,400,0.633,401,0.731,402,1.071,403,0.998,404,0.731,405,0.731,406,0.731,407,0.731,408,0.731,409,1.153,410,0.633,411,0.731,412,0.731,413,0.731,414,1.428,415,0.633,416,0.731,417,1.428,418,1.428,419,1.428,420,1.962,421,1.962,422,1.236,423,1.236,424,0.731,425,0.633,426,0.633,427,1.428,428,0.731,429,1.428,430,1.428,431,0.633,432,0.731,433,0.731,434,0.731,435,1.428,436,1.428,437,1.428,438,0.731,439,0.998,440,0.998,441,0.731]],["title/classes/PointerEventListeners.html",[157,0.533,225,1.139]],["body/classes/PointerEventListeners.html",[0,0.129,1,1.13,2,0.344,3,0.291,4,0.243,9,0.897,10,0.67,11,0.863,12,0.243,13,0.738,14,0.768,15,0.853,16,1.041,17,0.89,18,0.65,19,0.984,20,0.984,21,0.89,22,1.041,24,1.09,25,1.129,26,0.058,27,1.041,28,1.207,30,0.708,31,0.384,32,0.024,33,0.024,34,1.686,35,0.539,36,1.412,37,1.412,38,0.967,39,0.461,40,1.749,41,1.221,42,0.984,43,1.389,44,1.598,45,1.605,46,0.984,47,1.749,48,1.137,49,1.137,50,0.718,51,0.718,52,0.402,53,0.718,54,0.718,55,1.395,56,2.104,57,1.058,58,1.137,59,0.539,60,1.749,61,0.718,62,0.622,63,0.718,64,0.718,65,0.718,66,0.984,67,0.718,68,0.718,69,0.718,70,1.137,71,0.622,72,0.98,73,0.622,74,0.718,75,0.622,76,1.207,77,0.718,78,0.718,79,1.686,80,0.539,81,0.539,82,0.622,83,1.783,84,1.814,85,1.001,86,1.204,87,1.513,88,1.311,89,0.622,90,0.622,91,0.984,92,0.539,93,0.984,94,1.395,95,2.471,96,1.137,97,0.718,98,2.131,99,0.718,100,0.718,101,0.466,102,0.622,103,0.718,104,1.749,105,1.137,106,1.137,107,1.967,108,1.605,109,1.221,110,1.749,111,0.622,112,0.853,113,1.221,114,1.137,115,1.137,116,1.137,117,1.137,118,0.718,119,0.718,120,0.718,121,0.718,122,0.718,123,0.718,124,0.718,125,0.718,126,0.718,127,0.718,128,0.622,129,1.137,130,0.718,131,0.718,132,0.718,133,0.718,134,0.718,135,0.718,136,0.718,137,1.221,138,0.853,139,0.984,140,1.389,141,0.984,142,0.984,143,0.984,144,0.984,145,0.853,146,0.984,147,0.984,148,0.622,149,0.622,150,0.539,151,0.984,152,0.539,153,0.622,154,0.466,155,0.738,156,0.718,157,0.572,158,0.402,159,0.539,160,1.389,161,0.622,162,0.622,163,1.844,164,1.058,165,0.718,166,1.605,167,0.622,168,0.718,169,0.539,170,1.041,171,0.738,172,0.984,173,0.636,174,0.738,175,0.984,176,1.058,177,0.718,178,0.718,179,1.204,180,1.389,181,0.622,182,0.622,183,0.622,184,0.718,185,0.984,186,0.984,187,0.539,188,0.622,189,0.622,190,0.718,191,0.718,192,0.718,193,0.984,194,0.622,195,1.61,196,1.435,197,1.311,198,0.984,199,0.622,200,0.718,201,0.718,202,0.718,203,0.718,204,1.221,205,0.622,206,0.718,207,0.718,208,0.622,209,0.622,210,0.718,211,0.718,212,0.622,213,0.718,214,0.718,215,1.658,216,0.466,217,0.718,218,0.622,219,1.749,220,2.273,221,1.221,222,1.61,223,1.204,224,1.749,225,1.749,226,0.539,227,0.984,228,0.718,229,0.718,230,1.61,231,1.412,232,1.56,233,0.718,234,0.718,235,0.622,236,1.63,237,0.718,238,0.718,239,0.718,240,0.718,241,2.174,242,2.174,243,1.137,244,0.622,245,1.137,246,0.718,247,0.718,248,0.622,249,0.984,250,1.137,251,0.718,252,0.622,253,0.718,254,0.718,255,0.984,256,0.718,257,0.718,258,0.718,259,0.718,260,0.718,261,1.395,262,1.137,263,0.718,264,0.718,265,1.137,266,1.412,267,2.322,268,0.718,269,1.412,270,1.137,271,0.718,272,1.221,273,0.718,274,1.389,275,0.718,276,0.718,277,0.718,278,0.718,279,0.718,280,0.718,281,1.221,282,0.622,283,0.984,284,1.949,285,1.137,286,0.984,287,1.137,288,0.718,289,1.605,290,0.718,291,0.718,292,0.718,293,0.718,294,0.984,295,0.718,296,0.718,297,0.718,298,0.718,299,0.718,300,0.718,301,1.412,302,1.949,303,1.137,304,0.718,305,1.749,306,1.137,307,0.718,308,1.137,309,0.718,310,1.749,311,1.137,312,0.718,313,1.137,314,1.137,315,0.718,316,0.718,317,0.718,318,0.718,319,0.718,320,1.412,321,1.605,322,0.718,323,0.718,324,0.718,325,0.718,326,0.718,327,0.718,328,0.718,329,0.718,330,0.718,331,0.718,332,0.718,333,0.718,334,0.718,335,0.718,336,0.622,337,1.605,338,1.605,339,1.137,340,0.718,341,1.137,342,1.137,343,1.137,344,1.749,345,1.389,346,1.605,347,1.605,348,0.718,349,2.174,350,0.718,351,0.718,352,0.718,353,0.718,354,0.718,355,1.412,356,0.718,357,1.412,358,0.718,359,0.718,360,0.718,361,0.622,362,1.137,363,1.137,364,1.412,365,0.718,366,0.718,367,0.718,368,0.718,369,0.718,370,0.718,371,0.718,372,0.718,373,0.718,374,0.718,375,0.718,376,1.137,377,0.718,378,0.718,379,0.718,380,0.622,381,0.718,382,0.718,383,0.718,384,0.718,385,0.718,386,0.718,387,0.718,388,0.622,389,0.718,390,0.539,391,0.622,392,0.718,393,0.718,394,1.311,395,0.718,396,0.718,397,0.718,398,0.718,399,0.718,400,0.622,401,0.718,402,1.311,403,0.984,404,0.718,405,0.718,406,1.605,407,1.605,408,1.605,409,1.605,410,0.622,411,0.718,412,0.718,413,1.412,414,1.412,415,0.984,416,0.718,417,1.412,418,1.412,419,1.412,420,1.949,421,1.949,422,1.221,423,1.221,424,0.718,425,0.622,426,0.622,427,1.412,428,0.718,429,1.412,430,1.412,431,0.622,432,0.718,433,0.718,434,0.718,435,1.412,436,1.412,437,1.412,438,0.718,439,0.984,440,0.984,441,0.718,445,2.329,446,1.471,447,1.552,448,1.471,449,1.471,450,1.471,451,1.471,452,1.471]],["title/directives/ResizableDirective.html",[39,0.533,158,0.736]],["body/directives/ResizableDirective.html",[0,0.123,1,1.105,2,0.323,3,0.273,4,0.228,7,0.675,9,0.867,10,0.696,11,0.937,12,0.228,14,0.812,16,1.006,17,0.91,18,0.687,19,0.937,20,0.937,21,0.91,22,1.006,24,1.063,25,1.133,26,0.058,27,1.006,28,1.454,30,0.881,31,0.366,32,0.023,33,0.023,34,1.645,35,0.506,36,1.355,37,1.355,38,0.946,39,0.549,40,1.341,41,1.172,42,1.172,43,1.566,44,1.632,45,1.902,46,1.172,47,1.341,48,1.355,49,1.082,50,0.675,51,0.675,52,0.378,53,0.675,54,0.675,55,1.357,56,2.002,57,1.016,58,1.082,59,0.506,60,1.696,61,0.675,62,0.584,63,0.675,64,0.675,65,0.675,66,0.937,67,0.675,68,0.675,69,0.675,70,1.082,71,0.584,72,0.993,73,0.584,74,0.675,75,0.584,76,1.323,77,0.675,78,0.675,79,1.645,80,0.506,81,0.506,82,0.584,83,1.763,84,1.797,85,1.027,86,1.162,87,1.468,88,1.426,89,0.584,90,0.584,91,0.937,92,0.506,93,1.172,94,1.482,95,2.451,96,1.082,97,0.675,98,2.113,99,0.675,100,0.675,101,1.323,102,0.584,103,0.675,104,1.696,105,1.082,106,1.082,107,1.939,108,1.55,109,1.172,110,1.696,111,0.584,112,1.162,113,1.468,114,1.082,115,1.082,116,1.082,117,1.082,118,0.675,119,0.675,120,0.675,121,0.675,122,0.675,123,0.675,124,0.675,125,0.675,126,0.675,127,0.675,128,0.584,129,1.082,130,0.675,131,0.675,132,0.675,133,0.675,134,0.675,135,0.675,136,0.675,137,1.172,138,1.016,139,0.937,140,1.341,141,0.937,142,0.937,143,0.937,144,0.937,145,1.016,146,1.172,147,1.172,148,0.937,149,0.937,150,0.812,151,0.937,152,0.812,153,0.937,154,0.702,155,0.879,156,0.675,157,0.438,158,0.605,159,0.812,160,1.71,161,0.937,162,0.937,163,1.913,164,1.357,165,1.082,166,1.976,167,0.937,168,1.355,169,0.812,170,1.282,171,1.412,172,0.937,173,0.605,174,0.702,175,0.937,176,1.162,177,0.675,178,0.675,179,1.357,180,1.645,181,0.937,182,0.937,183,0.937,184,1.082,185,1.468,186,1.468,187,1.016,188,0.937,189,0.937,190,1.082,191,1.082,192,1.082,193,1.341,194,1.172,195,1.883,196,1.454,197,1.387,198,1.172,199,0.937,200,1.082,201,0.675,202,0.675,203,1.355,204,1.566,205,0.937,206,1.082,207,1.355,208,0.937,209,0.937,210,1.082,211,1.082,212,1.172,213,1.082,214,1.082,215,1.632,216,0.702,217,1.082,218,0.937,219,1.71,220,1.976,221,1.172,222,1.566,223,1.162,224,1.71,225,1.566,226,0.506,227,0.584,228,0.675,229,0.675,230,1.341,231,1.355,232,1.272,233,0.675,234,0.675,235,0.584,236,1.602,237,0.675,238,0.675,239,0.675,240,0.675,241,2.137,242,2.137,243,1.082,244,0.584,245,1.082,246,0.675,247,0.675,248,0.584,249,0.937,250,1.082,251,0.675,252,0.584,253,0.675,254,0.675,255,0.937,256,0.675,257,0.675,258,0.675,259,0.675,260,0.675,261,1.357,262,1.082,263,0.675,264,0.675,265,1.082,266,1.355,267,2.292,268,0.675,269,1.355,270,1.082,271,0.675,272,1.172,273,0.675,274,1.341,275,0.675,276,0.675,277,0.675,278,0.675,279,0.675,280,0.675,281,1.172,282,0.584,283,0.937,284,1.902,285,1.082,286,0.937,287,1.082,288,0.675,289,1.55,290,0.675,291,0.675,292,0.675,293,0.675,294,0.937,295,0.675,296,0.675,297,0.675,298,0.675,299,0.675,300,0.675,301,1.355,302,1.902,303,1.082,304,0.675,305,1.696,306,1.082,307,0.675,308,1.082,309,0.675,310,1.696,311,1.082,312,0.675,313,1.082,314,1.082,315,0.675,316,0.675,317,0.675,318,0.675,319,0.675,320,1.355,321,1.55,322,0.675,323,0.675,324,0.675,325,0.675,326,0.675,327,0.675,328,0.675,329,0.675,330,0.675,331,0.675,332,0.675,333,0.675,334,0.675,335,0.675,336,0.584,337,1.55,338,1.55,339,1.082,340,0.675,341,1.082,342,1.082,343,1.082,344,1.696,345,1.341,346,1.55,347,1.55,348,0.675,349,2.137,350,0.675,351,0.675,352,0.675,353,0.675,354,0.675,355,1.355,356,0.675,357,1.355,358,0.675,359,0.675,360,0.675,361,0.584,362,1.082,363,1.082,364,1.355,365,0.675,366,0.675,367,0.675,368,0.675,369,0.675,370,0.675,371,0.675,372,0.675,373,0.675,374,0.675,375,0.675,376,1.082,377,0.675,378,0.675,379,0.675,380,0.584,381,0.675,382,0.675,383,0.675,384,0.675,385,0.675,386,0.675,387,0.675,388,0.584,389,0.675,390,0.506,391,0.584,392,0.675,393,0.675,394,1.282,395,0.675,396,0.675,397,0.675,398,0.675,399,0.675,400,0.584,401,0.675,402,1.016,403,0.937,404,0.675,405,0.675,406,0.675,407,0.675,408,0.675,409,1.082,410,0.584,411,0.675,412,0.675,413,0.675,414,1.355,415,0.584,416,0.675,417,1.355,418,1.355,419,1.355,420,1.902,421,1.902,422,1.172,423,1.172,424,0.675,425,0.584,426,0.584,427,1.355,428,0.675,429,1.355,430,1.355,431,0.584,432,0.675,433,0.675,434,0.675,435,1.355,436,1.355,437,1.355,438,0.675,439,0.937,440,0.937,441,0.675,453,1.105,454,1.383,455,1.383,456,1.383,457,1.383,458,1.383,459,1.383,460,1.383,461,1.383,462,1.383,463,1.383,464,1.383,465,1.383]],["title/modules/ResizableModule.html",[466,1.139,467,1.317]],["body/modules/ResizableModule.html",[2,0.956,3,0.81,4,0.675,10,0.551,26,0.057,31,0.821,32,0.05,33,0.05,38,1.164,52,1.118,157,0.81,158,1.421,466,1.73,467,2.307,468,4.095,469,3.775,470,2.954,471,3.775,472,3.271,473,4.095]],["title/interfaces/ResizeCursors.html",[0,0.15,197,0.854]],["body/interfaces/ResizeCursors.html",[0,0.162,1,1.134,2,0.348,3,0.294,4,0.245,9,0.903,10,0.671,11,0.866,12,0.245,13,0.745,14,0.773,16,1.048,17,0.894,18,0.654,19,0.993,20,0.993,21,0.894,22,1.048,24,1.332,25,1.132,26,0.058,27,1.048,28,0.471,30,0.757,31,0.388,32,0.025,33,0.025,34,1.694,35,0.545,36,1.422,37,1.422,38,0.971,39,0.465,40,1.398,41,1.23,42,0.993,43,1.398,44,1.603,45,1.615,46,0.993,47,1.398,48,1.148,49,1.148,50,0.727,51,0.727,52,0.406,53,0.727,54,0.727,55,1.402,56,2.031,57,1.066,58,1.148,59,0.545,60,1.759,61,0.727,62,0.629,63,0.727,64,0.727,65,0.727,66,0.993,67,0.727,68,0.727,69,0.727,70,1.148,71,0.629,72,0.982,73,0.629,74,0.727,75,0.629,76,1.213,77,0.727,78,0.727,79,1.694,80,0.545,81,0.545,82,0.629,83,1.786,84,1.818,85,1.002,86,1.211,87,1.522,88,1.319,89,0.629,90,0.629,91,0.993,92,0.545,93,0.993,94,1.402,95,2.475,96,1.148,97,0.727,98,2.126,99,0.727,100,0.727,101,0.471,102,0.629,103,0.727,104,1.759,105,1.148,106,1.148,107,1.972,108,1.615,109,1.23,110,1.759,111,0.629,112,0.86,113,1.23,114,1.148,115,1.148,116,1.148,117,1.148,118,0.727,119,0.727,120,0.727,121,0.727,122,0.727,123,0.727,124,0.727,125,0.727,126,0.727,127,0.727,128,0.629,129,1.148,130,0.727,131,0.727,132,0.727,133,0.727,134,0.727,135,0.727,136,0.727,137,1.23,138,0.86,139,0.993,140,1.398,141,0.993,142,0.993,143,0.993,144,0.993,145,0.86,146,0.993,147,0.993,148,0.629,149,0.629,150,0.545,151,0.993,152,0.545,153,0.629,154,0.471,155,0.745,156,0.727,157,0.465,158,0.406,159,0.545,160,1.398,161,0.629,162,0.629,163,1.85,164,1.066,165,0.727,166,1.615,167,0.629,168,0.727,169,0.545,170,1.048,171,0.745,172,0.993,173,0.642,174,0.745,175,0.993,176,1.066,177,0.727,178,0.727,179,1.211,180,1.398,181,0.629,182,0.629,183,0.629,184,0.727,185,0.993,186,0.993,187,0.545,188,0.629,189,0.629,190,0.727,191,0.727,192,0.727,193,0.993,194,0.629,195,1.618,196,1.439,197,1.355,198,0.993,199,0.629,200,0.727,201,0.727,202,0.727,203,0.727,204,1.23,205,0.629,206,0.727,207,0.727,208,0.629,209,0.629,210,0.727,211,0.727,212,0.629,213,0.727,214,0.727,215,1.663,216,0.471,217,0.727,218,0.629,219,1.756,220,2.029,221,1.23,222,1.618,223,1.211,224,1.756,225,1.618,226,0.545,227,0.629,228,0.727,229,0.727,230,1.398,231,1.422,232,1.319,233,0.727,234,0.727,235,0.629,236,1.636,237,0.727,238,0.727,239,0.727,240,0.727,241,2.181,242,2.181,243,1.148,244,0.629,245,1.148,246,0.727,247,0.727,248,0.629,249,0.993,250,1.148,251,0.727,252,0.629,253,0.727,254,0.727,255,0.993,256,0.727,257,0.727,258,0.727,259,0.727,260,0.727,261,1.402,262,1.148,263,0.727,264,0.727,265,1.148,266,1.422,267,2.327,268,0.727,269,1.422,270,1.148,271,0.727,272,1.23,273,0.727,274,1.398,275,0.727,276,0.727,277,0.727,278,0.727,279,0.727,280,0.727,281,1.23,282,0.629,283,0.993,284,1.957,285,1.148,286,0.993,287,1.148,288,0.727,289,1.615,290,0.727,291,0.727,292,0.727,293,0.727,294,0.993,295,0.727,296,0.727,297,0.727,298,0.727,299,0.727,300,0.727,301,1.422,302,1.957,303,1.148,304,0.727,305,1.759,306,1.148,307,0.727,308,1.148,309,0.727,310,1.759,311,1.148,312,0.727,313,1.148,314,1.148,315,0.727,316,0.727,317,0.727,318,0.727,319,0.727,320,1.422,321,1.615,322,0.727,323,0.727,324,0.727,325,0.727,326,0.727,327,0.727,328,0.727,329,0.727,330,0.727,331,0.727,332,0.727,333,0.727,334,0.727,335,0.727,336,0.629,337,1.615,338,1.615,339,1.148,340,0.727,341,1.148,342,1.148,343,1.148,344,1.759,345,1.398,346,1.615,347,1.615,348,0.727,349,2.181,350,0.727,351,0.727,352,0.727,353,0.727,354,0.727,355,1.422,356,0.727,357,1.422,358,0.727,359,0.727,360,0.727,361,0.629,362,1.148,363,1.148,364,1.422,365,0.727,366,0.727,367,0.727,368,0.727,369,0.727,370,0.727,371,0.727,372,0.727,373,0.727,374,0.727,375,0.727,376,1.148,377,0.727,378,0.727,379,0.727,380,0.629,381,0.727,382,0.727,383,0.727,384,0.727,385,0.727,386,0.727,387,0.727,388,0.629,389,0.727,390,0.545,391,0.629,392,0.727,393,0.727,394,1.317,395,0.727,396,0.727,397,0.727,398,0.727,399,0.727,400,0.629,401,0.727,402,1.066,403,0.993,404,0.727,405,0.727,406,0.727,407,0.727,408,0.727,409,1.148,410,0.629,411,0.727,412,0.727,413,0.727,414,1.422,415,0.629,416,0.727,417,1.422,418,1.422,419,1.422,420,1.957,421,1.957,422,1.23,423,1.23,424,0.727,425,0.629,426,0.629,427,1.422,428,0.727,429,1.422,430,1.422,431,0.629,432,0.727,433,0.727,434,0.727,435,1.422,436,1.422,437,1.422,438,0.727,439,0.993,440,0.993,441,0.727,474,2.327,475,2.327,476,2.327,477,2.327,478,2.327,479,2.327]],["title/interfaces/ResizeEvent.html",[0,0.15,76,0.854]],["body/interfaces/ResizeEvent.html",[0,0.26,1,1.39,2,0.939,3,0.795,4,0.663,7,1.963,8,2.679,9,1.39,10,0.629,12,0.663,13,1.481,26,0.057,30,0.925,31,0.663,32,0.049,33,0.049,38,1.092,72,1.053,75,1.699,76,1.481,85,1.007,169,1.712,170,1.481,480,4.021,481,4.021,482,4.021]],["title/directives/ResizeHandleDirective.html",[39,0.533,470,1.53]],["body/directives/ResizeHandleDirective.html",[2,0.677,3,0.573,4,0.478,7,1.414,10,0.634,11,1.019,12,0.478,15,1.562,23,1.93,24,1.041,25,1.13,26,0.058,27,0.918,28,1.351,30,0.844,31,0.478,32,0.04,33,0.04,38,1.13,39,0.957,40,1.915,41,1.915,42,1.802,44,1.771,46,1.802,47,1.915,52,0.791,55,1.397,57,1.397,59,1.06,62,1.224,71,1.224,72,1.011,73,1.224,79,1.612,80,1.06,81,1.06,83,1.725,84,1.771,85,0.897,86,1.562,87,1.802,98,1.612,101,0.918,148,1.612,150,1.397,151,1.612,152,1.66,153,1.612,154,1.209,155,1.209,157,0.573,158,1.43,159,1.397,169,1.06,170,1.209,171,0.918,173,1.041,174,1.533,179,1.562,215,1.06,216,1.436,219,1.612,223,1.397,224,2.159,226,1.06,227,1.612,230,1.612,232,1.562,235,1.224,236,1.854,244,1.224,274,1.802,281,1.224,388,1.224,400,1.224,402,1.06,415,1.224,422,1.224,423,1.612,425,1.224,426,1.224,431,1.612,439,1.224,440,1.224,443,2.542,447,1.93,453,2.314,470,2.164,472,2.314,483,4.534,484,2.897,485,3.621,486,3.047,487,3.408,488,2.897,489,3.047,490,3.815,491,2.897,492,3.047,493,3.815,494,2.897,495,2.897,496,2.897,497,2.897,498,2.897,499,2.897,500,2.897,501,2.897,502,2.897,503,2.897,504,2.897,505,2.897,506,2.897,507,2.897,508,3.815,509,2.897,510,3.815,511,3.815,512,3.815,513,3.815,514,3.815,515,2.897,516,2.897,517,3.815,518,3.815,519,2.897,520,2.897,521,2.897,522,2.897,523,2.897,524,2.897,525,2.897,526,2.897,527,2.897,528,2.897,529,2.897,530,2.897,531,2.897,532,2.897,533,2.897,534,2.897,535,2.897,536,2.897]],["title/changelog.html",[537,1.515,538,1.11,539,2.273]],["body/changelog.html",[0,0.104,1,0.766,4,0.463,8,1.869,9,0.918,10,0.727,11,1.02,13,0.594,14,0.438,15,0.686,16,0.889,17,0.438,18,0.37,21,0.438,22,0.889,25,0.438,26,0.029,30,0.739,31,0.616,32,0.029,33,0.029,38,0.873,39,0.861,43,1.891,44,0.686,56,1.421,59,1.639,66,0.791,72,0.791,80,1.368,81,0.686,85,0.995,86,0.686,92,0.686,93,0.791,94,0.686,101,0.889,102,1.578,112,0.686,138,0.686,145,1.368,149,1.185,150,0.686,152,1.027,154,0.889,155,0.594,157,0.555,158,0.511,159,0.686,160,0.791,161,0.791,162,0.791,163,1.578,164,1.806,167,1.185,170,0.594,171,1.267,172,0.791,173,1.309,174,1.45,175,1.69,176,1.027,179,1.232,180,1.421,181,0.791,182,0.791,183,0.791,185,0.791,186,0.791,187,0.686,188,0.791,189,0.791,193,1.839,194,0.791,195,1.839,196,1.519,197,0.594,199,0.791,204,2.24,205,1.185,208,1.421,209,0.791,212,0.791,215,0.686,216,1.379,221,0.791,222,1.185,223,1.027,226,1.027,232,1.027,248,1.185,249,0.791,252,1.774,255,0.791,261,0.686,282,0.791,286,0.791,294,1.421,390,1.869,391,1.185,394,0.594,403,1.839,410,0.791,443,1.869,467,0.915,470,1.063,485,1.496,486,2.241,487,1.496,489,2.241,492,1.496,538,1.642,540,5.058,541,1.873,542,1.873,543,1.873,544,1.873,545,3.364,546,1.873,547,1.873,548,1.873,549,2.806,550,4.578,551,4.477,552,5.032,553,1.873,554,1.873,555,4.199,556,4.477,557,1.873,558,1.873,559,1.873,560,4,561,4.578,562,3.735,563,1.873,564,1.873,565,1.873,566,4,567,3.364,568,5.278,569,1.873,570,2.806,571,1.873,572,1.873,573,4.353,574,3.364,575,1.496,576,2.984,577,1.873,578,1.873,579,1.873,580,1.873,581,5.26,582,1.496,583,1.873,584,3.735,585,1.873,586,1.873,587,1.873,588,1.873,589,3.735,590,2.806,591,2.984,592,2.269,593,1.873,594,1.873,595,1.873,596,1.873,597,1.873,598,2.806,599,1.873,600,1.873,601,4,602,1.873,603,2.806,604,1.873,605,1.873,606,1.873,607,2.806,608,1.873,609,1.873,610,1.873,611,1.873,612,2.806,613,1.873,614,1.873,615,4,616,4.199,617,1.873,618,1.873,619,1.873,620,2.806,621,2.241,622,1.873,623,1.873,624,4.353,625,3.364,626,1.873,627,1.873,628,1.873,629,1.873,630,2.806,631,1.873,632,1.873,633,2.806,634,1.873,635,1.873,636,4.199,637,4,638,1.873,639,4.477,640,3.735,641,3.909,642,3.195,643,2.984,644,1.873,645,5.082,646,4.353,647,3.364,648,1.873,649,1.873,650,3.735,651,1.873,652,1.873,653,3.735,654,1.873,655,1.873,656,1.873,657,2.806,658,1.873,659,1.873,660,1.873,661,2.806,662,1.873,663,3.735,664,1.496,665,1.873,666,1.873,667,4,668,3.364,669,2.806,670,2.806,671,2.806,672,2.806,673,1.873,674,1.873,675,2.806,676,4,677,1.873,678,1.873,679,4.199,680,1.873,681,2.806,682,1.873,683,1.873,684,1.873,685,1.873,686,1.873,687,1.873,688,1.873,689,1.873,690,1.873,691,1.873,692,1.873,693,3.364,694,2.806,695,1.873,696,1.873,697,1.873,698,1.873,699,2.806,700,1.873,701,1.873,702,1.873,703,2.806,704,1.873,705,1.873,706,1.873,707,1.873,708,2.241,709,1.873,710,1.873,711,1.873,712,1.873,713,1.873,714,1.873,715,1.873,716,1.873,717,1.873,718,1.873,719,1.873,720,1.873,721,1.873,722,2.806,723,3.364,724,1.873,725,1.873,726,1.873,727,1.873,728,1.873,729,1.873,730,1.873,731,2.806,732,1.873,733,1.873,734,2.806,735,1.873,736,1.873,737,2.806,738,1.873,739,1.873,740,1.873,741,1.496,742,2.806,743,1.873,744,2.806,745,1.873,746,1.873,747,1.873,748,1.873,749,1.873,750,1.873,751,1.873,752,1.873,753,1.873,754,1.873,755,1.873,756,1.873,757,1.873,758,1.873,759,2.806,760,1.873,761,1.873,762,1.873,763,1.873,764,2.806,765,1.873,766,1.873,767,1.873,768,3.364,769,1.873,770,1.873,771,1.873,772,1.873,773,1.873,774,1.873,775,1.873,776,1.873,777,1.873,778,3.996,779,2.806,780,1.496,781,1.873,782,1.873,783,1.873,784,1.873,785,1.873,786,1.873,787,2.806,788,1.873,789,1.873,790,3.364,791,1.873,792,1.873,793,1.873,794,1.873,795,1.873,796,2.806,797,1.873,798,1.873,799,1.873,800,1.873,801,4.662,802,1.873,803,1.873,804,1.873,805,1.873,806,1.873,807,1.873,808,1.873,809,1.873,810,1.496,811,1.873,812,1.873,813,1.873,814,1.873,815,2.806,816,4,817,1.873,818,1.496,819,1.873,820,1.873,821,1.873,822,2.806,823,1.873,824,1.873,825,1.873,826,1.873,827,1.873,828,4,829,1.873,830,1.873,831,3.364,832,1.873,833,1.873,834,1.873,835,1.873,836,1.873,837,1.873,838,1.873,839,1.873,840,1.873,841,1.873,842,1.873,843,1.873,844,1.873,845,1.873,846,1.873,847,4.199,848,1.873,849,2.687,850,1.496,851,2.806,852,1.873,853,2.806,854,1.873,855,3.364,856,1.873,857,1.873,858,1.873,859,1.873,860,1.873,861,2.687,862,1.873,863,1.873,864,3.364,865,1.873,866,2.806,867,1.873,868,1.873,869,1.873,870,1.873,871,3.364,872,1.873,873,1.873,874,1.873,875,1.873,876,1.873,877,1.873,878,1.873,879,3.364,880,1.873,881,1.873,882,1.873,883,1.873,884,1.873,885,1.873,886,1.873,887,1.873,888,1.873,889,1.873,890,1.873,891,1.873,892,1.873,893,1.873,894,1.496,895,1.873,896,1.496,897,1.873,898,1.873,899,1.873,900,1.873,901,1.873,902,1.873,903,1.873,904,1.873,905,1.873,906,1.873,907,2.806,908,1.873,909,1.873,910,1.873,911,1.873,912,1.873,913,1.873,914,1.873,915,1.873,916,1.873,917,1.873,918,1.873,919,1.873,920,1.873,921,1.873,922,1.873,923,1.873,924,1.873,925,1.873,926,1.873,927,1.873,928,1.873,929,1.873,930,1.873,931,1.873,932,1.873]],["title/dependencies.html",[592,1.833,643,1.816]],["body/dependencies.html",[26,0.053,32,0.051,33,0.051,52,1.159,591,3.392,592,2.409,933,4.247]],["title/miscellaneous/functions.html",[88,1.183,934,1.29]],["body/miscellaneous/functions.html",[11,0.773,12,0.645,15,1.941,26,0.056,32,0.048,33,0.048,35,1.432,72,0.967,83,1.684,84,1.684,88,1.432,89,1.944,90,1.652,91,1.944,92,1.684,112,1.684,128,1.944,196,1.458,261,1.432,272,1.944,283,1.944,336,1.944,345,1.944,361,1.944,380,1.652,402,1.941,447,3.533,934,2.219,935,4.235,936,4.601,937,3.911,938,3.911,939,3.911,940,3.911,941,3.911,942,3.911,943,3.911]],["title/index.html",[12,0.375,537,1.515,538,1.11]],["body/index.html",[3,0.825,9,0.909,10,0.725,11,0.945,14,1.064,15,1.219,16,1.444,17,1.064,18,0.901,21,1.116,22,1.444,26,0.058,31,0.549,32,0.044,33,0.044,38,1.149,39,0.658,52,1.139,76,1.322,85,0.658,107,2.018,113,1.763,154,1.055,155,1.055,157,0.825,164,1.219,173,1.244,174,1.631,176,1.668,187,1.219,196,1.322,216,1.055,218,1.407,236,1.219,390,1.801,394,1.444,466,1.407,467,2.037,469,2.66,471,3.333,538,2.037,582,3.333,592,1.889,621,3.333,641,2.66,642,2.66,708,2.66,741,4.009,780,3.64,818,2.66,849,3.64,850,3.64,861,2.66,944,4.172,945,3.33,946,3.33,947,4.172,948,5.093,949,4.777,950,2.219,951,3.33,952,3.33,953,5.15,954,3.33,955,3.33,956,3.33,957,3.33,958,3.33,959,3.33,960,3.33,961,3.33,962,4.172,963,3.33,964,3.33,965,3.33,966,3.33,967,4.172,968,3.33,969,4.172,970,3.33,971,3.33,972,4.172,973,3.33,974,4.172,975,3.33,976,3.33,977,4.172,978,2.66,979,2.66,980,4.557,981,3.33,982,3.33,983,3.33,984,3.33,985,3.33,986,4.172,987,3.33,988,3.33,989,3.33,990,3.33,991,3.33,992,3.33,993,3.33,994,3.33,995,3.33,996,3.33,997,3.33,998,3.33,999,4.172,1000,3.33,1001,3.33,1002,3.33,1003,4.919,1004,3.33,1005,3.33,1006,3.33,1007,3.33,1008,2.66]],["title/license.html",[537,1.515,538,1.11,950,1.515]],["body/license.html",[4,0.64,18,0.767,26,0.048,32,0.048,33,0.048,55,1.421,57,1.421,85,0.767,173,1.25,394,1.229,575,3.1,664,3.1,778,3.1,810,3.892,894,3.1,896,3.1,950,2.586,1008,3.658,1009,4.872,1010,3.881,1011,3.881,1012,3.881,1013,4.58,1014,3.881,1015,3.881,1016,3.881,1017,3.881,1018,4.58,1019,3.881,1020,5.033,1021,5.326,1022,3.881,1023,4.58,1024,4.872,1025,3.881,1026,4.58,1027,3.881,1028,3.881,1029,3.881,1030,3.881,1031,3.881,1032,3.881,1033,3.881,1034,3.881,1035,3.881,1036,4.58,1037,4.58,1038,3.881,1039,3.881,1040,4.58,1041,3.881,1042,3.881,1043,3.881,1044,3.881,1045,3.881,1046,3.881,1047,3.881,1048,3.881,1049,3.881,1050,3.881,1051,3.881,1052,3.881,1053,3.881,1054,3.881,1055,3.881,1056,3.881,1057,3.881,1058,3.881,1059,3.881,1060,3.881,1061,3.881]],["title/modules.html",[466,1.537]],["body/modules.html",[26,0.051,32,0.051,33,0.051,466,1.798,467,2.078,1062,4.256]],["title/overview.html",[1063,2.905]],["body/overview.html",[0,0.235,26,0.051,32,0.051,33,0.051,39,0.836,109,2.034,111,1.787,157,0.836,466,1.787,576,3.378,1063,3.378]],["title/miscellaneous/variables.html",[934,1.29,1064,2.581]],["body/miscellaneous/variables.html",[10,0.722,11,0.742,12,0.618,14,0.876,17,0.876,18,0.742,21,0.876,24,1.465,25,1.048,26,0.057,30,1.041,32,0.047,33,0.047,35,1.373,101,1.668,137,2.029,138,1.373,139,2.029,140,2.103,141,2.029,142,2.029,143,2.029,144,2.029,145,1.373,146,2.029,147,1.584,171,1.668,197,1.422,198,2.029,474,2.996,475,2.996,476,2.996,477,2.996,478,2.996,479,2.996,934,2.127,935,4.205,978,2.996,979,2.996,1064,2.996,1065,3.75,1066,3.75,1067,3.75,1068,3.75,1069,3.75]]],"invertedIndex":[["",{"_index":26,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":107,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"index.html":{}}}],["0.0.1",{"_index":912,"title":{},"body":{"changelog.html":{}}}],["0.0.2",{"_index":909,"title":{},"body":{"changelog.html":{}}}],["0.0.3",{"_index":906,"title":{},"body":{"changelog.html":{}}}],["0.1.0",{"_index":865,"title":{},"body":{"changelog.html":{}}}],["0.2.0",{"_index":858,"title":{},"body":{"changelog.html":{}}}],["0.2.1",{"_index":854,"title":{},"body":{"changelog.html":{}}}],["0.3.0",{"_index":839,"title":{},"body":{"changelog.html":{}}}],["0.3.1",{"_index":836,"title":{},"body":{"changelog.html":{}}}],["0.3.2",{"_index":833,"title":{},"body":{"changelog.html":{}}}],["0.3.3",{"_index":827,"title":{},"body":{"changelog.html":{}}}],["0.4.0",{"_index":814,"title":{},"body":{"changelog.html":{}}}],["0.4.1",{"_index":809,"title":{},"body":{"changelog.html":{}}}],["0.5.0",{"_index":792,"title":{},"body":{"changelog.html":{}}}],["0.5.1",{"_index":789,"title":{},"body":{"changelog.html":{}}}],["0.5.2",{"_index":786,"title":{},"body":{"changelog.html":{}}}],["0.5.3",{"_index":782,"title":{},"body":{"changelog.html":{}}}],["0.5.4",{"_index":777,"title":{},"body":{"changelog.html":{}}}],["0.5.5",{"_index":771,"title":{},"body":{"changelog.html":{}}}],["0.5.6",{"_index":767,"title":{},"body":{"changelog.html":{}}}],["0.5.7",{"_index":762,"title":{},"body":{"changelog.html":{}}}],["0.6.0",{"_index":758,"title":{},"body":{"changelog.html":{}}}],["0.6.1",{"_index":755,"title":{},"body":{"changelog.html":{}}}],["0.7.0",{"_index":747,"title":{},"body":{"changelog.html":{}}}],["0.7.2",{"_index":736,"title":{},"body":{"changelog.html":{}}}],["0.8.0",{"_index":730,"title":{},"body":{"changelog.html":{}}}],["0.8.1",{"_index":727,"title":{},"body":{"changelog.html":{}}}],["01",{"_index":584,"title":{},"body":{"changelog.html":{}}}],["02",{"_index":551,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":624,"title":{},"body":{"changelog.html":{}}}],["032ea5a",{"_index":922,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":737,"title":{},"body":{"changelog.html":{}}}],["0440bbd",{"_index":649,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":573,"title":{},"body":{"changelog.html":{}}}],["053fb0e",{"_index":916,"title":{},"body":{"changelog.html":{}}}],["05f7f7e",{"_index":728,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":550,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":566,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":616,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":636,"title":{},"body":{"changelog.html":{}}}],["0959a12",{"_index":925,"title":{},"body":{"changelog.html":{}}}],["0a5bf11",{"_index":857,"title":{},"body":{"changelog.html":{}}}],["0ab7d40",{"_index":765,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":109,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"overview.html":{}}}],["1.0.0",{"_index":721,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":719,"title":{},"body":{"changelog.html":{}}}],["1.1.1",{"_index":716,"title":{},"body":{"changelog.html":{}}}],["1.1.2",{"_index":711,"title":{},"body":{"changelog.html":{}}}],["1.2.0",{"_index":707,"title":{},"body":{"changelog.html":{}}}],["1.2.1",{"_index":702,"title":{},"body":{"changelog.html":{}}}],["1.2.2",{"_index":697,"title":{},"body":{"changelog.html":{}}}],["1.2.3",{"_index":691,"title":{},"body":{"changelog.html":{}}}],["1.2.4",{"_index":689,"title":{},"body":{"changelog.html":{}}}],["1.2.5",{"_index":680,"title":{},"body":{"changelog.html":{}}}],["10",{"_index":193,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["100",{"_index":582,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["10051cd",{"_index":710,"title":{},"body":{"changelog.html":{}}}],["106",{"_index":586,"title":{},"body":{"changelog.html":{}}}],["10px",{"_index":192,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["11",{"_index":561,"title":{},"body":{"changelog.html":{}}}],["1185f3a",{"_index":613,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":646,"title":{},"body":{"changelog.html":{}}}],["121621",{"_index":972,"title":{},"body":{"index.html":{}}}],["126",{"_index":557,"title":{},"body":{"changelog.html":{}}}],["13",{"_index":828,"title":{},"body":{"changelog.html":{}}}],["14",{"_index":585,"title":{},"body":{"changelog.html":{}}}],["149c1a4",{"_index":867,"title":{},"body":{"changelog.html":{}}}],["15",{"_index":855,"title":{},"body":{"changelog.html":{}}}],["150px",{"_index":965,"title":{},"body":{"index.html":{}}}],["16",{"_index":731,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":633,"title":{},"body":{"changelog.html":{}}}],["1af705a",{"_index":893,"title":{},"body":{"changelog.html":{}}}],["1d15bb4",{"_index":714,"title":{},"body":{"changelog.html":{}}}],["1px",{"_index":971,"title":{},"body":{"index.html":{}}}],["2",{"_index":111,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"overview.html":{}}}],["2.0.0",{"_index":644,"title":{},"body":{"changelog.html":{}}}],["20",{"_index":805,"title":{},"body":{"changelog.html":{}}}],["200px",{"_index":957,"title":{},"body":{"index.html":{}}}],["2016",{"_index":778,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2017",{"_index":645,"title":{},"body":{"changelog.html":{}}}],["2018",{"_index":615,"title":{},"body":{"changelog.html":{}}}],["2019",{"_index":589,"title":{},"body":{"changelog.html":{}}}],["2020",{"_index":560,"title":{},"body":{"changelog.html":{}}}],["2021",{"_index":549,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":562,"title":{},"body":{"changelog.html":{}}}],["210decc",{"_index":604,"title":{},"body":{"changelog.html":{}}}],["22",{"_index":574,"title":{},"body":{"changelog.html":{}}}],["22af52f",{"_index":928,"title":{},"body":{"changelog.html":{}}}],["23",{"_index":630,"title":{},"body":{"changelog.html":{}}}],["23fc6e5",{"_index":700,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":567,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":768,"title":{},"body":{"changelog.html":{}}}],["25cfe50",{"_index":690,"title":{},"body":{"changelog.html":{}}}],["25d6fa3",{"_index":628,"title":{},"body":{"changelog.html":{}}}],["26",{"_index":647,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":785,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":601,"title":{},"body":{"changelog.html":{}}}],["29",{"_index":793,"title":{},"body":{"changelog.html":{}}}],["2a4b102",{"_index":729,"title":{},"body":{"changelog.html":{}}}],["2f6ac2d",{"_index":611,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":93,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["3.0.0",{"_index":635,"title":{},"body":{"changelog.html":{}}}],["3.1.0",{"_index":632,"title":{},"body":{"changelog.html":{}}}],["3.2.0",{"_index":629,"title":{},"body":{"changelog.html":{}}}],["3.2.1",{"_index":623,"title":{},"body":{"changelog.html":{}}}],["3.2.2",{"_index":614,"title":{},"body":{"changelog.html":{}}}],["3.2.3",{"_index":606,"title":{},"body":{"changelog.html":{}}}],["3.2.4",{"_index":600,"title":{},"body":{"changelog.html":{}}}],["3.2.5",{"_index":594,"title":{},"body":{"changelog.html":{}}}],["3.2.6",{"_index":588,"title":{},"body":{"changelog.html":{}}}],["3.3.0",{"_index":583,"title":{},"body":{"changelog.html":{}}}],["3.3.1",{"_index":578,"title":{},"body":{"changelog.html":{}}}],["3.3.2",{"_index":572,"title":{},"body":{"changelog.html":{}}}],["3.3.3",{"_index":565,"title":{},"body":{"changelog.html":{}}}],["3.3.4",{"_index":559,"title":{},"body":{"changelog.html":{}}}],["3.3.5",{"_index":554,"title":{},"body":{"changelog.html":{}}}],["3.4.0",{"_index":548,"title":{},"body":{"changelog.html":{}}}],["30",{"_index":763,"title":{},"body":{"changelog.html":{}}}],["300ac10",{"_index":908,"title":{},"body":{"changelog.html":{}}}],["300px",{"_index":964,"title":{},"body":{"index.html":{}}}],["31",{"_index":773,"title":{},"body":{"changelog.html":{}}}],["33",{"_index":776,"title":{},"body":{"changelog.html":{}}}],["34342aa",{"_index":683,"title":{},"body":{"changelog.html":{}}}],["36",{"_index":770,"title":{},"body":{"changelog.html":{}}}],["3633040",{"_index":735,"title":{},"body":{"changelog.html":{}}}],["37fc88e",{"_index":634,"title":{},"body":{"changelog.html":{}}}],["39",{"_index":766,"title":{},"body":{"changelog.html":{}}}],["3ce508d",{"_index":754,"title":{},"body":{"changelog.html":{}}}],["4",{"_index":723,"title":{},"body":{"changelog.html":{}}}],["4.0",{"_index":725,"title":{},"body":{"changelog.html":{}}}],["40",{"_index":761,"title":{},"body":{"changelog.html":{}}}],["41",{"_index":757,"title":{},"body":{"changelog.html":{}}}],["4b20cde",{"_index":746,"title":{},"body":{"changelog.html":{}}}],["4c59b05",{"_index":890,"title":{},"body":{"changelog.html":{}}}],["4c665d2",{"_index":724,"title":{},"body":{"changelog.html":{}}}],["4da938d",{"_index":898,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":650,"title":{},"body":{"changelog.html":{}}}],["5.5",{"_index":666,"title":{},"body":{"changelog.html":{}}}],["50",{"_index":147,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["514851f",{"_index":781,"title":{},"body":{"changelog.html":{}}}],["520abc",{"_index":756,"title":{},"body":{"changelog.html":{}}}],["53",{"_index":718,"title":{},"body":{"changelog.html":{}}}],["534bdf6",{"_index":580,"title":{},"body":{"changelog.html":{}}}],["54",{"_index":715,"title":{},"body":{"changelog.html":{}}}],["54be6b7",{"_index":720,"title":{},"body":{"changelog.html":{}}}],["5571069",{"_index":800,"title":{},"body":{"changelog.html":{}}}],["560bcb1",{"_index":631,"title":{},"body":{"changelog.html":{}}}],["56e463b",{"_index":622,"title":{},"body":{"changelog.html":{}}}],["59078e2",{"_index":881,"title":{},"body":{"changelog.html":{}}}],["5d6a576",{"_index":651,"title":{},"body":{"changelog.html":{}}}],["5f7f468",{"_index":795,"title":{},"body":{"changelog.html":{}}}],["5px",{"_index":977,"title":{},"body":{"index.html":{}}}],["6",{"_index":576,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["6.0",{"_index":951,"title":{},"body":{"index.html":{}}}],["6.0.0",{"_index":933,"title":{},"body":{"dependencies.html":{}}}],["60c2e08",{"_index":891,"title":{},"body":{"changelog.html":{}}}],["62",{"_index":706,"title":{},"body":{"changelog.html":{}}}],["65",{"_index":701,"title":{},"body":{"changelog.html":{}}}],["66",{"_index":695,"title":{},"body":{"changelog.html":{}}}],["66f2289",{"_index":577,"title":{},"body":{"changelog.html":{}}}],["68",{"_index":684,"title":{},"body":{"changelog.html":{}}}],["68dc84f",{"_index":813,"title":{},"body":{"changelog.html":{}}}],["697c52c",{"_index":791,"title":{},"body":{"changelog.html":{}}}],["70",{"_index":688,"title":{},"body":{"changelog.html":{}}}],["71d5a05",{"_index":687,"title":{},"body":{"changelog.html":{}}}],["72",{"_index":686,"title":{},"body":{"changelog.html":{}}}],["74424ba",{"_index":895,"title":{},"body":{"changelog.html":{}}}],["75ce122",{"_index":772,"title":{},"body":{"changelog.html":{}}}],["79",{"_index":659,"title":{},"body":{"changelog.html":{}}}],["7b1280e",{"_index":911,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":607,"title":{},"body":{"changelog.html":{}}}],["80",{"_index":660,"title":{},"body":{"changelog.html":{}}}],["8000",{"_index":1001,"title":{},"body":{"index.html":{}}}],["81134ee",{"_index":599,"title":{},"body":{"changelog.html":{}}}],["81fe0b4",{"_index":876,"title":{},"body":{"changelog.html":{}}}],["820612e",{"_index":743,"title":{},"body":{"changelog.html":{}}}],["8232e66",{"_index":740,"title":{},"body":{"changelog.html":{}}}],["83",{"_index":605,"title":{},"body":{"changelog.html":{}}}],["858b3f8",{"_index":838,"title":{},"body":{"changelog.html":{}}}],["862249f",{"_index":553,"title":{},"body":{"changelog.html":{}}}],["86e366c",{"_index":593,"title":{},"body":{"changelog.html":{}}}],["8e3f108",{"_index":752,"title":{},"body":{"changelog.html":{}}}],["9",{"_index":590,"title":{},"body":{"changelog.html":{}}}],["9236e02",{"_index":788,"title":{},"body":{"changelog.html":{}}}],["927235e",{"_index":803,"title":{},"body":{"changelog.html":{}}}],["930de54",{"_index":564,"title":{},"body":{"changelog.html":{}}}],["93a5c4",{"_index":775,"title":{},"body":{"changelog.html":{}}}],["94dc48d",{"_index":608,"title":{},"body":{"changelog.html":{}}}],["9557c0a",{"_index":846,"title":{},"body":{"changelog.html":{}}}],["9597986",{"_index":804,"title":{},"body":{"changelog.html":{}}}],["99d2f66",{"_index":760,"title":{},"body":{"changelog.html":{}}}],["9]*)px",{"_index":108,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["9c76aac",{"_index":842,"title":{},"body":{"changelog.html":{}}}],["9f9c54a",{"_index":885,"title":{},"body":{"changelog.html":{}}}],["a0323e9",{"_index":705,"title":{},"body":{"changelog.html":{}}}],["a056154",{"_index":696,"title":{},"body":{"changelog.html":{}}}],["a74f9e2",{"_index":745,"title":{},"body":{"changelog.html":{}}}],["a8e5cd3",{"_index":918,"title":{},"body":{"changelog.html":{}}}],["aa169c7",{"_index":769,"title":{},"body":{"changelog.html":{}}}],["abov",{"_index":575,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["absolut",{"_index":113,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"index.html":{}}}],["action",{"_index":1055,"title":{},"body":{"license.html":{}}}],["activ",{"_index":138,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["ad",{"_index":247,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["add",{"_index":403,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["af7abf7",{"_index":654,"title":{},"body":{"changelog.html":{}}}],["align",{"_index":960,"title":{},"body":{"index.html":{}}}],["allow",{"_index":164,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["allowededg",{"_index":285,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["allownegativeres",{"_index":207,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["alway",{"_index":626,"title":{},"body":{"changelog.html":{}}}],["amount",{"_index":886,"title":{},"body":{"changelog.html":{}}}],["and/or",{"_index":1030,"title":{},"body":{"license.html":{}}}],["angular",{"_index":390,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["angular/common",{"_index":54,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["angular/cor",{"_index":52,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"dependencies.html":{},"index.html":{}}}],["angular2",{"_index":802,"title":{},"body":{"changelog.html":{}}}],["any).eventlisteners[typ",{"_index":531,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["aot",{"_index":787,"title":{},"body":{"changelog.html":{}}}],["app",{"_index":850,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["appli",{"_index":860,"title":{},"body":{"changelog.html":{}}}],["applic",{"_index":709,"title":{},"body":{"changelog.html":{}}}],["aris",{"_index":1059,"title":{},"body":{"license.html":{}}}],["associ",{"_index":1022,"title":{},"body":{"license.html":{}}}],["audittim",{"_index":67,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["audittime(this.mousemovethrottlem",{"_index":280,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["author",{"_index":1048,"title":{},"body":{"license.html":{}}}],["auto",{"_index":780,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["b77c9fc",{"_index":733,"title":{},"body":{"changelog.html":{}}}],["bac87e3",{"_index":932,"title":{},"body":{"changelog.html":{}}}],["back",{"_index":703,"title":{},"body":{"changelog.html":{}}}],["background",{"_index":966,"title":{},"body":{"index.html":{}}}],["be",{"_index":798,"title":{},"body":{"changelog.html":{}}}],["be5d727",{"_index":717,"title":{},"body":{"changelog.html":{}}}],["befor",{"_index":161,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["before(resize)=\"onresize($ev",{"_index":807,"title":{},"body":{"changelog.html":{}}}],["begin",{"_index":214,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["begun",{"_index":217,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["behaviour",{"_index":905,"title":{},"body":{"changelog.html":{}}}],["between",{"_index":184,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["bf497d2",{"_index":915,"title":{},"body":{"changelog.html":{}}}],["boolean",{"_index":94,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["bootstrap",{"_index":983,"title":{},"body":{"index.html":{}}}],["border",{"_index":969,"title":{},"body":{"index.html":{}}}],["bottom",{"_index":14,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["bottomleft",{"_index":474,"title":{},"body":{"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["bottomright",{"_index":475,"title":{},"body":{"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["bound",{"_index":8,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{}}}],["boundingrect",{"_index":118,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.bottom",{"_index":123,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.height",{"_index":120,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.left",{"_index":124,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.right",{"_index":125,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.top",{"_index":122,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.width",{"_index":121,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrectangl",{"_index":1,"title":{"interfaces/BoundingRectangle.html":{}},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{}}}],["box",{"_index":974,"title":{},"body":{"index.html":{}}}],["break",{"_index":639,"title":{},"body":{"changelog.html":{}}}],["broken",{"_index":856,"title":{},"body":{"changelog.html":{}}}],["brows",{"_index":1062,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":255,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["bug",{"_index":568,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":815,"title":{},"body":{"changelog.html":{}}}],["bundl",{"_index":657,"title":{},"body":{"changelog.html":{}}}],["c",{"_index":1010,"title":{},"body":{"license.html":{}}}],["c4519a1",{"_index":658,"title":{},"body":{"changelog.html":{}}}],["c60b3f5",{"_index":882,"title":{},"body":{"changelog.html":{}}}],["c76be59",{"_index":878,"title":{},"body":{"changelog.html":{}}}],["c7e3de6",{"_index":638,"title":{},"body":{"changelog.html":{}}}],["c85a28d",{"_index":558,"title":{},"body":{"changelog.html":{}}}],["call",{"_index":160,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["camel",{"_index":843,"title":{},"body":{"changelog.html":{}}}],["cancel",{"_index":167,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["case",{"_index":152,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["catch",{"_index":245,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["cbe088f",{"_index":832,"title":{},"body":{"changelog.html":{}}}],["center",{"_index":962,"title":{},"body":{"index.html":{}}}],["chang",{"_index":540,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":539,"title":{"changelog.html":{}},"body":{}}],["changes.resizeedg",{"_index":386,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["charg",{"_index":1017,"title":{},"body":{"license.html":{}}}],["check",{"_index":389,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["claim",{"_index":1051,"title":{},"body":{"license.html":{}}}],["class",{"_index":157,"title":{"classes/PointerEventListeners.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{},"overview.html":{}}}],["clienti",{"_index":84,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{}}}],["clientrect",{"_index":130,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["clientx",{"_index":83,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{}}}],["clone",{"_index":693,"title":{},"body":{"changelog.html":{}}}],["clonednod",{"_index":263,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["close",{"_index":581,"title":{},"body":{"changelog.html":{}}}],["co",{"_index":868,"title":{},"body":{"changelog.html":{}}}],["col",{"_index":979,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["color",{"_index":967,"title":{},"body":{"index.html":{}}}],["come",{"_index":993,"title":{},"body":{"index.html":{}}}],["commit",{"_index":546,"title":{},"body":{"changelog.html":{}}}],["compat",{"_index":603,"title":{},"body":{"changelog.html":{}}}],["compil",{"_index":819,"title":{},"body":{"changelog.html":{}}}],["complet",{"_index":884,"title":{},"body":{"changelog.html":{}}}],["compon",{"_index":621,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["con",{"_index":889,"title":{},"body":{"changelog.html":{}}}],["condit",{"_index":1035,"title":{},"body":{"license.html":{}}}],["config",{"_index":678,"title":{},"body":{"changelog.html":{}}}],["configur",{"_index":732,"title":{},"body":{"changelog.html":{}}}],["connect",{"_index":1061,"title":{},"body":{"license.html":{}}}],["consol",{"_index":250,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["console.log('el",{"_index":982,"title":{},"body":{"index.html":{}}}],["const",{"_index":95,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["constructor",{"_index":227,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["constructor(render",{"_index":415,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["contain",{"_index":492,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["content",{"_index":947,"title":{},"body":{"index.html":{}}}],["continu",{"_index":1006,"title":{},"body":{"index.html":{}}}],["contract",{"_index":1056,"title":{},"body":{"license.html":{}}}],["coord",{"_index":314,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["coordin",{"_index":34,"title":{"interfaces/Coordinate.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["copi",{"_index":1020,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1009,"title":{},"body":{"license.html":{}}}],["core",{"_index":811,"title":{},"body":{"changelog.html":{}}}],["corner",{"_index":931,"title":{},"body":{"changelog.html":{}}}],["correct",{"_index":764,"title":{},"body":{"changelog.html":{}}}],["creat",{"_index":859,"title":{},"body":{"changelog.html":{}}}],["css",{"_index":570,"title":{},"body":{"changelog.html":{}}}],["cssclass",{"_index":748,"title":{},"body":{"changelog.html":{}}}],["current",{"_index":996,"title":{},"body":{"index.html":{}}}],["currentrect",{"_index":262,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentres",{"_index":242,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize!.currentrect",{"_index":357,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize!.edg",{"_index":338,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize!.startingrect",{"_index":337,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.clonednod",{"_index":267,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.clonednode!.scrollleft",{"_index":377,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.clonednode!.scrolltop",{"_index":375,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.edges.bottom",{"_index":312,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.edges.left",{"_index":304,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.edges.right",{"_index":307,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.edges.top",{"_index":309,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.startingrect",{"_index":376,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.startingrect.height}px",{"_index":372,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.startingrect.left}px",{"_index":370,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.startingrect.top}px",{"_index":371,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.startingrect.width}px",{"_index":373,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["cursor",{"_index":196,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["cursorprecis",{"_index":286,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["customis",{"_index":759,"title":{},"body":{"changelog.html":{}}}],["d5b18cc",{"_index":835,"title":{},"body":{"changelog.html":{}}}],["d5ea756",{"_index":784,"title":{},"body":{"changelog.html":{}}}],["d664038",{"_index":887,"title":{},"body":{"changelog.html":{}}}],["damag",{"_index":1052,"title":{},"body":{"license.html":{}}}],["dash",{"_index":844,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":1023,"title":{},"body":{"license.html":{}}}],["declar",{"_index":469,"title":{},"body":{"modules/ResizableModule.html":{},"index.html":{}}}],["dedc3bb",{"_index":863,"title":{},"body":{"changelog.html":{}}}],["default",{"_index":171,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["default_resize_cursor",{"_index":198,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["defin",{"_index":28,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["delet",{"_index":532,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["demo",{"_index":849,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["depend",{"_index":592,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["deprec",{"_index":172,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["descript",{"_index":7,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Edges.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{}}}],["destroy",{"_index":226,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["detect",{"_index":563,"title":{},"body":{"changelog.html":{}}}],["dev",{"_index":995,"title":{},"body":{"index.html":{}}}],["develop",{"_index":949,"title":{},"body":{"index.html":{}}}],["devic",{"_index":81,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["di",{"_index":524,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["diff",{"_index":96,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["dimens",{"_index":206,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["direct",{"_index":39,"title":{"directives/ResizableDirective.html":{},"directives/ResizeHandleDirective.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{},"overview.html":{}}}],["directori",{"_index":997,"title":{},"body":{"index.html":{}}}],["disabl",{"_index":879,"title":{},"body":{"changelog.html":{}}}],["disableres",{"_index":883,"title":{},"body":{"changelog.html":{}}}],["display",{"_index":958,"title":{},"body":{"index.html":{}}}],["dist",{"_index":837,"title":{},"body":{"changelog.html":{}}}],["distribut",{"_index":1028,"title":{},"body":{"license.html":{}}}],["document",{"_index":394,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["doesn't",{"_index":392,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["don't",{"_index":617,"title":{},"body":{"changelog.html":{}}}],["dont",{"_index":790,"title":{},"body":{"changelog.html":{}}}],["drag",{"_index":216,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["draghandl",{"_index":712,"title":{},"body":{"changelog.html":{}}}],["drop",{"_index":840,"title":{},"body":{"changelog.html":{}}}],["dynam",{"_index":681,"title":{},"body":{"changelog.html":{}}}],["e",{"_index":246,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["e.g",{"_index":191,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["e722a86",{"_index":924,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":162,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["eb314fd",{"_index":874,"title":{},"body":{"changelog.html":{}}}],["edf56db",{"_index":571,"title":{},"body":{"changelog.html":{}}}],["edg",{"_index":72,"title":{"interfaces/Edges.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["edges.interfac",{"_index":482,"title":{},"body":{"interfaces/ResizeEvent.html":{}}}],["edgesdiff",{"_index":136,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["edgesdiff[edg",{"_index":133,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["edit",{"_index":753,"title":{},"body":{"changelog.html":{}}}],["effect",{"_index":183,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["element",{"_index":11,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["element.j",{"_index":672,"title":{},"body":{"changelog.html":{}}}],["element.nativeelement.getboundingclientrect",{"_index":119,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.offsetheight",{"_index":114,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.offsetleft",{"_index":117,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.offsettop",{"_index":116,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.offsetwidth",{"_index":115,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.scrollleft",{"_index":127,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.scrolltop",{"_index":126,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.umd.j",{"_index":674,"title":{},"body":{"changelog.html":{}}}],["element/bundles/angular",{"_index":673,"title":{},"body":{"changelog.html":{}}}],["element/demo",{"_index":945,"title":{},"body":{"index.html":{}}}],["element/dist/umd/angular",{"_index":671,"title":{},"body":{"changelog.html":{}}}],["element/doc",{"_index":989,"title":{},"body":{"index.html":{}}}],["elementref",{"_index":41,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["elementthen",{"_index":955,"title":{},"body":{"index.html":{}}}],["elm",{"_index":231,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["emit",{"_index":627,"title":{},"body":{"changelog.html":{}}}],["empti",{"_index":58,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["enabl",{"_index":181,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["enableghostres",{"_index":187,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["enableresizestyl",{"_index":864,"title":{},"body":{"changelog.html":{}}}],["enableresizestyling]=\"tru",{"_index":900,"title":{},"body":{"changelog.html":{}}}],["ensur",{"_index":625,"title":{},"body":{"changelog.html":{}}}],["entri",{"_index":669,"title":{},"body":{"changelog.html":{}}}],["environ",{"_index":991,"title":{},"body":{"index.html":{}}}],["error",{"_index":249,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["event",{"_index":85,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["event.changedtouches[0].clienti",{"_index":440,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.changedtouches[0].clientx",{"_index":439,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.clienti",{"_index":423,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.clientx",{"_index":422,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.edg",{"_index":901,"title":{},"body":{"changelog.html":{}}}],["event.interfac",{"_index":78,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["event.interface.t",{"_index":481,"title":{},"body":{"interfaces/ResizeEvent.html":{}}}],["event.preventdefault",{"_index":244,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.targettouches[0].clienti",{"_index":433,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["event.targettouches[0].clientx",{"_index":432,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["event.touches[0].clienti",{"_index":426,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.touches[0].clientx",{"_index":425,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["eventemitt",{"_index":45,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["eventlisten",{"_index":496,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["eventname).pip",{"_index":536,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["exampl",{"_index":150,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["except",{"_index":257,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["exist",{"_index":569,"title":{},"body":{"changelog.html":{}}}],["export",{"_index":31,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["exporta",{"_index":156,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["expos",{"_index":734,"title":{},"body":{"changelog.html":{}}}],["express",{"_index":1042,"title":{},"body":{"license.html":{}}}],["f24a746",{"_index":685,"title":{},"body":{"changelog.html":{}}}],["f3fe12a",{"_index":820,"title":{},"body":{"changelog.html":{}}}],["f440c87",{"_index":930,"title":{},"body":{"changelog.html":{}}}],["fa73345",{"_index":862,"title":{},"body":{"changelog.html":{}}}],["fals",{"_index":166,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["favour",{"_index":610,"title":{},"body":{"changelog.html":{}}}],["fb5599b",{"_index":587,"title":{},"body":{"changelog.html":{}}}],["fd4140",{"_index":968,"title":{},"body":{"index.html":{}}}],["fe49114",{"_index":910,"title":{},"body":{"changelog.html":{}}}],["featur",{"_index":552,"title":{},"body":{"changelog.html":{}}}],["ffad2ca",{"_index":845,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":4,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"license.html":{}}}],["filter",{"_index":63,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["filter(([previouscoord",{"_index":324,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["filter((edg",{"_index":358,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["filter((newboundingrect",{"_index":339,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["find",{"_index":985,"title":{},"body":{"index.html":{}}}],["find(valu",{"_index":100,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["fire",{"_index":877,"title":{},"body":{"changelog.html":{}}}],["firefox",{"_index":713,"title":{},"body":{"changelog.html":{}}}],["fit",{"_index":894,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["fix",{"_index":204,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["flex",{"_index":959,"title":{},"body":{"index.html":{}}}],["flicker",{"_index":921,"title":{},"body":{"changelog.html":{}}}],["follow",{"_index":1034,"title":{},"body":{"license.html":{}}}],["free",{"_index":1016,"title":{},"body":{"license.html":{}}}],["fromev",{"_index":495,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["fromevent(this.element.nativeel",{"_index":535,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["function",{"_index":88,"title":{"miscellaneous/functions.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["furnish",{"_index":1033,"title":{},"body":{"license.html":{}}}],["gener",{"_index":987,"title":{},"body":{"index.html":{}}}],["get",{"_index":537,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["getdiff(movecoord",{"_index":296,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getdiff(newcoord",{"_index":323,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getdiff(previouscoord",{"_index":322,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getedgesdiff",{"_index":345,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["getedgesdiff(undefin",{"_index":937,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getelementrect",{"_index":361,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["getelementrect(el",{"_index":938,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getgrid",{"_index":313,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getgrid(newcoord",{"_index":327,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getinst",{"_index":413,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getinstance(render",{"_index":451,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["getnewboundingrectangl",{"_index":336,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["getnewboundingrectangle(startingrect",{"_index":380,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["getresizecursor",{"_index":272,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["getresizecursor(currentresize.edg",{"_index":363,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getresizecursor(edg",{"_index":939,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getresizecursor(resizeedg",{"_index":288,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getresizeedg",{"_index":283,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["getresizeedges(undefin",{"_index":940,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getsnapgrid",{"_index":301,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["ghost",{"_index":145,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["ghostelementposit",{"_index":112,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["give",{"_index":749,"title":{},"body":{"changelog.html":{}}}],["global",{"_index":661,"title":{},"body":{"changelog.html":{}}}],["grant",{"_index":1015,"title":{},"body":{"license.html":{}}}],["grid",{"_index":189,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["guidelin",{"_index":547,"title":{},"body":{"changelog.html":{}}}],["handl",{"_index":174,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["handle.direct",{"_index":473,"title":{},"body":{"modules/ResizableModule.html":{}}}],["handle.directive.t",{"_index":484,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["handle.directive.ts:40",{"_index":494,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["handle.directive.ts:44",{"_index":491,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["handle.directive.ts:52",{"_index":488,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["handler",{"_index":698,"title":{},"body":{"changelog.html":{}}}],["height",{"_index":16,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["here",{"_index":988,"title":{},"body":{"index.html":{}}}],["herebi",{"_index":1014,"title":{},"body":{"license.html":{}}}],["hidden",{"_index":219,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["higher",{"_index":640,"title":{},"body":{"changelog.html":{}}}],["holder",{"_index":1049,"title":{},"body":{"license.html":{}}}],["host",{"_index":620,"title":{},"body":{"changelog.html":{}}}],["hover",{"_index":140,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["html",{"_index":151,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["htmlelement",{"_index":264,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["https://mattlewis92.github.io/angular",{"_index":944,"title":{},"body":{"index.html":{}}}],["ie11",{"_index":704,"title":{},"body":{"changelog.html":{}}}],["immedi",{"_index":619,"title":{},"body":{"changelog.html":{}}}],["implement",{"_index":159,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["impli",{"_index":1043,"title":{},"body":{"license.html":{}}}],["import",{"_index":38,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["improv",{"_index":556,"title":{},"body":{"changelog.html":{}}}],["includ",{"_index":810,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":2,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{}}}],["inherit",{"_index":271,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["initi",{"_index":926,"title":{},"body":{"changelog.html":{}}}],["initialis",{"_index":596,"title":{},"body":{"changelog.html":{}}}],["initialrectangl",{"_index":346,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["initialrectangle[edg",{"_index":135,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["inject",{"_index":50,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["inject(platform_id",{"_index":228,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["input",{"_index":44,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["insid",{"_index":485,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["instal",{"_index":948,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":410,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["instead",{"_index":175,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["interfac",{"_index":0,"title":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{}},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{},"overview.html":{}}}],["interfaces/bound",{"_index":74,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["interfaces/edges.interfac",{"_index":73,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["interfaces/res",{"_index":77,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["invalid",{"_index":201,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["is_touch_devic",{"_index":79,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["isnumbercloseto",{"_index":89,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["isnumbercloseto(value1",{"_index":941,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isplatformbrows",{"_index":53,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["isplatformbrowser(this.platformid",{"_index":395,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["iswithinboundingi",{"_index":128,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["iswithinboundingx",{"_index":936,"title":{},"body":{"miscellaneous/functions.html":{}}}],["iswithinboundingx(undefin",{"_index":942,"title":{},"body":{"miscellaneous/functions.html":{}}}],["iswithinboundingy(undefin",{"_index":943,"title":{},"body":{"miscellaneous/functions.html":{}}}],["item",{"_index":961,"title":{},"body":{"index.html":{}}}],["itself",{"_index":177,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["js",{"_index":812,"title":{},"body":{"changelog.html":{}}}],["justifi",{"_index":963,"title":{},"body":{"index.html":{}}}],["keep",{"_index":774,"title":{},"body":{"changelog.html":{}}}],["key",{"_index":23,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Edges.html":{},"directives/ResizeHandleDirective.html":{}}}],["kind",{"_index":1041,"title":{},"body":{"license.html":{}}}],["know",{"_index":393,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["last",{"_index":870,"title":{},"body":{"changelog.html":{}}}],["lazili",{"_index":595,"title":{},"body":{"changelog.html":{}}}],["left",{"_index":17,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["leftorright",{"_index":476,"title":{},"body":{"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["legacyresizeedgesen",{"_index":279,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["lettabl",{"_index":652,"title":{},"body":{"changelog.html":{}}}],["level",{"_index":609,"title":{},"body":{"changelog.html":{}}}],["lewi",{"_index":1012,"title":{},"body":{"license.html":{}}}],["liabil",{"_index":1053,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":1050,"title":{},"body":{"license.html":{}}}],["librari",{"_index":667,"title":{},"body":{"changelog.html":{}}}],["licens",{"_index":950,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["limit",{"_index":1026,"title":{},"body":{"license.html":{}}}],["line",{"_index":412,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["listen",{"_index":252,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["listenonthehost(eventnam",{"_index":534,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["local",{"_index":994,"title":{},"body":{"index.html":{}}}],["locat",{"_index":490,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["lock",{"_index":190,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["log",{"_index":541,"title":{},"body":{"changelog.html":{}}}],["longer",{"_index":663,"title":{},"body":{"changelog.html":{}}}],["main",{"_index":750,"title":{},"body":{"changelog.html":{}}}],["make",{"_index":149,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["map",{"_index":60,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["map(([previouscoord",{"_index":319,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["margin",{"_index":973,"title":{},"body":{"index.html":{}}}],["match",{"_index":33,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["math.abs(value1",{"_index":97,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["math.ceil(coords.clienti",{"_index":316,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["math.ceil(coords.clientx",{"_index":315,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["math.round(newcoords.clienti",{"_index":333,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["math.round(newcoords.clientx",{"_index":332,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["matt",{"_index":1011,"title":{},"body":{"license.html":{}}}],["merchant",{"_index":1044,"title":{},"body":{"license.html":{}}}],["merg",{"_index":57,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"license.html":{}}}],["merge(this.pointereventlisteners.pointerdown",{"_index":237,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["merge(this.pointereventlisteners.pointerup",{"_index":259,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["mergemap",{"_index":61,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["mergemap(startcoord",{"_index":295,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["metadata",{"_index":453,"title":{},"body":{"directives/ResizableDirective.html":{},"directives/ResizeHandleDirective.html":{}}}],["method",{"_index":445,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["migrat",{"_index":202,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["millisecond",{"_index":210,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["miscellan",{"_index":934,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["miss",{"_index":907,"title":{},"body":{"changelog.html":{}}}],["mit",{"_index":1008,"title":{},"body":{"index.html":{},"license.html":{}}}],["modifi",{"_index":664,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["modul",{"_index":466,"title":{"modules/ResizableModule.html":{},"modules.html":{}},"body":{"modules/ResizableModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["mous",{"_index":195,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["mouse_move_throttle_m",{"_index":146,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["mousedown",{"_index":222,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["mousedrag",{"_index":294,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["mouseev",{"_index":86,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["mousemov",{"_index":223,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["mousemove$.pipe(pairwis",{"_index":318,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["mousemove$.pipe(take(1)).pipe(map(coord",{"_index":317,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["mousemoveev",{"_index":518,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["mousemoveevent.clienti",{"_index":520,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["mousemoveevent.clientx",{"_index":519,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["mousemovethrottlem",{"_index":212,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["mouseup",{"_index":221,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["mouseup$.pipe(takeuntil(this.destroy$)).subscrib",{"_index":381,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["move",{"_index":208,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["movecoords.clienti",{"_index":299,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["movecoords.clientx",{"_index":297,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["ms",{"_index":211,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["multipl",{"_index":913,"title":{},"body":{"changelog.html":{}}}],["mwl",{"_index":847,"title":{},"body":{"changelog.html":{}}}],["mwlresiz",{"_index":155,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["mwlresizehandl",{"_index":486,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["mycompon",{"_index":980,"title":{},"body":{"index.html":{}}}],["mymodul",{"_index":984,"title":{},"body":{"index.html":{}}}],["name",{"_index":402,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{}}}],["ne",{"_index":1067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["need",{"_index":598,"title":{},"body":{"changelog.html":{}}}],["neg",{"_index":205,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["nest",{"_index":892,"title":{},"body":{"changelog.html":{}}}],["new",{"_index":215,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["newboundingrect",{"_index":344,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.height",{"_index":341,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.height}px",{"_index":350,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.left}px",{"_index":353,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.top}px",{"_index":352,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.width",{"_index":342,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.width}px",{"_index":351,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newcoord",{"_index":320,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newgrid",{"_index":326,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newgrid.i",{"_index":331,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newgrid.x",{"_index":329,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newrectangl",{"_index":347,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newrectangle[edg",{"_index":134,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["ng",{"_index":655,"title":{},"body":{"changelog.html":{}}}],["ng4",{"_index":722,"title":{},"body":{"changelog.html":{}}}],["ngmodul",{"_index":471,"title":{},"body":{"modules/ResizableModule.html":{},"index.html":{}}}],["ngonchanges(chang",{"_index":385,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["ngondestroy",{"_index":388,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["ngoninit",{"_index":235,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["ngzone",{"_index":47,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["node",{"_index":694,"title":{},"body":{"changelog.html":{}}}],["node.j",{"_index":992,"title":{},"body":{"index.html":{}}}],["node_modules/angular",{"_index":806,"title":{},"body":{"changelog.html":{}}}],["node_modules/angular2",{"_index":822,"title":{},"body":{"changelog.html":{}}}],["noninfring",{"_index":1047,"title":{},"body":{"license.html":{}}}],["notabl",{"_index":542,"title":{},"body":{"changelog.html":{}}}],["noth",{"_index":256,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["notic",{"_index":1036,"title":{},"body":{"license.html":{}}}],["now",{"_index":641,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["npm",{"_index":953,"title":{},"body":{"index.html":{}}}],["null",{"_index":265,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["number",{"_index":25,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["nw",{"_index":1066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object",{"_index":170,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["object.freez",{"_index":1065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.keys(edges).length",{"_index":359,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["object.keys(this.eventlisteners).foreach(typ",{"_index":530,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["object.keys(this.resizeedges).some(edg",{"_index":276,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["observ",{"_index":56,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["observer.next",{"_index":421,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["obtain",{"_index":1019,"title":{},"body":{"license.html":{}}}],["offlin",{"_index":817,"title":{},"body":{"changelog.html":{}}}],["old",{"_index":904,"title":{},"body":{"changelog.html":{}}}],["onc",{"_index":1004,"title":{},"body":{"index.html":{}}}],["onchang",{"_index":48,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["ondestroy",{"_index":46,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["oninit",{"_index":42,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["onmousedown",{"_index":509,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["onmousemov",{"_index":527,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["onmouseup(clientx",{"_index":522,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["onres",{"_index":852,"title":{},"body":{"changelog.html":{}}}],["onresizeend",{"_index":853,"title":{},"body":{"changelog.html":{}}}],["onresizeend(ev",{"_index":981,"title":{},"body":{"index.html":{}}}],["onresizestart",{"_index":851,"title":{},"body":{"changelog.html":{}}}],["oper",{"_index":653,"title":{},"body":{"changelog.html":{}}}],["opt",{"_index":888,"title":{},"body":{"changelog.html":{}}}],["option",{"_index":15,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Edges.html":{},"classes/PointerEventListeners.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["ordin",{"_index":869,"title":{},"body":{"changelog.html":{}}}],["otherwis",{"_index":1058,"title":{},"body":{"license.html":{}}}],["out",{"_index":1060,"title":{},"body":{"license.html":{}}}],["output",{"_index":43,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["outsid",{"_index":699,"title":{},"body":{"changelog.html":{}}}],["over",{"_index":199,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["overview",{"_index":1063,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":643,"title":{"dependencies.html":{}},"body":{"changelog.html":{}}}],["packagr",{"_index":656,"title":{},"body":{"changelog.html":{}}}],["pairwis",{"_index":64,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["paramet",{"_index":447,"title":{},"body":{"classes/PointerEventListeners.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":493,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["particular",{"_index":1045,"title":{},"body":{"license.html":{}}}],["pass",{"_index":169,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{}}}],["passiv",{"_index":251,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["path",{"_index":821,"title":{},"body":{"changelog.html":{}}}],["peer",{"_index":591,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["peerdepend",{"_index":829,"title":{},"body":{"changelog.html":{}}}],["perform",{"_index":555,"title":{},"body":{"changelog.html":{}}}],["permiss",{"_index":1013,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1032,"title":{},"body":{"license.html":{}}}],["person",{"_index":1018,"title":{},"body":{"license.html":{}}}],["pipe",{"_index":241,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pipe(filt",{"_index":335,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pipe(shar",{"_index":427,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pipe(takeuntil(merge(mouseup",{"_index":334,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["place",{"_index":148,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["platform_id",{"_index":51,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["platformid",{"_index":229,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["point",{"_index":670,"title":{},"body":{"changelog.html":{}}}],["pointerdown",{"_index":406,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointereventcoordin",{"_index":82,"title":{"interfaces/PointerEventCoordinate.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointereventlisten",{"_index":225,"title":{"classes/PointerEventListeners.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointereventlisteners.getinst",{"_index":234,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointereventlisteners.inst",{"_index":414,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointermov",{"_index":407,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointerup",{"_index":408,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pojo",{"_index":875,"title":{},"body":{"changelog.html":{}}}],["port",{"_index":1000,"title":{},"body":{"index.html":{}}}],["portion",{"_index":1039,"title":{},"body":{"license.html":{}}}],["posit",{"_index":176,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["post",{"_index":830,"title":{},"body":{"changelog.html":{}}}],["precis",{"_index":92,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["prefix",{"_index":841,"title":{},"body":{"changelog.html":{}}}],["prepar",{"_index":990,"title":{},"body":{"index.html":{}}}],["press",{"_index":213,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["prevent",{"_index":796,"title":{},"body":{"changelog.html":{}}}],["previou",{"_index":866,"title":{},"body":{"changelog.html":{}}}],["previouscoord",{"_index":321,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["previousgrid",{"_index":325,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["previousgrid.i",{"_index":330,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["previousgrid.x",{"_index":328,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["privat",{"_index":224,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["project",{"_index":543,"title":{},"body":{"changelog.html":{}}}],["propag",{"_index":165,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["properti",{"_index":13,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{}}}],["prototyp",{"_index":662,"title":{},"body":{"changelog.html":{}}}],["provid",{"_index":896,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["public",{"_index":220,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["publish",{"_index":1027,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":1046,"title":{},"body":{"license.html":{}}}],["rc5",{"_index":831,"title":{},"body":{"changelog.html":{}}}],["rc6",{"_index":834,"title":{},"body":{"changelog.html":{}}}],["re",{"_index":899,"title":{},"body":{"changelog.html":{}}}],["readm",{"_index":848,"title":{},"body":{"changelog.html":{}}}],["rect",{"_index":129,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["rect.left",{"_index":132,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["rect.top",{"_index":131,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["rectangl",{"_index":9,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{},"index.html":{}}}],["rectangle.interfac",{"_index":75,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{}}}],["rectangle.interface.t",{"_index":6,"title":{},"body":{"interfaces/BoundingRectangle.html":{}}}],["rectangle.interface.ts:12",{"_index":29,"title":{},"body":{"interfaces/BoundingRectangle.html":{}}}],["refer",{"_index":489,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["regist",{"_index":744,"title":{},"body":{"changelog.html":{}}}],["rel",{"_index":956,"title":{},"body":{"index.html":{}}}],["relax",{"_index":738,"title":{},"body":{"changelog.html":{}}}],["releas",{"_index":218,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"index.html":{}}}],["releaselicens",{"_index":1007,"title":{},"body":{"index.html":{}}}],["reload",{"_index":1002,"title":{},"body":{"index.html":{}}}],["remov",{"_index":612,"title":{},"body":{"changelog.html":{}}}],["removeghostel",{"_index":266,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["renam",{"_index":801,"title":{},"body":{"changelog.html":{}}}],["render",{"_index":230,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["renderer.listen",{"_index":420,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["renderer2",{"_index":40,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["repo",{"_index":998,"title":{},"body":{"index.html":{}}}],["requir",{"_index":642,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["reset",{"_index":779,"title":{},"body":{"changelog.html":{}}}],["resiz",{"_index":10,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["resizable.direct",{"_index":472,"title":{},"body":{"modules/ResizableModule.html":{},"directives/ResizeHandleDirective.html":{}}}],["resizable.j",{"_index":826,"title":{},"body":{"changelog.html":{}}}],["resizable.jsaft",{"_index":824,"title":{},"body":{"changelog.html":{}}}],["resizable/angular2",{"_index":823,"title":{},"body":{"changelog.html":{}}}],["resizable/dist/umd/angular2",{"_index":825,"title":{},"body":{"changelog.html":{}}}],["resizablecontain",{"_index":487,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["resizabledirect",{"_index":158,"title":{"directives/ResizableDirective.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["resizablemodul",{"_index":467,"title":{"modules/ResizableModule.html":{}},"body":{"modules/ResizableModule.html":{},"changelog.html":{},"index.html":{},"modules.html":{}}}],["resize_active_class",{"_index":137,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["resize_bottom_hover_class",{"_index":143,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["resize_ghost_element_class",{"_index":144,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["resize_left_hover_class",{"_index":139,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["resize_right_hover_class",{"_index":141,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["resize_top_hover_class",{"_index":142,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["resizecursor",{"_index":197,"title":{"interfaces/ResizeCursors.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["resizecursorprecis",{"_index":203,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["resizeedg",{"_index":179,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["resizeedges.bottom",{"_index":293,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["resizeedges.left",{"_index":290,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["resizeedges.right",{"_index":291,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["resizeedges.top",{"_index":292,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["resizeedges]={top",{"_index":903,"title":{},"body":{"changelog.html":{}}}],["resizeend",{"_index":186,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["resizeev",{"_index":76,"title":{"interfaces/ResizeEvent.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"index.html":{}}}],["resizehandl",{"_index":679,"title":{},"body":{"changelog.html":{}}}],["resizehandledirect",{"_index":470,"title":{"directives/ResizeHandleDirective.html":{}},"body":{"modules/ResizableModule.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["resizesnapgrid",{"_index":194,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["resizestart",{"_index":185,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["resizing)=\"onresizing($ev",{"_index":808,"title":{},"body":{"changelog.html":{}}}],["restor",{"_index":602,"title":{},"body":{"changelog.html":{}}}],["restrict",{"_index":1025,"title":{},"body":{"license.html":{}}}],["result",{"_index":32,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":98,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["reziz",{"_index":742,"title":{},"body":{"changelog.html":{}}}],["right",{"_index":18,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["row",{"_index":978,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":741,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["rxj",{"_index":59,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["rxjs/oper",{"_index":71,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["same",{"_index":253,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["save",{"_index":954,"title":{},"body":{"index.html":{}}}],["scroll",{"_index":692,"title":{},"body":{"changelog.html":{}}}],["scrollleft",{"_index":19,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["scrolltop",{"_index":20,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["se",{"_index":1069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seamless",{"_index":726,"title":{},"body":{"changelog.html":{}}}],["see",{"_index":248,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["select",{"_index":799,"title":{},"body":{"changelog.html":{}}}],["selector",{"_index":154,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["sell",{"_index":1031,"title":{},"body":{"license.html":{}}}],["server",{"_index":999,"title":{},"body":{"index.html":{}}}],["set",{"_index":180,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["setelementclass(elm",{"_index":401,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["shall",{"_index":1037,"title":{},"body":{"license.html":{}}}],["share",{"_index":66,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["show",{"_index":929,"title":{},"body":{"changelog.html":{}}}],["shown",{"_index":682,"title":{},"body":{"changelog.html":{}}}],["sibl",{"_index":153,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["side",{"_index":178,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["simplechang",{"_index":49,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["size",{"_index":975,"title":{},"body":{"index.html":{}}}],["snap",{"_index":188,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["snapgrid",{"_index":302,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["snapgrid.i",{"_index":310,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["snapgrid.x",{"_index":305,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["softwar",{"_index":1021,"title":{},"body":{"license.html":{}}}],["solid",{"_index":970,"title":{},"body":{"index.html":{}}}],["somewher",{"_index":254,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"index.html":{}}}],["specifi",{"_index":902,"title":{},"body":{"changelog.html":{}}}],["src/.../resizable.directive.t",{"_index":935,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/interfaces/bound",{"_index":5,"title":{},"body":{"interfaces/BoundingRectangle.html":{}}}],["src/interfaces/edges.interface.t",{"_index":442,"title":{},"body":{"interfaces/Edges.html":{}}}],["src/interfaces/edges.interface.ts:8",{"_index":444,"title":{},"body":{"interfaces/Edges.html":{}}}],["src/interfaces/res",{"_index":480,"title":{},"body":{"interfaces/ResizeEvent.html":{}}}],["src/resiz",{"_index":483,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["src/resizable.directive.t",{"_index":35,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/resizable.directive.ts:300",{"_index":462,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:306",{"_index":460,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:311",{"_index":455,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:318",{"_index":461,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:323",{"_index":459,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:329",{"_index":458,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:334",{"_index":456,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:339",{"_index":454,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:344",{"_index":457,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:349",{"_index":464,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:354",{"_index":465,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:359",{"_index":463,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:845",{"_index":448,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["src/resizable.directive.ts:847",{"_index":449,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["src/resizable.directive.ts:849",{"_index":450,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["src/resizable.directive.ts:853",{"_index":452,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["src/resizable.directive.ts:864",{"_index":446,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["src/resizable.module.t",{"_index":468,"title":{},"body":{"modules/ResizableModule.html":{}}}],["standard",{"_index":544,"title":{},"body":{"changelog.html":{}}}],["start",{"_index":538,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"changelog.html":{},"index.html":{}}}],["startcoords.clienti",{"_index":300,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["startcoords.clientx",{"_index":298,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["startingrect",{"_index":261,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["startwith",{"_index":69,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["startwith(this.resizeedg",{"_index":275,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["state",{"_index":751,"title":{},"body":{"changelog.html":{}}}],["static",{"_index":409,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["string",{"_index":24,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/variables.html":{}}}],["style",{"_index":861,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["style[properti",{"_index":99,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["subject",{"_index":55,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"license.html":{}}}],["sublicens",{"_index":1029,"title":{},"body":{"license.html":{}}}],["subscrib",{"_index":282,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["subscribe((edg",{"_index":360,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["subscribe((newboundingrect",{"_index":348,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["subscribe(ev",{"_index":506,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["substanti",{"_index":1038,"title":{},"body":{"license.html":{}}}],["suffix",{"_index":648,"title":{},"body":{"changelog.html":{}}}],["support",{"_index":816,"title":{},"body":{"changelog.html":{}}}],["sw",{"_index":1068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["switchmap",{"_index":68,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["switchmap(legacyresizeedgesen",{"_index":278,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["sync",{"_index":919,"title":{},"body":{"changelog.html":{}}}],["system.j",{"_index":675,"title":{},"body":{"changelog.html":{}}}],["tabl",{"_index":946,"title":{},"body":{"index.html":{}}}],["take",{"_index":65,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["takeuntil",{"_index":62,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["takeuntil(this.destroy",{"_index":281,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["tap",{"_index":70,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["templat",{"_index":818,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["temporari",{"_index":182,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["test",{"_index":1003,"title":{},"body":{"index.html":{}}}],["test:watch",{"_index":1005,"title":{},"body":{"index.html":{}}}],["text",{"_index":797,"title":{},"body":{"changelog.html":{}}}],["thick",{"_index":200,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.allownegativeres",{"_index":340,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.destroy$.next",{"_index":400,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["this.element.nativeel",{"_index":512,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.elm",{"_index":284,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.elm.nativeel",{"_index":369,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.elm.nativeelement.clonenode(tru",{"_index":367,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.elm.nativeelement.parentelement.appendchild",{"_index":368,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.elm.nativeelement.parentelement.removechild",{"_index":268,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.enableghostres",{"_index":366,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.eventlisteners.mousemov",{"_index":517,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.eventlisteners.touchmov",{"_index":510,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.eventlisteners[typ",{"_index":533,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.ghostelementposit",{"_index":362,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.listenonthehost('mousedown').subscribe(ev",{"_index":498,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.listenonthehost('mouseup').subscribe(ev",{"_index":500,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.listenonthehost('touchcancel",{"_index":505,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.listenonthehost('touchend",{"_index":504,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.listenonthehost('touchstart').subscribe(ev",{"_index":502,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.mousedown",{"_index":238,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mousedown.complet",{"_index":396,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mousemov",{"_index":240,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mousemove.complet",{"_index":398,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mouseup",{"_index":260,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mouseup.complet",{"_index":397,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.onmousedown",{"_index":503,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.onmousedown(ev",{"_index":499,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.onmousemov",{"_index":514,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.onmouseup",{"_index":507,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.onmouseup(event.clientx",{"_index":501,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.pointerdown",{"_index":416,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointereventlisten",{"_index":233,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointereventlisteners.pointermov",{"_index":239,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointermov",{"_index":428,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointerup",{"_index":434,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.addclass",{"_index":374,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.addclass(elm.nativeel",{"_index":404,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.listen",{"_index":511,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.renderer.removeclass(elm.nativeel",{"_index":405,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.removeclass(this.elm.nativeel",{"_index":382,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.setstyl",{"_index":349,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.setstyle(document.bodi",{"_index":364,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.setstyle(this.elm.nativeel",{"_index":269,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizable.mousedown.next",{"_index":521,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.resizable.mousemove.next",{"_index":528,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.resizable.mouseup.next",{"_index":523,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.resizablecontain",{"_index":526,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.resizabledirect",{"_index":525,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.resizecursor",{"_index":273,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizecursorprecis",{"_index":287,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizeedg",{"_index":274,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["this.resizeedges$.complet",{"_index":399,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizeedges$.next(this.resizeedg",{"_index":387,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizeedges[edg",{"_index":277,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizeend.emit",{"_index":384,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizeend.observers.length",{"_index":383,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizesnapgrid.bottom",{"_index":311,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizesnapgrid.left",{"_index":303,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizesnapgrid.right",{"_index":306,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizesnapgrid.top",{"_index":308,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizestart.emit",{"_index":379,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizestart.observers.length",{"_index":378,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizing.emit",{"_index":356,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizing.observers.length",{"_index":354,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.setelementclass",{"_index":289,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.setelementclass(this.elm",{"_index":365,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.unsubscribeeventlisten",{"_index":508,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.validateres",{"_index":343,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.zone.run",{"_index":355,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.zone.runoutsideangular",{"_index":497,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["throttl",{"_index":209,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["through",{"_index":952,"title":{},"body":{"index.html":{}}}],["throw",{"_index":618,"title":{},"body":{"changelog.html":{}}}],["time",{"_index":914,"title":{},"body":{"changelog.html":{}}}],["top",{"_index":21,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["topleft",{"_index":477,"title":{},"body":{"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["toporbottom",{"_index":478,"title":{},"body":{"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["topright",{"_index":479,"title":{},"body":{"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["tort",{"_index":1057,"title":{},"body":{"license.html":{}}}],["touch",{"_index":80,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["touchcancel",{"_index":441,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["touchend",{"_index":438,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["touchev",{"_index":87,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["touchmov",{"_index":431,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["touchmoveev",{"_index":513,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["touchmoveevent.targettouches[0].clienti",{"_index":516,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["touchmoveevent.targettouches[0].clientx",{"_index":515,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["touchstart",{"_index":424,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["transform",{"_index":102,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["transform.includes('transl",{"_index":103,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["transform.replac",{"_index":105,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["translate3?d",{"_index":106,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["translate3d",{"_index":579,"title":{},"body":{"changelog.html":{}}}],["translatex",{"_index":104,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["translatey",{"_index":110,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["tri",{"_index":243,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["trigger",{"_index":443,"title":{},"body":{"interfaces/Edges.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["true",{"_index":163,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["tslint:dis",{"_index":411,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["type",{"_index":30,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["typescript",{"_index":923,"title":{},"body":{"changelog.html":{}}}],["ui",{"_index":920,"title":{},"body":{"changelog.html":{}}}],["umd",{"_index":668,"title":{},"body":{"changelog.html":{}}}],["uncancel",{"_index":917,"title":{},"body":{"changelog.html":{}}}],["undefin",{"_index":27,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["univers",{"_index":391,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["unsubscrib",{"_index":783,"title":{},"body":{"changelog.html":{}}}],["unsubscribeeventlisten",{"_index":529,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["unsubscribemousedown",{"_index":417,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribemousemov",{"_index":429,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribemouseup",{"_index":435,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribetouchcancel",{"_index":437,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribetouchend",{"_index":436,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribetouchmov",{"_index":430,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribetouchstart",{"_index":418,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["until",{"_index":597,"title":{},"body":{"changelog.html":{}}}],["up",{"_index":872,"title":{},"body":{"changelog.html":{}}}],["updat",{"_index":677,"title":{},"body":{"changelog.html":{}}}],["upgrad",{"_index":637,"title":{},"body":{"changelog.html":{}}}],["us",{"_index":173,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["user",{"_index":676,"title":{},"body":{"changelog.html":{}}}],["valid",{"_index":871,"title":{},"body":{"changelog.html":{}}}],["validateres",{"_index":168,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["valu",{"_index":101,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["value1",{"_index":90,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["value2",{"_index":91,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["variabl",{"_index":1064,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":545,"title":{},"body":{"changelog.html":{}}}],["via",{"_index":794,"title":{},"body":{"changelog.html":{}}}],["view",{"_index":986,"title":{},"body":{"index.html":{}}}],["visibl",{"_index":270,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["void",{"_index":236,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"index.html":{}}}],["w",{"_index":873,"title":{},"body":{"changelog.html":{}}}],["warn",{"_index":739,"title":{},"body":{"changelog.html":{}}}],["warranti",{"_index":1040,"title":{},"body":{"license.html":{}}}],["way",{"_index":897,"title":{},"body":{"changelog.html":{}}}],["webkit",{"_index":880,"title":{},"body":{"changelog.html":{}}}],["whether",{"_index":1054,"title":{},"body":{"license.html":{}}}],["width",{"_index":22,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["wip",{"_index":927,"title":{},"body":{"changelog.html":{}}}],["within",{"_index":708,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["without",{"_index":1024,"title":{},"body":{"license.html":{}}}],["work",{"_index":976,"title":{},"body":{"index.html":{}}}],["write",{"_index":258,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["x",{"_index":36,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["y",{"_index":37,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["yourself",{"_index":665,"title":{},"body":{"changelog.html":{}}}],["zone",{"_index":232,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["zone.runoutsideangular",{"_index":419,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/BoundingRectangle.html":{"url":"interfaces/BoundingRectangle.html","title":"interface - BoundingRectangle","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BoundingRectangle\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/bounding-rectangle.interface.ts\n        \n\n            \n                Description\n            \n            \n                The bounding rectangle of the resized element\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        bottom\n                                \n                                \n                                            Optional\n                                        height\n                                \n                                \n                                        left\n                                \n                                \n                                        right\n                                \n                                \n                                            Optional\n                                        scrollLeft\n                                \n                                \n                                            Optional\n                                        scrollTop\n                                \n                                \n                                        top\n                                \n                                \n                                            Optional\n                                        width\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    number | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/interfaces/bounding-rectangle.interface.ts:12\n                            \n                        \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bottom\n                                    \n                                \n                                \n                                    \n                                        bottom:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                    \n                                \n                                \n                                    \n                                        height:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        left\n                                    \n                                \n                                \n                                    \n                                        left:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        right\n                                    \n                                \n                                \n                                    \n                                        right:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scrollLeft\n                                    \n                                \n                                \n                                    \n                                        scrollLeft:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scrollTop\n                                    \n                                \n                                \n                                    \n                                        scrollTop:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        top\n                                    \n                                \n                                \n                                    \n                                        top:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                    \n                                \n                                \n                                    \n                                        width:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface BoundingRectangle {\n  top: number;\n  bottom: number;\n  left: number;\n  right: number;\n  height?: number;\n  width?: number;\n  scrollTop?: number;\n  scrollLeft?: number;\n  [key: string]: number | undefined;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Coordinate.html":{"url":"interfaces/Coordinate.html","title":"interface - Coordinate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Coordinate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resizable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  Inject,\n  PLATFORM_ID\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Subject, Observable, Observer, merge, EMPTY } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  filter,\n  pairwise,\n  take,\n  share,\n  auditTime,\n  switchMap,\n  startWith,\n  tap\n} from 'rxjs/operators';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\nimport { IS_TOUCH_DEVICE } from './is-touch-device';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction isNumberCloseTo(\n  value1: number,\n  value2: number,\n  precision: number = 3\n): boolean {\n  const diff: number = Math.abs(value1 - value2);\n  return diff  style[property])\n    .find(value => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(\n      /.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/,\n      '$1'\n    );\n    translateY = transform.replace(\n      /.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/,\n      '$2'\n    );\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX\n    };\n  } else {\n    const boundingRect: BoundingRectangle = element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft\n    };\n  }\n}\n\nfunction isWithinBoundingY({\n  clientY,\n  rect\n}: {\n  clientY: number;\n  rect: ClientRect;\n}): boolean {\n  return clientY >= rect.top && clientY = rect.left && clientX  {\n    edgesDiff[edge] = (newRectangle[edge] || 0) - (initialRectangle[edge] || 0);\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_LEFT_HOVER_CLASS: string = 'resize-left-hover';\nconst RESIZE_RIGHT_HOVER_CLASS: string = 'resize-right-hover';\nconst RESIZE_TOP_HOVER_CLASS: string = 'resize-top-hover';\nconst RESIZE_BOTTOM_HOVER_CLASS: string = 'resize-bottom-hover';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * \n * \n * ```\n * Or in case they are sibling elements:\n * ```html\n * \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizable]',\n  exportAs: 'mwlResizable'\n})\nexport class ResizableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * The edges that an element can be resized from. Pass an object like `{top: true, bottom: false}`. By default no edges can be resized.\n   * @deprecated use a resize handle instead that positions itself to the side of the element you would like to resize\n   */\n  @Input() resizeEdges: Edges = {};\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: ResizeCursors = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Mouse over thickness to active cursor.\n   * @deprecated invalid when you migrate to use resize handles instead of setting resizeEdges on the element\n   */\n  @Input() resizeCursorPrecision: number = 3;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Allow elements to be resized to negative dimensions\n   */\n  @Input() allowNegativeResizes: boolean = false;\n\n  /**\n   * The mouse move throttle in milliseconds, default: 50 ms\n   */\n  @Input() mouseMoveThrottleMS: number = MOUSE_MOVE_THROTTLE_MS;\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private destroy$ = new Subject();\n\n  private resizeEdges$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: any,\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    const mousedown$: Observable = merge(this.pointerEventListeners.pointerDown, this.mousedown);\n\n    const mousemove$ = merge(\n      this.pointerEventListeners.pointerMove,\n      this.mousemove\n    ).pipe(\n      tap(({ event }) => {\n        if (currentResize) {\n          try {\n            event.preventDefault();\n          } catch (e) {\n            // just adding try-catch not to see errors in console if there is a passive listener for same event somewhere\n            // browser does nothing except of writing errors to console\n          }\n        }\n      }),\n      share()\n    );\n\n    const mouseup$ = merge(this.pointerEventListeners.pointerUp, this.mouseup);\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const getResizeCursors = (): ResizeCursors => {\n      return {\n        ...DEFAULT_RESIZE_CURSORS,\n        ...this.resizeCursors\n      };\n    };\n\n    this.resizeEdges$\n      .pipe(\n        startWith(this.resizeEdges),\n        map(() => {\n          return (\n            this.resizeEdges &&\n            Object.keys(this.resizeEdges).some(edge => !!this.resizeEdges[edge])\n          );\n        }),\n        switchMap(legacyResizeEdgesEnabled =>\n          legacyResizeEdgesEnabled ? mousemove$ : EMPTY\n        ),\n        auditTime(this.mouseMoveThrottleMS),\n        takeUntil(this.destroy$)\n      )\n      .subscribe(({ clientX, clientY }) => {\n        const resizeEdges: Edges = getResizeEdges({\n          clientX,\n          clientY,\n          elm: this.elm,\n          allowedEdges: this.resizeEdges,\n          cursorPrecision: this.resizeCursorPrecision\n        });\n        const resizeCursors = getResizeCursors();\n        if (!currentResize) {\n          const cursor = getResizeCursor(resizeEdges, resizeCursors);\n          this.renderer.setStyle(this.elm.nativeElement, 'cursor', cursor);\n        }\n        this.setElementClass(\n          this.elm,\n          RESIZE_LEFT_HOVER_CLASS,\n          resizeEdges.left === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_RIGHT_HOVER_CLASS,\n          resizeEdges.right === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_TOP_HOVER_CLASS,\n          resizeEdges.top === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_BOTTOM_HOVER_CLASS,\n          resizeEdges.bottom === true\n        );\n      });\n\n    const mousedrag: Observable = mousedown$\n      .pipe(\n        mergeMap(startCoords => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y)\n            };\n          }\n\n          return (merge(\n            mousemove$.pipe(take(1)).pipe(map(coords => [, coords])),\n            mousemove$.pipe(pairwise())\n          ) as Observable)\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords)\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y\n                };\n              })\n            )\n            .pipe(takeUntil(merge(mouseup$, mousedown$)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return (\n            this.allowNegativeResizes ||\n            !!(\n              newBoundingRect.height &&\n              newBoundingRect.width &&\n              newBoundingRect.height > 0 &&\n              newBoundingRect.width > 0\n            )\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect\n                })\n              })\n            : true;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        if (this.resizing.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizing.emit({\n              edges: getEdgesDiff({\n                edges: currentResize!.edges,\n                initialRectangle: currentResize!.startingRect,\n                newRectangle: newBoundingRect\n              }),\n              rectangle: newBoundingRect\n            });\n          });\n        }\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    mousedown$\n      .pipe(\n        map(({ clientX, clientY, edges }) => {\n          return (\n            edges ||\n            getResizeEdges({\n              clientX,\n              clientY,\n              elm: this.elm,\n              allowedEdges: this.resizeEdges,\n              cursorPrecision: this.resizeCursorPrecision\n            })\n          );\n        })\n      )\n      .pipe(\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect\n        };\n        const resizeCursors = getResizeCursors();\n        const cursor = getResizeCursor(currentResize.edges, resizeCursors);\n        this.renderer.setStyle(document.body, 'cursor', cursor);\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, true);\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = this.elm.nativeElement.cloneNode(true);\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        if (this.resizeStart.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizeStart.emit({\n              edges: getEdgesDiff({\n                edges,\n                initialRectangle: startingRect,\n                newRectangle: startingRect\n              }),\n              rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0)\n            });\n          });\n        }\n      });\n\n    mouseup$.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        if (this.resizeEnd.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizeEnd.emit({\n              edges: getEdgesDiff({\n                edges: currentResize!.edges,\n                initialRectangle: currentResize!.startingRect,\n                newRectangle: currentResize!.currentRect\n              }),\n              rectangle: currentResize!.currentRect\n            });\n          });\n        }\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.resizeEdges) {\n      this.resizeEdges$.next(this.resizeEdges);\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    // browser check for angular universal, because it doesn't know what document is\n    if (isPlatformBrowser(this.platformId)) {\n      this.renderer.setStyle(document.body, 'cursor', '');\n    }\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.resizeEdges$.complete();\n    this.destroy$.next();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable;\n\n  public pointerMove: Observable;\n\n  public pointerUp: Observable;\n\n  private static instance: PointerEventListeners; // tslint:disable-line\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchStart = renderer.listen(\n              'document',\n              'touchstart',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.touches[0].clientX,\n                  clientY: event.touches[0].clientY,\n                  event\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchStart!();\n          }\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchMove = renderer.listen(\n              'document',\n              'touchmove',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.targetTouches[0].clientX,\n                  clientY: event.targetTouches[0].clientY,\n                  event\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchMove!();\n          }\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: (() => void) | undefined;\n        let unsubscribeTouchCancel: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchEnd = renderer.listen(\n              'document',\n              'touchend',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.changedTouches[0].clientX,\n                  clientY: event.changedTouches[0].clientY,\n                  event\n                });\n              }\n            );\n\n            unsubscribeTouchCancel = renderer.listen(\n              'document',\n              'touchcancel',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.changedTouches[0].clientX,\n                  clientY: event.changedTouches[0].clientY,\n                  event\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchEnd!();\n            unsubscribeTouchCancel!();\n          }\n        };\n      }\n    ).pipe(share());\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Edges.html":{"url":"interfaces/Edges.html","title":"interface - Edges","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Edges\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/edges.interface.ts\n        \n\n            \n                Description\n            \n            \n                The edges that the resize event were triggered on\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        bottom\n                                \n                                \n                                            Optional\n                                        left\n                                \n                                \n                                            Optional\n                                        right\n                                \n                                \n                                            Optional\n                                        top\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    boolean | number | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/interfaces/edges.interface.ts:8\n                            \n                        \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bottom\n                                    \n                                \n                                \n                                    \n                                        bottom:     boolean | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        left\n                                    \n                                \n                                \n                                    \n                                        left:     boolean | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        right\n                                    \n                                \n                                \n                                    \n                                        right:     boolean | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        top\n                                    \n                                \n                                \n                                    \n                                        top:     boolean | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Edges {\n  top?: boolean | number;\n  bottom?: boolean | number;\n  left?: boolean | number;\n  right?: boolean | number;\n  [key: string]: boolean | number | undefined;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PointerEventCoordinate.html":{"url":"interfaces/PointerEventCoordinate.html","title":"interface - PointerEventCoordinate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PointerEventCoordinate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resizable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        clientX\n                                \n                                \n                                        clientY\n                                \n                                \n                                        event\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clientX\n                                    \n                                \n                                \n                                    \n                                        clientX:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clientY\n                                    \n                                \n                                \n                                    \n                                        clientY:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        event\n                                    \n                                \n                                \n                                    \n                                        event:     MouseEvent | TouchEvent\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MouseEvent | TouchEvent\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  Inject,\n  PLATFORM_ID\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Subject, Observable, Observer, merge, EMPTY } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  filter,\n  pairwise,\n  take,\n  share,\n  auditTime,\n  switchMap,\n  startWith,\n  tap\n} from 'rxjs/operators';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\nimport { IS_TOUCH_DEVICE } from './is-touch-device';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction isNumberCloseTo(\n  value1: number,\n  value2: number,\n  precision: number = 3\n): boolean {\n  const diff: number = Math.abs(value1 - value2);\n  return diff  style[property])\n    .find(value => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(\n      /.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/,\n      '$1'\n    );\n    translateY = transform.replace(\n      /.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/,\n      '$2'\n    );\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX\n    };\n  } else {\n    const boundingRect: BoundingRectangle = element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft\n    };\n  }\n}\n\nfunction isWithinBoundingY({\n  clientY,\n  rect\n}: {\n  clientY: number;\n  rect: ClientRect;\n}): boolean {\n  return clientY >= rect.top && clientY = rect.left && clientX  {\n    edgesDiff[edge] = (newRectangle[edge] || 0) - (initialRectangle[edge] || 0);\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_LEFT_HOVER_CLASS: string = 'resize-left-hover';\nconst RESIZE_RIGHT_HOVER_CLASS: string = 'resize-right-hover';\nconst RESIZE_TOP_HOVER_CLASS: string = 'resize-top-hover';\nconst RESIZE_BOTTOM_HOVER_CLASS: string = 'resize-bottom-hover';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * \n * \n * ```\n * Or in case they are sibling elements:\n * ```html\n * \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizable]',\n  exportAs: 'mwlResizable'\n})\nexport class ResizableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * The edges that an element can be resized from. Pass an object like `{top: true, bottom: false}`. By default no edges can be resized.\n   * @deprecated use a resize handle instead that positions itself to the side of the element you would like to resize\n   */\n  @Input() resizeEdges: Edges = {};\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: ResizeCursors = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Mouse over thickness to active cursor.\n   * @deprecated invalid when you migrate to use resize handles instead of setting resizeEdges on the element\n   */\n  @Input() resizeCursorPrecision: number = 3;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Allow elements to be resized to negative dimensions\n   */\n  @Input() allowNegativeResizes: boolean = false;\n\n  /**\n   * The mouse move throttle in milliseconds, default: 50 ms\n   */\n  @Input() mouseMoveThrottleMS: number = MOUSE_MOVE_THROTTLE_MS;\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private destroy$ = new Subject();\n\n  private resizeEdges$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: any,\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    const mousedown$: Observable = merge(this.pointerEventListeners.pointerDown, this.mousedown);\n\n    const mousemove$ = merge(\n      this.pointerEventListeners.pointerMove,\n      this.mousemove\n    ).pipe(\n      tap(({ event }) => {\n        if (currentResize) {\n          try {\n            event.preventDefault();\n          } catch (e) {\n            // just adding try-catch not to see errors in console if there is a passive listener for same event somewhere\n            // browser does nothing except of writing errors to console\n          }\n        }\n      }),\n      share()\n    );\n\n    const mouseup$ = merge(this.pointerEventListeners.pointerUp, this.mouseup);\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const getResizeCursors = (): ResizeCursors => {\n      return {\n        ...DEFAULT_RESIZE_CURSORS,\n        ...this.resizeCursors\n      };\n    };\n\n    this.resizeEdges$\n      .pipe(\n        startWith(this.resizeEdges),\n        map(() => {\n          return (\n            this.resizeEdges &&\n            Object.keys(this.resizeEdges).some(edge => !!this.resizeEdges[edge])\n          );\n        }),\n        switchMap(legacyResizeEdgesEnabled =>\n          legacyResizeEdgesEnabled ? mousemove$ : EMPTY\n        ),\n        auditTime(this.mouseMoveThrottleMS),\n        takeUntil(this.destroy$)\n      )\n      .subscribe(({ clientX, clientY }) => {\n        const resizeEdges: Edges = getResizeEdges({\n          clientX,\n          clientY,\n          elm: this.elm,\n          allowedEdges: this.resizeEdges,\n          cursorPrecision: this.resizeCursorPrecision\n        });\n        const resizeCursors = getResizeCursors();\n        if (!currentResize) {\n          const cursor = getResizeCursor(resizeEdges, resizeCursors);\n          this.renderer.setStyle(this.elm.nativeElement, 'cursor', cursor);\n        }\n        this.setElementClass(\n          this.elm,\n          RESIZE_LEFT_HOVER_CLASS,\n          resizeEdges.left === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_RIGHT_HOVER_CLASS,\n          resizeEdges.right === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_TOP_HOVER_CLASS,\n          resizeEdges.top === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_BOTTOM_HOVER_CLASS,\n          resizeEdges.bottom === true\n        );\n      });\n\n    const mousedrag: Observable = mousedown$\n      .pipe(\n        mergeMap(startCoords => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y)\n            };\n          }\n\n          return (merge(\n            mousemove$.pipe(take(1)).pipe(map(coords => [, coords])),\n            mousemove$.pipe(pairwise())\n          ) as Observable)\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords)\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y\n                };\n              })\n            )\n            .pipe(takeUntil(merge(mouseup$, mousedown$)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return (\n            this.allowNegativeResizes ||\n            !!(\n              newBoundingRect.height &&\n              newBoundingRect.width &&\n              newBoundingRect.height > 0 &&\n              newBoundingRect.width > 0\n            )\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect\n                })\n              })\n            : true;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        if (this.resizing.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizing.emit({\n              edges: getEdgesDiff({\n                edges: currentResize!.edges,\n                initialRectangle: currentResize!.startingRect,\n                newRectangle: newBoundingRect\n              }),\n              rectangle: newBoundingRect\n            });\n          });\n        }\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    mousedown$\n      .pipe(\n        map(({ clientX, clientY, edges }) => {\n          return (\n            edges ||\n            getResizeEdges({\n              clientX,\n              clientY,\n              elm: this.elm,\n              allowedEdges: this.resizeEdges,\n              cursorPrecision: this.resizeCursorPrecision\n            })\n          );\n        })\n      )\n      .pipe(\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect\n        };\n        const resizeCursors = getResizeCursors();\n        const cursor = getResizeCursor(currentResize.edges, resizeCursors);\n        this.renderer.setStyle(document.body, 'cursor', cursor);\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, true);\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = this.elm.nativeElement.cloneNode(true);\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        if (this.resizeStart.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizeStart.emit({\n              edges: getEdgesDiff({\n                edges,\n                initialRectangle: startingRect,\n                newRectangle: startingRect\n              }),\n              rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0)\n            });\n          });\n        }\n      });\n\n    mouseup$.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        if (this.resizeEnd.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizeEnd.emit({\n              edges: getEdgesDiff({\n                edges: currentResize!.edges,\n                initialRectangle: currentResize!.startingRect,\n                newRectangle: currentResize!.currentRect\n              }),\n              rectangle: currentResize!.currentRect\n            });\n          });\n        }\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.resizeEdges) {\n      this.resizeEdges$.next(this.resizeEdges);\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    // browser check for angular universal, because it doesn't know what document is\n    if (isPlatformBrowser(this.platformId)) {\n      this.renderer.setStyle(document.body, 'cursor', '');\n    }\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.resizeEdges$.complete();\n    this.destroy$.next();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable;\n\n  public pointerMove: Observable;\n\n  public pointerUp: Observable;\n\n  private static instance: PointerEventListeners; // tslint:disable-line\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchStart = renderer.listen(\n              'document',\n              'touchstart',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.touches[0].clientX,\n                  clientY: event.touches[0].clientY,\n                  event\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchStart!();\n          }\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchMove = renderer.listen(\n              'document',\n              'touchmove',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.targetTouches[0].clientX,\n                  clientY: event.targetTouches[0].clientY,\n                  event\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchMove!();\n          }\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: (() => void) | undefined;\n        let unsubscribeTouchCancel: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchEnd = renderer.listen(\n              'document',\n              'touchend',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.changedTouches[0].clientX,\n                  clientY: event.changedTouches[0].clientY,\n                  event\n                });\n              }\n            );\n\n            unsubscribeTouchCancel = renderer.listen(\n              'document',\n              'touchcancel',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.changedTouches[0].clientX,\n                  clientY: event.changedTouches[0].clientY,\n                  event\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchEnd!();\n            unsubscribeTouchCancel!();\n          }\n        };\n      }\n    ).pipe(share());\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PointerEventListeners.html":{"url":"classes/PointerEventListeners.html","title":"class - PointerEventListeners","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PointerEventListeners\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resizable.directive.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                pointerDown\n                            \n                            \n                                    Public\n                                pointerMove\n                            \n                            \n                                    Public\n                                pointerUp\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getInstance\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(renderer: Renderer2, zone: NgZone)\n                    \n                \n                        \n                            \n                                Defined in src/resizable.directive.ts:864\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                    Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        zone\n                                                  \n                                                        \n                                                                    NgZone\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            pointerDown\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        pointerDown:     Observable\n\n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/resizable.directive.ts:845\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            pointerMove\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        pointerMove:     Observable\n\n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/resizable.directive.ts:847\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            pointerUp\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        pointerUp:     Observable\n\n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/resizable.directive.ts:849\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            getInstance\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getInstance(renderer: Renderer2, zone: NgZone)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/resizable.directive.ts:853\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        renderer\n                                                        \n                                                                    Renderer2\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        zone\n                                                        \n                                                                    NgZone\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     PointerEventListeners\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  Inject,\n  PLATFORM_ID\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Subject, Observable, Observer, merge, EMPTY } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  filter,\n  pairwise,\n  take,\n  share,\n  auditTime,\n  switchMap,\n  startWith,\n  tap\n} from 'rxjs/operators';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\nimport { IS_TOUCH_DEVICE } from './is-touch-device';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction isNumberCloseTo(\n  value1: number,\n  value2: number,\n  precision: number = 3\n): boolean {\n  const diff: number = Math.abs(value1 - value2);\n  return diff  style[property])\n    .find(value => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(\n      /.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/,\n      '$1'\n    );\n    translateY = transform.replace(\n      /.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/,\n      '$2'\n    );\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX\n    };\n  } else {\n    const boundingRect: BoundingRectangle = element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft\n    };\n  }\n}\n\nfunction isWithinBoundingY({\n  clientY,\n  rect\n}: {\n  clientY: number;\n  rect: ClientRect;\n}): boolean {\n  return clientY >= rect.top && clientY = rect.left && clientX  {\n    edgesDiff[edge] = (newRectangle[edge] || 0) - (initialRectangle[edge] || 0);\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_LEFT_HOVER_CLASS: string = 'resize-left-hover';\nconst RESIZE_RIGHT_HOVER_CLASS: string = 'resize-right-hover';\nconst RESIZE_TOP_HOVER_CLASS: string = 'resize-top-hover';\nconst RESIZE_BOTTOM_HOVER_CLASS: string = 'resize-bottom-hover';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * \n * \n * ```\n * Or in case they are sibling elements:\n * ```html\n * \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizable]',\n  exportAs: 'mwlResizable'\n})\nexport class ResizableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * The edges that an element can be resized from. Pass an object like `{top: true, bottom: false}`. By default no edges can be resized.\n   * @deprecated use a resize handle instead that positions itself to the side of the element you would like to resize\n   */\n  @Input() resizeEdges: Edges = {};\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: ResizeCursors = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Mouse over thickness to active cursor.\n   * @deprecated invalid when you migrate to use resize handles instead of setting resizeEdges on the element\n   */\n  @Input() resizeCursorPrecision: number = 3;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Allow elements to be resized to negative dimensions\n   */\n  @Input() allowNegativeResizes: boolean = false;\n\n  /**\n   * The mouse move throttle in milliseconds, default: 50 ms\n   */\n  @Input() mouseMoveThrottleMS: number = MOUSE_MOVE_THROTTLE_MS;\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private destroy$ = new Subject();\n\n  private resizeEdges$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: any,\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    const mousedown$: Observable = merge(this.pointerEventListeners.pointerDown, this.mousedown);\n\n    const mousemove$ = merge(\n      this.pointerEventListeners.pointerMove,\n      this.mousemove\n    ).pipe(\n      tap(({ event }) => {\n        if (currentResize) {\n          try {\n            event.preventDefault();\n          } catch (e) {\n            // just adding try-catch not to see errors in console if there is a passive listener for same event somewhere\n            // browser does nothing except of writing errors to console\n          }\n        }\n      }),\n      share()\n    );\n\n    const mouseup$ = merge(this.pointerEventListeners.pointerUp, this.mouseup);\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const getResizeCursors = (): ResizeCursors => {\n      return {\n        ...DEFAULT_RESIZE_CURSORS,\n        ...this.resizeCursors\n      };\n    };\n\n    this.resizeEdges$\n      .pipe(\n        startWith(this.resizeEdges),\n        map(() => {\n          return (\n            this.resizeEdges &&\n            Object.keys(this.resizeEdges).some(edge => !!this.resizeEdges[edge])\n          );\n        }),\n        switchMap(legacyResizeEdgesEnabled =>\n          legacyResizeEdgesEnabled ? mousemove$ : EMPTY\n        ),\n        auditTime(this.mouseMoveThrottleMS),\n        takeUntil(this.destroy$)\n      )\n      .subscribe(({ clientX, clientY }) => {\n        const resizeEdges: Edges = getResizeEdges({\n          clientX,\n          clientY,\n          elm: this.elm,\n          allowedEdges: this.resizeEdges,\n          cursorPrecision: this.resizeCursorPrecision\n        });\n        const resizeCursors = getResizeCursors();\n        if (!currentResize) {\n          const cursor = getResizeCursor(resizeEdges, resizeCursors);\n          this.renderer.setStyle(this.elm.nativeElement, 'cursor', cursor);\n        }\n        this.setElementClass(\n          this.elm,\n          RESIZE_LEFT_HOVER_CLASS,\n          resizeEdges.left === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_RIGHT_HOVER_CLASS,\n          resizeEdges.right === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_TOP_HOVER_CLASS,\n          resizeEdges.top === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_BOTTOM_HOVER_CLASS,\n          resizeEdges.bottom === true\n        );\n      });\n\n    const mousedrag: Observable = mousedown$\n      .pipe(\n        mergeMap(startCoords => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y)\n            };\n          }\n\n          return (merge(\n            mousemove$.pipe(take(1)).pipe(map(coords => [, coords])),\n            mousemove$.pipe(pairwise())\n          ) as Observable)\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords)\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y\n                };\n              })\n            )\n            .pipe(takeUntil(merge(mouseup$, mousedown$)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return (\n            this.allowNegativeResizes ||\n            !!(\n              newBoundingRect.height &&\n              newBoundingRect.width &&\n              newBoundingRect.height > 0 &&\n              newBoundingRect.width > 0\n            )\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect\n                })\n              })\n            : true;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        if (this.resizing.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizing.emit({\n              edges: getEdgesDiff({\n                edges: currentResize!.edges,\n                initialRectangle: currentResize!.startingRect,\n                newRectangle: newBoundingRect\n              }),\n              rectangle: newBoundingRect\n            });\n          });\n        }\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    mousedown$\n      .pipe(\n        map(({ clientX, clientY, edges }) => {\n          return (\n            edges ||\n            getResizeEdges({\n              clientX,\n              clientY,\n              elm: this.elm,\n              allowedEdges: this.resizeEdges,\n              cursorPrecision: this.resizeCursorPrecision\n            })\n          );\n        })\n      )\n      .pipe(\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect\n        };\n        const resizeCursors = getResizeCursors();\n        const cursor = getResizeCursor(currentResize.edges, resizeCursors);\n        this.renderer.setStyle(document.body, 'cursor', cursor);\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, true);\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = this.elm.nativeElement.cloneNode(true);\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        if (this.resizeStart.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizeStart.emit({\n              edges: getEdgesDiff({\n                edges,\n                initialRectangle: startingRect,\n                newRectangle: startingRect\n              }),\n              rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0)\n            });\n          });\n        }\n      });\n\n    mouseup$.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        if (this.resizeEnd.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizeEnd.emit({\n              edges: getEdgesDiff({\n                edges: currentResize!.edges,\n                initialRectangle: currentResize!.startingRect,\n                newRectangle: currentResize!.currentRect\n              }),\n              rectangle: currentResize!.currentRect\n            });\n          });\n        }\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.resizeEdges) {\n      this.resizeEdges$.next(this.resizeEdges);\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    // browser check for angular universal, because it doesn't know what document is\n    if (isPlatformBrowser(this.platformId)) {\n      this.renderer.setStyle(document.body, 'cursor', '');\n    }\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.resizeEdges$.complete();\n    this.destroy$.next();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable;\n\n  public pointerMove: Observable;\n\n  public pointerUp: Observable;\n\n  private static instance: PointerEventListeners; // tslint:disable-line\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchStart = renderer.listen(\n              'document',\n              'touchstart',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.touches[0].clientX,\n                  clientY: event.touches[0].clientY,\n                  event\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchStart!();\n          }\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchMove = renderer.listen(\n              'document',\n              'touchmove',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.targetTouches[0].clientX,\n                  clientY: event.targetTouches[0].clientY,\n                  event\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchMove!();\n          }\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: (() => void) | undefined;\n        let unsubscribeTouchCancel: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchEnd = renderer.listen(\n              'document',\n              'touchend',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.changedTouches[0].clientX,\n                  clientY: event.changedTouches[0].clientY,\n                  event\n                });\n              }\n            );\n\n            unsubscribeTouchCancel = renderer.listen(\n              'document',\n              'touchcancel',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.changedTouches[0].clientX,\n                  clientY: event.changedTouches[0].clientY,\n                  event\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchEnd!();\n            unsubscribeTouchCancel!();\n          }\n        };\n      }\n    ).pipe(share());\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/ResizableDirective.html":{"url":"directives/ResizableDirective.html","title":"directive - ResizableDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  ResizableDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resizable.directive.ts\n        \n\n            \n                Description\n            \n            \n                Place this on an element to make it resizable. For example:\n * \n * \n *Or in case they are sibling elements:\n * \n * \n *\n            \n\n            \n                Implements\n            \n            \n                        OnInit\n                        OnChanges\n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [mwlResizable]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                allowNegativeResizes\n                            \n                            \n                                enableGhostResize\n                            \n                            \n                                ghostElementPositioning\n                            \n                            \n                                mouseMoveThrottleMS\n                            \n                            \n                                resizeCursorPrecision\n                            \n                            \n                                resizeCursors\n                            \n                            \n                                resizeEdges\n                            \n                            \n                                resizeSnapGrid\n                            \n                            \n                                validateResize\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                resizeEnd\n                            \n                            \n                                resizeStart\n                            \n                            \n                                resizing\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        allowNegativeResizes\n                    \n                    \n                        Allow elements to be resized to negative dimensions\n\n                            \n                            Type :    boolean\n\n                            \n                        \n                            Default value : false\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:339\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        enableGhostResize\n                    \n                    \n                        Set to true to enable a temporary resizing effect of the element in between the resizeStart and resizeEnd events.\n\n                            \n                            Type :    boolean\n\n                            \n                        \n                            Default value : false\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:311\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostElementPositioning\n                    \n                    \n                        Define the positioning of the ghost element (can be fixed or absolute)\n\n                            \n                            Type :    \"fixed\" | \"absolute\"\n\n                            \n                        \n                            Default value : 'fixed'\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:334\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        mouseMoveThrottleMS\n                    \n                    \n                        The mouse move throttle in milliseconds, default: 50 ms\n\n                            \n                            Type :    number\n\n                            \n                        \n                            Default value : MOUSE_MOVE_THROTTLE_MS\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:344\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        resizeCursorPrecision\n                    \n                    \n                        Mouse over thickness to active cursor.\n\n                            \n                            Type :    number\n\n                            \n                        \n                            Default value : 3\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:329\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        resizeCursors\n                    \n                    \n                        The mouse cursors that will be set on the resize edges\n\n                            \n                            Type :    ResizeCursors\n\n                            \n                        \n                            Default value : DEFAULT_RESIZE_CURSORS\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:323\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        resizeEdges\n                    \n                    \n                        The edges that an element can be resized from. Pass an object like {top: true, bottom: false}. By default no edges can be resized.\n\n                            \n                            Type :    Edges\n\n                            \n                        \n                            Default value : {}\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:306\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        resizeSnapGrid\n                    \n                    \n                        A snap grid that resize events will be locked to.\ne.g. to only allow the element to be resized every 10px set it to {left: 10, right: 10}\n\n                            \n                            Type :    Edges\n\n                            \n                        \n                            Default value : {}\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:318\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        validateResize\n                    \n                    \n                        A function that will be called before each resize event. Return true to allow the resize event to propagate or false to cancel it\n\n                            \n                            Type :    function\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:300\n                            \n                        \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        resizeEnd\n                    \n                    \n                        Called after the mouse is released after a resize event. $event is a ResizeEvent object.\n\n                        $event Type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:359\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        resizeStart\n                    \n                    \n                        Called when the mouse is pressed and a resize event is about to begin. $event is a ResizeEvent object.\n\n                        $event Type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:349\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        resizing\n                    \n                    \n                        Called as the mouse is dragged after a resize event has begun. $event is a ResizeEvent object.\n\n                        $event Type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:354\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  Inject,\n  PLATFORM_ID\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Subject, Observable, Observer, merge, EMPTY } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  filter,\n  pairwise,\n  take,\n  share,\n  auditTime,\n  switchMap,\n  startWith,\n  tap\n} from 'rxjs/operators';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\nimport { IS_TOUCH_DEVICE } from './is-touch-device';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction isNumberCloseTo(\n  value1: number,\n  value2: number,\n  precision: number = 3\n): boolean {\n  const diff: number = Math.abs(value1 - value2);\n  return diff  style[property])\n    .find(value => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(\n      /.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/,\n      '$1'\n    );\n    translateY = transform.replace(\n      /.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/,\n      '$2'\n    );\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX\n    };\n  } else {\n    const boundingRect: BoundingRectangle = element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft\n    };\n  }\n}\n\nfunction isWithinBoundingY({\n  clientY,\n  rect\n}: {\n  clientY: number;\n  rect: ClientRect;\n}): boolean {\n  return clientY >= rect.top && clientY = rect.left && clientX  {\n    edgesDiff[edge] = (newRectangle[edge] || 0) - (initialRectangle[edge] || 0);\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_LEFT_HOVER_CLASS: string = 'resize-left-hover';\nconst RESIZE_RIGHT_HOVER_CLASS: string = 'resize-right-hover';\nconst RESIZE_TOP_HOVER_CLASS: string = 'resize-top-hover';\nconst RESIZE_BOTTOM_HOVER_CLASS: string = 'resize-bottom-hover';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * \n * \n * ```\n * Or in case they are sibling elements:\n * ```html\n * \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizable]',\n  exportAs: 'mwlResizable'\n})\nexport class ResizableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * The edges that an element can be resized from. Pass an object like `{top: true, bottom: false}`. By default no edges can be resized.\n   * @deprecated use a resize handle instead that positions itself to the side of the element you would like to resize\n   */\n  @Input() resizeEdges: Edges = {};\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: ResizeCursors = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Mouse over thickness to active cursor.\n   * @deprecated invalid when you migrate to use resize handles instead of setting resizeEdges on the element\n   */\n  @Input() resizeCursorPrecision: number = 3;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Allow elements to be resized to negative dimensions\n   */\n  @Input() allowNegativeResizes: boolean = false;\n\n  /**\n   * The mouse move throttle in milliseconds, default: 50 ms\n   */\n  @Input() mouseMoveThrottleMS: number = MOUSE_MOVE_THROTTLE_MS;\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private destroy$ = new Subject();\n\n  private resizeEdges$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: any,\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    const mousedown$: Observable = merge(this.pointerEventListeners.pointerDown, this.mousedown);\n\n    const mousemove$ = merge(\n      this.pointerEventListeners.pointerMove,\n      this.mousemove\n    ).pipe(\n      tap(({ event }) => {\n        if (currentResize) {\n          try {\n            event.preventDefault();\n          } catch (e) {\n            // just adding try-catch not to see errors in console if there is a passive listener for same event somewhere\n            // browser does nothing except of writing errors to console\n          }\n        }\n      }),\n      share()\n    );\n\n    const mouseup$ = merge(this.pointerEventListeners.pointerUp, this.mouseup);\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const getResizeCursors = (): ResizeCursors => {\n      return {\n        ...DEFAULT_RESIZE_CURSORS,\n        ...this.resizeCursors\n      };\n    };\n\n    this.resizeEdges$\n      .pipe(\n        startWith(this.resizeEdges),\n        map(() => {\n          return (\n            this.resizeEdges &&\n            Object.keys(this.resizeEdges).some(edge => !!this.resizeEdges[edge])\n          );\n        }),\n        switchMap(legacyResizeEdgesEnabled =>\n          legacyResizeEdgesEnabled ? mousemove$ : EMPTY\n        ),\n        auditTime(this.mouseMoveThrottleMS),\n        takeUntil(this.destroy$)\n      )\n      .subscribe(({ clientX, clientY }) => {\n        const resizeEdges: Edges = getResizeEdges({\n          clientX,\n          clientY,\n          elm: this.elm,\n          allowedEdges: this.resizeEdges,\n          cursorPrecision: this.resizeCursorPrecision\n        });\n        const resizeCursors = getResizeCursors();\n        if (!currentResize) {\n          const cursor = getResizeCursor(resizeEdges, resizeCursors);\n          this.renderer.setStyle(this.elm.nativeElement, 'cursor', cursor);\n        }\n        this.setElementClass(\n          this.elm,\n          RESIZE_LEFT_HOVER_CLASS,\n          resizeEdges.left === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_RIGHT_HOVER_CLASS,\n          resizeEdges.right === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_TOP_HOVER_CLASS,\n          resizeEdges.top === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_BOTTOM_HOVER_CLASS,\n          resizeEdges.bottom === true\n        );\n      });\n\n    const mousedrag: Observable = mousedown$\n      .pipe(\n        mergeMap(startCoords => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y)\n            };\n          }\n\n          return (merge(\n            mousemove$.pipe(take(1)).pipe(map(coords => [, coords])),\n            mousemove$.pipe(pairwise())\n          ) as Observable)\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords)\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y\n                };\n              })\n            )\n            .pipe(takeUntil(merge(mouseup$, mousedown$)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return (\n            this.allowNegativeResizes ||\n            !!(\n              newBoundingRect.height &&\n              newBoundingRect.width &&\n              newBoundingRect.height > 0 &&\n              newBoundingRect.width > 0\n            )\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect\n                })\n              })\n            : true;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        if (this.resizing.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizing.emit({\n              edges: getEdgesDiff({\n                edges: currentResize!.edges,\n                initialRectangle: currentResize!.startingRect,\n                newRectangle: newBoundingRect\n              }),\n              rectangle: newBoundingRect\n            });\n          });\n        }\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    mousedown$\n      .pipe(\n        map(({ clientX, clientY, edges }) => {\n          return (\n            edges ||\n            getResizeEdges({\n              clientX,\n              clientY,\n              elm: this.elm,\n              allowedEdges: this.resizeEdges,\n              cursorPrecision: this.resizeCursorPrecision\n            })\n          );\n        })\n      )\n      .pipe(\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect\n        };\n        const resizeCursors = getResizeCursors();\n        const cursor = getResizeCursor(currentResize.edges, resizeCursors);\n        this.renderer.setStyle(document.body, 'cursor', cursor);\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, true);\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = this.elm.nativeElement.cloneNode(true);\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        if (this.resizeStart.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizeStart.emit({\n              edges: getEdgesDiff({\n                edges,\n                initialRectangle: startingRect,\n                newRectangle: startingRect\n              }),\n              rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0)\n            });\n          });\n        }\n      });\n\n    mouseup$.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        if (this.resizeEnd.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizeEnd.emit({\n              edges: getEdgesDiff({\n                edges: currentResize!.edges,\n                initialRectangle: currentResize!.startingRect,\n                newRectangle: currentResize!.currentRect\n              }),\n              rectangle: currentResize!.currentRect\n            });\n          });\n        }\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.resizeEdges) {\n      this.resizeEdges$.next(this.resizeEdges);\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    // browser check for angular universal, because it doesn't know what document is\n    if (isPlatformBrowser(this.platformId)) {\n      this.renderer.setStyle(document.body, 'cursor', '');\n    }\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.resizeEdges$.complete();\n    this.destroy$.next();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable;\n\n  public pointerMove: Observable;\n\n  public pointerUp: Observable;\n\n  private static instance: PointerEventListeners; // tslint:disable-line\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchStart = renderer.listen(\n              'document',\n              'touchstart',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.touches[0].clientX,\n                  clientY: event.touches[0].clientY,\n                  event\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchStart!();\n          }\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchMove = renderer.listen(\n              'document',\n              'touchmove',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.targetTouches[0].clientX,\n                  clientY: event.targetTouches[0].clientY,\n                  event\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchMove!();\n          }\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: (() => void) | undefined;\n        let unsubscribeTouchCancel: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchEnd = renderer.listen(\n              'document',\n              'touchend',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.changedTouches[0].clientX,\n                  clientY: event.changedTouches[0].clientY,\n                  event\n                });\n              }\n            );\n\n            unsubscribeTouchCancel = renderer.listen(\n              'document',\n              'touchcancel',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.changedTouches[0].clientX,\n                  clientY: event.changedTouches[0].clientY,\n                  event\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchEnd!();\n            unsubscribeTouchCancel!();\n          }\n        };\n      }\n    ).pipe(share());\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ResizableModule.html":{"url":"modules/ResizableModule.html","title":"module - ResizableModule","body":"\n                   \n\n\n\n\n    Modules\n    ResizableModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/resizable.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ResizableDirective\n                        \n                        \n                            ResizeHandleDirective\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ResizableDirective\n                        \n                        \n                            ResizeHandleDirective\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { ResizableDirective } from './resizable.directive';\nimport { ResizeHandleDirective } from './resize-handle.directive';\n\n@NgModule({\n  declarations: [ResizableDirective, ResizeHandleDirective],\n  exports: [ResizableDirective, ResizeHandleDirective]\n})\nexport class ResizableModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResizeCursors.html":{"url":"interfaces/ResizeCursors.html","title":"interface - ResizeCursors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ResizeCursors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resizable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        bottomLeft\n                                \n                                \n                                        bottomRight\n                                \n                                \n                                        leftOrRight\n                                \n                                \n                                        topLeft\n                                \n                                \n                                        topOrBottom\n                                \n                                \n                                        topRight\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bottomLeft\n                                    \n                                \n                                \n                                    \n                                        bottomLeft:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bottomRight\n                                    \n                                \n                                \n                                    \n                                        bottomRight:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        leftOrRight\n                                    \n                                \n                                \n                                    \n                                        leftOrRight:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topLeft\n                                    \n                                \n                                \n                                    \n                                        topLeft:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topOrBottom\n                                    \n                                \n                                \n                                    \n                                        topOrBottom:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topRight\n                                    \n                                \n                                \n                                    \n                                        topRight:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  Inject,\n  PLATFORM_ID\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Subject, Observable, Observer, merge, EMPTY } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  filter,\n  pairwise,\n  take,\n  share,\n  auditTime,\n  switchMap,\n  startWith,\n  tap\n} from 'rxjs/operators';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\nimport { IS_TOUCH_DEVICE } from './is-touch-device';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction isNumberCloseTo(\n  value1: number,\n  value2: number,\n  precision: number = 3\n): boolean {\n  const diff: number = Math.abs(value1 - value2);\n  return diff  style[property])\n    .find(value => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(\n      /.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/,\n      '$1'\n    );\n    translateY = transform.replace(\n      /.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/,\n      '$2'\n    );\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX\n    };\n  } else {\n    const boundingRect: BoundingRectangle = element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft\n    };\n  }\n}\n\nfunction isWithinBoundingY({\n  clientY,\n  rect\n}: {\n  clientY: number;\n  rect: ClientRect;\n}): boolean {\n  return clientY >= rect.top && clientY = rect.left && clientX  {\n    edgesDiff[edge] = (newRectangle[edge] || 0) - (initialRectangle[edge] || 0);\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_LEFT_HOVER_CLASS: string = 'resize-left-hover';\nconst RESIZE_RIGHT_HOVER_CLASS: string = 'resize-right-hover';\nconst RESIZE_TOP_HOVER_CLASS: string = 'resize-top-hover';\nconst RESIZE_BOTTOM_HOVER_CLASS: string = 'resize-bottom-hover';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * \n * \n * ```\n * Or in case they are sibling elements:\n * ```html\n * \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizable]',\n  exportAs: 'mwlResizable'\n})\nexport class ResizableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * The edges that an element can be resized from. Pass an object like `{top: true, bottom: false}`. By default no edges can be resized.\n   * @deprecated use a resize handle instead that positions itself to the side of the element you would like to resize\n   */\n  @Input() resizeEdges: Edges = {};\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: ResizeCursors = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Mouse over thickness to active cursor.\n   * @deprecated invalid when you migrate to use resize handles instead of setting resizeEdges on the element\n   */\n  @Input() resizeCursorPrecision: number = 3;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Allow elements to be resized to negative dimensions\n   */\n  @Input() allowNegativeResizes: boolean = false;\n\n  /**\n   * The mouse move throttle in milliseconds, default: 50 ms\n   */\n  @Input() mouseMoveThrottleMS: number = MOUSE_MOVE_THROTTLE_MS;\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private destroy$ = new Subject();\n\n  private resizeEdges$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: any,\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    const mousedown$: Observable = merge(this.pointerEventListeners.pointerDown, this.mousedown);\n\n    const mousemove$ = merge(\n      this.pointerEventListeners.pointerMove,\n      this.mousemove\n    ).pipe(\n      tap(({ event }) => {\n        if (currentResize) {\n          try {\n            event.preventDefault();\n          } catch (e) {\n            // just adding try-catch not to see errors in console if there is a passive listener for same event somewhere\n            // browser does nothing except of writing errors to console\n          }\n        }\n      }),\n      share()\n    );\n\n    const mouseup$ = merge(this.pointerEventListeners.pointerUp, this.mouseup);\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const getResizeCursors = (): ResizeCursors => {\n      return {\n        ...DEFAULT_RESIZE_CURSORS,\n        ...this.resizeCursors\n      };\n    };\n\n    this.resizeEdges$\n      .pipe(\n        startWith(this.resizeEdges),\n        map(() => {\n          return (\n            this.resizeEdges &&\n            Object.keys(this.resizeEdges).some(edge => !!this.resizeEdges[edge])\n          );\n        }),\n        switchMap(legacyResizeEdgesEnabled =>\n          legacyResizeEdgesEnabled ? mousemove$ : EMPTY\n        ),\n        auditTime(this.mouseMoveThrottleMS),\n        takeUntil(this.destroy$)\n      )\n      .subscribe(({ clientX, clientY }) => {\n        const resizeEdges: Edges = getResizeEdges({\n          clientX,\n          clientY,\n          elm: this.elm,\n          allowedEdges: this.resizeEdges,\n          cursorPrecision: this.resizeCursorPrecision\n        });\n        const resizeCursors = getResizeCursors();\n        if (!currentResize) {\n          const cursor = getResizeCursor(resizeEdges, resizeCursors);\n          this.renderer.setStyle(this.elm.nativeElement, 'cursor', cursor);\n        }\n        this.setElementClass(\n          this.elm,\n          RESIZE_LEFT_HOVER_CLASS,\n          resizeEdges.left === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_RIGHT_HOVER_CLASS,\n          resizeEdges.right === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_TOP_HOVER_CLASS,\n          resizeEdges.top === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_BOTTOM_HOVER_CLASS,\n          resizeEdges.bottom === true\n        );\n      });\n\n    const mousedrag: Observable = mousedown$\n      .pipe(\n        mergeMap(startCoords => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y)\n            };\n          }\n\n          return (merge(\n            mousemove$.pipe(take(1)).pipe(map(coords => [, coords])),\n            mousemove$.pipe(pairwise())\n          ) as Observable)\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords)\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y\n                };\n              })\n            )\n            .pipe(takeUntil(merge(mouseup$, mousedown$)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return (\n            this.allowNegativeResizes ||\n            !!(\n              newBoundingRect.height &&\n              newBoundingRect.width &&\n              newBoundingRect.height > 0 &&\n              newBoundingRect.width > 0\n            )\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect\n                })\n              })\n            : true;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        if (this.resizing.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizing.emit({\n              edges: getEdgesDiff({\n                edges: currentResize!.edges,\n                initialRectangle: currentResize!.startingRect,\n                newRectangle: newBoundingRect\n              }),\n              rectangle: newBoundingRect\n            });\n          });\n        }\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    mousedown$\n      .pipe(\n        map(({ clientX, clientY, edges }) => {\n          return (\n            edges ||\n            getResizeEdges({\n              clientX,\n              clientY,\n              elm: this.elm,\n              allowedEdges: this.resizeEdges,\n              cursorPrecision: this.resizeCursorPrecision\n            })\n          );\n        })\n      )\n      .pipe(\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect\n        };\n        const resizeCursors = getResizeCursors();\n        const cursor = getResizeCursor(currentResize.edges, resizeCursors);\n        this.renderer.setStyle(document.body, 'cursor', cursor);\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, true);\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = this.elm.nativeElement.cloneNode(true);\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        if (this.resizeStart.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizeStart.emit({\n              edges: getEdgesDiff({\n                edges,\n                initialRectangle: startingRect,\n                newRectangle: startingRect\n              }),\n              rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0)\n            });\n          });\n        }\n      });\n\n    mouseup$.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        if (this.resizeEnd.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizeEnd.emit({\n              edges: getEdgesDiff({\n                edges: currentResize!.edges,\n                initialRectangle: currentResize!.startingRect,\n                newRectangle: currentResize!.currentRect\n              }),\n              rectangle: currentResize!.currentRect\n            });\n          });\n        }\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.resizeEdges) {\n      this.resizeEdges$.next(this.resizeEdges);\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    // browser check for angular universal, because it doesn't know what document is\n    if (isPlatformBrowser(this.platformId)) {\n      this.renderer.setStyle(document.body, 'cursor', '');\n    }\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.resizeEdges$.complete();\n    this.destroy$.next();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable;\n\n  public pointerMove: Observable;\n\n  public pointerUp: Observable;\n\n  private static instance: PointerEventListeners; // tslint:disable-line\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchStart = renderer.listen(\n              'document',\n              'touchstart',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.touches[0].clientX,\n                  clientY: event.touches[0].clientY,\n                  event\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchStart!();\n          }\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchMove = renderer.listen(\n              'document',\n              'touchmove',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.targetTouches[0].clientX,\n                  clientY: event.targetTouches[0].clientY,\n                  event\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchMove!();\n          }\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: (() => void) | undefined;\n        let unsubscribeTouchCancel: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchEnd = renderer.listen(\n              'document',\n              'touchend',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.changedTouches[0].clientX,\n                  clientY: event.changedTouches[0].clientY,\n                  event\n                });\n              }\n            );\n\n            unsubscribeTouchCancel = renderer.listen(\n              'document',\n              'touchcancel',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.changedTouches[0].clientX,\n                  clientY: event.changedTouches[0].clientY,\n                  event\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchEnd!();\n            unsubscribeTouchCancel!();\n          }\n        };\n      }\n    ).pipe(share());\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResizeEvent.html":{"url":"interfaces/ResizeEvent.html","title":"interface - ResizeEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ResizeEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/resize-event.interface.ts\n        \n\n            \n                Description\n            \n            \n                The $event object that is passed to the resize events\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        edges\n                                \n                                \n                                        rectangle\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        edges\n                                    \n                                \n                                \n                                    \n                                        edges:     Edges\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Edges\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rectangle\n                                    \n                                \n                                \n                                    \n                                        rectangle:     BoundingRectangle\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BoundingRectangle\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BoundingRectangle } from './bounding-rectangle.interface';\nimport { Edges } from './edges.interface';\n\n/**\n * The `$event` object that is passed to the resize events\n */\nexport interface ResizeEvent {\n  rectangle: BoundingRectangle;\n  edges: Edges;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/ResizeHandleDirective.html":{"url":"directives/ResizeHandleDirective.html","title":"directive - ResizeHandleDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  ResizeHandleDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resize-handle.directive.ts\n        \n\n            \n                Description\n            \n            \n                An element placed inside a mwlResizable directive to be used as a drag and resize handle\nFor example\n * \n *   \n * \n *Or in case they are sibling elements:\n * \n * \n *\n            \n\n            \n                Implements\n            \n            \n                        OnInit\n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [mwlResizeHandle]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                resizableContainer\n                            \n                            \n                                resizeEdges\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(renderer: Renderer2, element: ElementRef, zone: NgZone, resizableDirective: ResizableDirective)\n                    \n                \n                        \n                            \n                                Defined in src/resize-handle.directive.ts:52\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                    Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        element\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        zone\n                                                  \n                                                        \n                                                                    NgZone\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        resizableDirective\n                                                  \n                                                        \n                                                                    ResizableDirective\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        resizableContainer\n                    \n                    \n                        Reference to ResizableDirective in case if handle is not located inside of element with ResizableDirective\n\n                            \n                            Type :    ResizableDirective\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/resize-handle.directive.ts:44\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        resizeEdges\n                    \n                    \n                        The Edges object that contains the edges of the parent element that dragging the handle will trigger a resize on\n\n                            \n                            Type :    Edges\n\n                            \n                        \n                            Default value : {}\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/resize-handle.directive.ts:40\n                            \n                        \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  Input,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  OnDestroy,\n  NgZone,\n  Optional\n} from '@angular/core';\nimport { fromEvent, merge, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { ResizableDirective } from './resizable.directive';\nimport { Edges } from './interfaces/edges.interface';\nimport { IS_TOUCH_DEVICE } from './is-touch-device';\n\n/**\n * An element placed inside a `mwlResizable` directive to be used as a drag and resize handle\n *\n * For example\n *\n * ```html\n * \n *   \n * \n * ```\n * Or in case they are sibling elements:\n * ```html\n * \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizeHandle]'\n})\nexport class ResizeHandleDirective implements OnInit, OnDestroy {\n  /**\n   * The `Edges` object that contains the edges of the parent element that dragging the handle will trigger a resize on\n   */\n  @Input() resizeEdges: Edges = {};\n  /**\n   * Reference to ResizableDirective in case if handle is not located inside of element with ResizableDirective\n   */\n  @Input() resizableContainer: ResizableDirective;\n\n  private eventListeners: {\n    touchmove?: () => void;\n    mousemove?: () => void;\n    [key: string]: (() => void) | undefined;\n  } = {};\n\n  private destroy$ = new Subject();\n\n  constructor(\n    private renderer: Renderer2,\n    private element: ElementRef,\n    private zone: NgZone,\n    @Optional() private resizableDirective: ResizableDirective\n  ) {}\n\n  ngOnInit(): void {\n    this.zone.runOutsideAngular(() => {\n      this.listenOnTheHost('mousedown').subscribe(event => {\n        this.onMousedown(event, event.clientX, event.clientY);\n      });\n\n      this.listenOnTheHost('mouseup').subscribe(event => {\n        this.onMouseup(event.clientX, event.clientY);\n      });\n\n      if (IS_TOUCH_DEVICE) {\n        this.listenOnTheHost('touchstart').subscribe(event => {\n          this.onMousedown(\n            event,\n            event.touches[0].clientX,\n            event.touches[0].clientY\n          );\n        });\n\n        merge(\n          this.listenOnTheHost('touchend'),\n          this.listenOnTheHost('touchcancel')\n        ).subscribe(event => {\n          this.onMouseup(\n            event.changedTouches[0].clientX,\n            event.changedTouches[0].clientY\n          );\n        });\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.unsubscribeEventListeners();\n  }\n\n  /**\n   * @hidden\n   */\n  onMousedown(\n    event: MouseEvent | TouchEvent,\n    clientX: number,\n    clientY: number\n  ): void {\n    event.preventDefault();\n    if (!this.eventListeners.touchmove) {\n      this.eventListeners.touchmove = this.renderer.listen(\n        this.element.nativeElement,\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          this.onMousemove(\n            touchMoveEvent,\n            touchMoveEvent.targetTouches[0].clientX,\n            touchMoveEvent.targetTouches[0].clientY\n          );\n        }\n      );\n    }\n    if (!this.eventListeners.mousemove) {\n      this.eventListeners.mousemove = this.renderer.listen(\n        this.element.nativeElement,\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.onMousemove(\n            mouseMoveEvent,\n            mouseMoveEvent.clientX,\n            mouseMoveEvent.clientY\n          );\n        }\n      );\n    }\n    this.resizable.mousedown.next({\n      clientX,\n      clientY,\n      edges: this.resizeEdges\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  onMouseup(clientX: number, clientY: number): void {\n    this.unsubscribeEventListeners();\n    this.resizable.mouseup.next({\n      clientX,\n      clientY,\n      edges: this.resizeEdges\n    });\n  }\n\n  // directive might be passed from DI or as an input\n  private get resizable(): ResizableDirective {\n    return this.resizableDirective || this.resizableContainer;\n  }\n\n  private onMousemove(\n    event: MouseEvent | TouchEvent,\n    clientX: number,\n    clientY: number\n  ): void {\n    this.resizable.mousemove.next({\n      clientX,\n      clientY,\n      edges: this.resizeEdges,\n      event\n    });\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListeners).forEach(type => {\n      (this as any).eventListeners[type]();\n      delete this.eventListeners[type];\n    });\n  }\n\n  private listenOnTheHost(eventName: string) {\n    return fromEvent(this.element.nativeElement, eventName).pipe(\n      takeUntil(this.destroy$)\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n\n3.4.0 (2021-06-02)\nFeatures\n\nmwlResizeHandle: add resizableContainer input (862249f)\n\n\n3.3.5 (2021-02-02)\nPerformance Improvements\n\nlisten to touch events only on touch devices (#126) (c85a28d)\n\n\n3.3.4 (2020-11-21)\nPerformance Improvements\n\nonly trigger change detection if there are output subscribers (930de54)\n\n\n3.3.3 (2020-07-24)\nBug Fixes\n\nhandle existing negative css transforms on resizable elements (edf56db)\n\n\n3.3.2 (2020-05-22)\nBug Fixes\n\nallow any angular version above 6 (66f2289)\n\n\n3.3.1 (2020-05-22)\nBug Fixes\n\nhandle translate3d transforms on resizable elements (534bdf6), closes #100\n\n\n3.3.0 (2020-01-14)\nFeatures\n\nallow changing mouseMoveThrottleMS (#106) (fb5599b)\n\n\n3.2.6 (2019-10-11)\nBug Fixes\n\nallow angular 9 peer dependency (86e366c)\n\n\n3.2.5 (2019-10-07)\nPerformance Improvements\n\nlazily initialise all mousemove listeners until needed (81134ee)\n\n\n3.2.4 (2019-02-28)\nBug Fixes\n\nrestore compatibility with universal (210decc), closes #83\n\n\n3.2.3 (2019-02-05)\nBug Fixes\n\nallow angular 8 peer dependency (94dc48d)\ndeprecate the top level resizeEdges option in favour of resize handles (2f6ac2d)\n\nPerformance Improvements\n\nremove mouse move listeners when only using resize handles (1185f3a)\n\n\n3.2.2 (2018-08-10)\nBug Fixes\n\ndon't throw errors when immediately destroying the host component (56e463b)\n\n\n3.2.1 (2018-08-03)\nBug Fixes\n\nensure all resizing events are always emitted (25d6fa3)\n\n\n3.2.0 (2018-07-23)\nFeatures\n\nallow negative resizing of elements (560bcb1)\n\n\n3.1.0 (2018-06-19)\nFeatures\n\nimprove default resize cursors (37fc88e)\n\n\n3.0.0 (2018-05-09)\nFeatures\n\nupgrade to angular 6 (c7e3de6)\n\nBREAKING CHANGES\n\nangular 6 and rxjs 6 or higher are now required to use this package\n\n\n2.0.0 (2017-12-26)\nFeatures\n\nexport directives with Directive suffix (0440bbd)\nupgrade to angular 5 (5d6a576)\nuse lettable rxjs operators (af7abf7)\nuse ng-packagr for bundling the package (c4519a1), closes #79 #80\n\nBREAKING CHANGES\n\nthe global observable prototype is now no longer modified by this package, you must\nimport rxjs operators yourself. Also rxjs 5.5 or higher is now required to use this library\nThe UMD entry point has changed from angular-resizable-element/dist/umd/angular-resizable-element.js to angular-resizable-element/bundles/angular-resizable-element.umd.js\n\nSystem.js users will need to update their configs\n\nangular 5 or higher is now required to use this package\nThe Resizable import is now ResizableDirective and ResizeHandle is now\nResizeHandleDirective\n\n\n1.2.5 (2017-12-26)\nBug Fixes\n\nresizeHandle: allow handles to be dynamically shown (34342aa), closes #68\nresize elements that have css transforms (f24a746), closes #72\nset the resize cursor globally when resizing (71d5a05), closes #70\n\n\n1.2.4 (2017-10-21)\nBug Fixes\n\nallow angular 5 peer dependency (25cfe50)\n\n\n1.2.3 (2017-09-28)\nBug Fixes\n\nAdd startingRect scroll position to cloned node. (#66) (a056154)\n\n\n1.2.2 (2017-08-28)\nBug Fixes\n\nensure mouse event handlers are triggers outside of the angular zone (23fc6e5), closes #65\n\n\n1.2.1 (2017-08-06)\nBug Fixes\n\ncursor: change the cursor back to default on IE11 (a0323e9), closes #62\n\n\n1.2.0 (2017-06-12)\nFeatures\n\nexport Edges and BoundingRectangle interfaces for use within applications (10051cd)\n\n\n1.1.2 (2017-06-10)\nBug Fixes\n\ndragHandle: fix drag handles on firefox (1d15bb4), closes #54\n\n\n1.1.1 (2017-05-21)\nBug Fixes\n\nset ghost element width and height on resize start (be5d727), closes #53\n\n\n1.1.0 (2017-05-12)\nFeatures\n\nadd a class to the ghost element (54be6b7)\n\n\n1.0.0 (2017-03-24)\nFeatures\n\nng4: upgrade to angular 4 (4c665d2)\n\nBREAKING CHANGES\n\nng4: angular 4.0 or higher is now required to use this library. The\nupgrade should be seamless\nfor most users.\n\n\n0.8.1 (2017-03-23)\nPerformance Improvements\n\nthrottle mousemove listener events (05f7f7e)\nuse shared mouse event listeners across all resizable instances (2a4b102)\n\n\n0.8.0 (2017-03-16)\nFeatures\n\nghostElementPositioning: allow ghost element positioning to be configured (b77c9fc)\nexpose Resizable and ResizeHandle directives (3633040)\n\n\n0.7.2 (2017-03-04)\nBug Fixes\n\nrelax peer dependency warning to allow angular 4 (8232e66)\n\nPerformance Improvements\n\nrun all rezize events outside the angular zone (820612e)\nresizable: only register mouse move events when a rezize is active (a74f9e2)\nresizeHandle: dynamically register mouse move event listener (4b20cde)\n\n\n0.7.0 (2017-02-28)\nFeatures\n\ncssClasses: Gives classes to main element depend on state (8e3f108)\ncursorPrecision: allow cursor precision value to be edited (3ce508d)\n\n\n0.6.1 (2017-02-11)\nBug Fixes\n\nuniversal: remove MouseEvent reference (520abce), closes #41\n\n\n0.6.0 (2017-02-04)\nFeatures\n\nresizeCursors: allow resize cursors to be customised (99d2f66), closes #40\n\n\n0.5.7 (2017-01-30)\nBug Fixes\n\nuse correct touch event properties (0ab7d40), closes #39\n\n\n0.5.6 (2017-01-25)\nBug Fixes\n\nelement should resize on touch events (aa169c7), closes #36\n\n\n0.5.5 (2017-01-11)\nBug Fixes\n\nadd width and height to cloned node (75ce122), closes #31\nkeep cursor while resizing (93a5c4e), closes #33\n\n\n0.5.4 (2016-12-11)\nBug Fixes\n\ncursor: reset the cursor instead of changing it to auto (514851f)\n\n\n0.5.3 (2016-11-19)\nBug Fixes\n\nunsubscribe all observables when the component is destroyed (d5ea756), closes #27\n\n\n0.5.2 (2016-11-05)\nBug Fixes\n\naot: aot compatibility (9236e02)\n\n\n0.5.1 (2016-11-03)\nBug Fixes\n\ndont change the cursor when resizing an element (697c52c), closes #24\n\n\n0.5.0 (2016-10-29)\nBug Fixes\n\nfix resizing via a drag handle (5f7f468)\nprevent text from being selected when resizing an element (5571069), closes #22\n\nFeatures\n\nrename the library from angular2-resizable to angular-resizable-element (927235e), closes #21\nrename the resize output to resizing (9597986), closes #20\n\nBREAKING CHANGES\n\nThe library has been renamed to angular-resizable-element.\n\nThe UMD entry point has changed to\nnode_modules/angular-resizable-element/dist/umd/angular-resizable-element.js\nBefore(resize)=\"onResize($event)\"\n\nAfter:\n(resizing)=\"onResizing($event)\"\n0.4.1 (2016-09-28)\nBug Fixes\n\ntypings: dont include reference to core-js (68dc84f)\n\n\n0.4.0 (2016-09-25)\nFeatures\n\nbuild: support offline template compilation (f3fe12a)\n\nBREAKING CHANGES\n\nbuild: For System.js users the path to the UMD files has changed:\n\nBefore:\nnode_modules/angular2-resizable/angular2-resizable.jsAfter:\nnode_modules/angular2-resizable/dist/umd/angular2-resizable.js\n0.3.3 (2016-09-13)\nBug Fixes\n\npeerDependencies: allow any versions of angular post RC5 (cbe088f)\n\n\n0.3.2 (2016-09-03)\nFeatures\n\nangular: support RC6 (d5b18cc)\n\n\n0.3.1 (2016-08-25)\nBug Fixes\n\nrxjs: use correct rxjs operator imports in dist (858b3f8), closes #16\n\n\n0.3.0 (2016-08-12)\nFeatures\n\nevents: rename all outputs to drop the on prefix (9c76aac)\ndirective selectors are now camel case instead of dash case (ffad2ca)\nupgrade to angular RC5 (9557c0a)\n\nBREAKING CHANGES\n\nmwl-resizable is now mwlResizable and mwl-resize-handle is now mwlResizeHandle\nAngular RC5 is now required\n\nThe Resizable and ResizeHandle directives are now no longer exported. Instead you must use the ResizableModule. See the readme or the demo app for an example of how to do this.\n\nevents: The onResizeStart output has been renamed to resizeStart\n\nThe onResize output has been renamed to resize\nThe onResizeEnd output has been renamed to resizeEnd\n\n0.2.1 (2016-07-15)\nBug Fixes\n\ndemo: fix broken demo (0a5bf11)\n\n\n0.2.0 (2016-07-15)\nBug Fixes\n\ncreate a clone of the ghost element instead of applying styling to the host (fa73345), closes #15\nonly resize when the cursor is within the bounding rectangle (dedc3bb)\n\nBREAKING CHANGES\n\nenableResizeStyling has been renamed to enableGhostResize\n\n\n0.1.0 (2016-06-26)\nBug Fixes\n\nmousedrag: cancel the previous mousedrag observable when starting a new drag (149c1a4), closes #9\nonResizeEnd: call with co-ordinates of last valid resize rather than where the mouse up event w (eb314fd)\nonResizeStart: ensure the starting rectangle is a POJO rather than a bounding rectangle (81fe0b4)\ncancel mousedrag event when either a mouseup or mousedown event fires (c76be59)\ndisable dragging effects on resizable elements on webkit browsers (59078e2)\nrenamed directive selector from mwl-resizeable to mwl-resizable (c60b3f5)\n\nFeatures\n\ndisableResize: support completely disabling resizing an element (9f9c54a), closes #13\nexpose the amount each edge was resized on resize events (d664038), closes #11\nenableResizeStyling: make temporary resizing of the element opt-in by default so users can con (4c59b05), closes #5\nresizeEdges: allow the resize edges to be customised (60c2e08), closes #8\nresizeHandles: add support for nesting resize handles inside the element (1af705a), closes #10\nresizeSnapGrid: allow resizing to fit to a snap grid (74424ba), closes #3\nvalidate: provide a way for resize events to be validated (4da938d), closes #12\n\nBREAKING CHANGES\n\nenableResizeStyling: the element will no longer have its styles changed by default when dragging and\nresizing. You can now re-enable it by setting [enableResizeStyling]=\"true\" on the element.\nthe $event.edges object values now contain numbers instead of booleans\n\nrename the directive from mwl-resizeable to mwl-resizable\n\n\nresizeEdges: by default the element is no longer resizable.\n\nYou must specify [resizeEdges]={top: true, bottom: true, left: true, right: true} to get the old behaviour back\n\n0.0.3 (2016-06-13)\nBug Fixes\n\nimport missing rxjs operators (300ac10)\n\n\n0.0.2 (2016-06-13)\nBug Fixes\n\ntypes: export Edges and BoundingRectangle types (fe49114)\ndont bundle rxjs with the library (7b1280e)\n\n\n0.0.1 (2016-06-13)\nBug Fixes\n\nallow the element to be resized multiple times (bf497d2)\ndrag: disable user dragging (053fb0e)\nreset element styles on mousedown if there was a previous uncancelled resize (a8e5cd3)\noutputs: make outputs sync to prevent ui flicker (032ea5a)\ntypescript: add missing types (e722a86)\n\nFeatures\n\nimprove transforms, add resize events (0959a12)\ninitial WIP resizable implementation (22af52f)\nshow the cursor when mousing over the edge of the element (f440c87)\nsupport resizing from corners (bac87e3), closes #4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Peer dependencies\n    \n    \n        \n            @angular/core : >=6.0.0\n    \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            getEdgesDiff   (src/.../resizable.directive.ts)\n                        \n                        \n                            getElementRect   (src/.../resizable.directive.ts)\n                        \n                        \n                            getNewBoundingRectangle   (src/.../resizable.directive.ts)\n                        \n                        \n                            getResizeCursor   (src/.../resizable.directive.ts)\n                        \n                        \n                            getResizeEdges   (src/.../resizable.directive.ts)\n                        \n                        \n                            isNumberCloseTo   (src/.../resizable.directive.ts)\n                        \n                        \n                            isWithinBoundingX   (src/.../resizable.directive.ts)\n                        \n                        \n                            isWithinBoundingY   (src/.../resizable.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/resizable.directive.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getEdgesDiff\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetEdgesDiff(undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getElementRect\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetElementRect(element, ghostElementPositioning)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        element\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        ghostElementPositioning\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getNewBoundingRectangle\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetNewBoundingRectangle(startingRect, edges, clientX, clientY)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        startingRect\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        edges\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        clientX\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        clientY\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getResizeCursor\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetResizeCursor(edges, cursors)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        edges\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        cursors\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getResizeEdges\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetResizeEdges(undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isNumberCloseTo\n                            \n                            \n                        \n                    \n                \n                \n                    \nisNumberCloseTo(value1, value2, precision)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value1\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        value2\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        precision\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isWithinBoundingX\n                            \n                            \n                        \n                    \n                \n                \n                    \nisWithinBoundingX(undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isWithinBoundingY\n                            \n                            \n                        \n                    \n                \n                \n                    \nisWithinBoundingY(undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nangular resizable element\n\n\n\n\n\nDemo\nhttps://mattlewis92.github.io/angular-resizable-element/demo/\nTable of contents\n\nAbout\nInstallation\nDocumentation\nDevelopment\nLicense\n\nAbout\nAn angular 6.0+ directive that allows an element to be dragged and resized\nInstallation\nInstall through npm:\nnpm install --save angular-resizable-elementThen use it in your app like so:\nimport { Component } from '@angular/core';\nimport { ResizeEvent } from 'angular-resizable-element';\n\n@Component({\n  selector: 'demo-app',\n  styles: [\n    `\n      .rectangle {\n        position: relative;\n        top: 200px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: 300px;\n        height: 150px;\n        background-color: #fd4140;\n        border: solid 1px #121621;\n        color: #121621;\n        margin: auto;\n      }\n\n      mwlResizable {\n        box-sizing: border-box; // required for the enableGhostResize option to work\n      }\n\n      .resize-handle-top,\n      .resize-handle-bottom {\n        position: absolute;\n        height: 5px;\n        cursor: row-resize;\n        width: 100%;\n      }\n\n      .resize-handle-top {\n        top: 0;\n      }\n\n      .resize-handle-bottom {\n        bottom: 0;\n      }\n\n      .resize-handle-left,\n      .resize-handle-right {\n        position: absolute;\n        height: 100%;\n        cursor: col-resize;\n        width: 5px;\n      }\n\n      .resize-handle-left {\n        left: 0;\n      }\n\n      .resize-handle-right {\n        right: 0;\n      }\n    `\n  ],\n  template: `\n    \n      \n      \n      \n      \n    \n  `\n})\nexport class MyComponent {\n  onResizeEnd(event: ResizeEvent): void {\n    console.log('Element was resized', event);\n  }\n}\n\n// now use within your apps module\nimport { NgModule } from '@angular/core';\nimport { ResizableModule } from 'angular-resizable-element';\n\n@NgModule({\n  declarations: [MyComponent],\n  imports: [ResizableModule],\n  bootstrap: [MyComponent]\n})\nclass MyModule {}You may also find it useful to view the demo source.\nDocumentation\nAll documentation is auto-generated from the source and can be viewed here:\nhttps://mattlewis92.github.io/angular-resizable-element/docs/\nDevelopment\nPrepare your environment\n\nInstall Node.js and NPM (should come with)\nInstall local dev dependencies: npm install while current directory is this repo\n\nDevelopment server\nRun npm start to start a development server on port 8000 with auto reload + tests.\nTesting\nRun npm test to run tests once or npm run test:watch to continually run tests.\nRelease\nnpm run releaseLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2016 Matt Lewis\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ResizableModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DEFAULT_RESIZE_CURSORS   (src/.../resizable.directive.ts)\n                        \n                        \n                            MOUSE_MOVE_THROTTLE_MS   (src/.../resizable.directive.ts)\n                        \n                        \n                            RESIZE_ACTIVE_CLASS   (src/.../resizable.directive.ts)\n                        \n                        \n                            RESIZE_BOTTOM_HOVER_CLASS   (src/.../resizable.directive.ts)\n                        \n                        \n                            RESIZE_GHOST_ELEMENT_CLASS   (src/.../resizable.directive.ts)\n                        \n                        \n                            RESIZE_LEFT_HOVER_CLASS   (src/.../resizable.directive.ts)\n                        \n                        \n                            RESIZE_RIGHT_HOVER_CLASS   (src/.../resizable.directive.ts)\n                        \n                        \n                            RESIZE_TOP_HOVER_CLASS   (src/.../resizable.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/resizable.directive.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_RESIZE_CURSORS\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        DEFAULT_RESIZE_CURSORS:     ResizeCursors\n\n                    \n                \n                    \n                        \n                            Type :     ResizeCursors\n\n                        \n                    \n                    \n                        \n                            Default value : Object.freeze({\n  topLeft: 'nw-resize',\n  topRight: 'ne-resize',\n  bottomLeft: 'sw-resize',\n  bottomRight: 'se-resize',\n  leftOrRight: 'col-resize',\n  topOrBottom: 'row-resize'\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MOUSE_MOVE_THROTTLE_MS\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        MOUSE_MOVE_THROTTLE_MS:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 50\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RESIZE_ACTIVE_CLASS\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        RESIZE_ACTIVE_CLASS:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'resize-active'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RESIZE_BOTTOM_HOVER_CLASS\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        RESIZE_BOTTOM_HOVER_CLASS:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'resize-bottom-hover'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RESIZE_GHOST_ELEMENT_CLASS\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        RESIZE_GHOST_ELEMENT_CLASS:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'resize-ghost-element'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RESIZE_LEFT_HOVER_CLASS\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        RESIZE_LEFT_HOVER_CLASS:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'resize-left-hover'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RESIZE_RIGHT_HOVER_CLASS\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        RESIZE_RIGHT_HOVER_CLASS:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'resize-right-hover'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RESIZE_TOP_HOVER_CLASS\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        RESIZE_TOP_HOVER_CLASS:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'resize-top-hover'\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
